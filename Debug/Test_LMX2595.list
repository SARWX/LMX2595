
Test_LMX2595.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d4c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08007e58  08007e58  00017e58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ec4  08007ec4  0002034c  2**0
                  CONTENTS
  4 .ARM          00000000  08007ec4  08007ec4  0002034c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007ec4  08007ec4  0002034c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ec4  08007ec4  00017ec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ec8  08007ec8  00017ec8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000034c  20000000  08007ecc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001254  2000034c  08008218  0002034c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200015a0  08008218  000215a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002034c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020375  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000de98  00000000  00000000  000203b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ce9  00000000  00000000  0002e250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c68  00000000  00000000  00030f40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000927  00000000  00000000  00031ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019548  00000000  00000000  000324cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000103aa  00000000  00000000  0004ba17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00086288  00000000  00000000  0005bdc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000030b4  00000000  00000000  000e204c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  000e5100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000034c 	.word	0x2000034c
 8000128:	00000000 	.word	0x00000000
 800012c:	08007e40 	.word	0x08007e40

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000350 	.word	0x20000350
 8000148:	08007e40 	.word	0x08007e40

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fb55 	bl	8000800 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f94f 	bl	80003f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f9dd 	bl	8000518 <MX_GPIO_Init>
  MX_SPI1_Init();
 800015e:	f000 f9a5 	bl	80004ac <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8000162:	f007 f9bf 	bl	80074e4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  //HAL_ADCEx_Calibration_Start(&hadc1);
    HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8000166:	2201      	movs	r2, #1
 8000168:	2110      	movs	r1, #16
 800016a:	489b      	ldr	r0, [pc, #620]	; (80003d8 <main+0x28c>)
 800016c:	f000 fe3c 	bl	8000de8 <HAL_GPIO_WritePin>
    User_Delay(10);
 8000170:	200a      	movs	r0, #10
 8000172:	f000 fa41 	bl	80005f8 <User_Delay>

    // Init LMX2595

    HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 8000176:	2200      	movs	r2, #0
 8000178:	f44f 7100 	mov.w	r1, #512	; 0x200
 800017c:	4896      	ldr	r0, [pc, #600]	; (80003d8 <main+0x28c>)
 800017e:	f000 fe33 	bl	8000de8 <HAL_GPIO_WritePin>
    User_Delay(10);
 8000182:	200a      	movs	r0, #10
 8000184:	f000 fa38 	bl	80005f8 <User_Delay>
    HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 8000188:	2201      	movs	r2, #1
 800018a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800018e:	4892      	ldr	r0, [pc, #584]	; (80003d8 <main+0x28c>)
 8000190:	f000 fe2a 	bl	8000de8 <HAL_GPIO_WritePin>
    User_Delay(10);
 8000194:	200a      	movs	r0, #10
 8000196:	f000 fa2f 	bl	80005f8 <User_Delay>

    HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 800019a:	2200      	movs	r2, #0
 800019c:	2110      	movs	r1, #16
 800019e:	488e      	ldr	r0, [pc, #568]	; (80003d8 <main+0x28c>)
 80001a0:	f000 fe22 	bl	8000de8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, TX_Data_Temp, 3, 5000);
 80001a4:	f241 3388 	movw	r3, #5000	; 0x1388
 80001a8:	2203      	movs	r2, #3
 80001aa:	498c      	ldr	r1, [pc, #560]	; (80003dc <main+0x290>)
 80001ac:	488c      	ldr	r0, [pc, #560]	; (80003e0 <main+0x294>)
 80001ae:	f003 f8d3 	bl	8003358 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 80001b2:	2201      	movs	r2, #1
 80001b4:	2110      	movs	r1, #16
 80001b6:	4888      	ldr	r0, [pc, #544]	; (80003d8 <main+0x28c>)
 80001b8:	f000 fe16 	bl	8000de8 <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 80001bc:	2200      	movs	r2, #0
 80001be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001c2:	4885      	ldr	r0, [pc, #532]	; (80003d8 <main+0x28c>)
 80001c4:	f000 fe10 	bl	8000de8 <HAL_GPIO_WritePin>
    User_Delay(10);
 80001c8:	200a      	movs	r0, #10
 80001ca:	f000 fa15 	bl	80005f8 <User_Delay>
    HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 80001ce:	2201      	movs	r2, #1
 80001d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001d4:	4880      	ldr	r0, [pc, #512]	; (80003d8 <main+0x28c>)
 80001d6:	f000 fe07 	bl	8000de8 <HAL_GPIO_WritePin>
    User_Delay(10);
 80001da:	200a      	movs	r0, #10
 80001dc:	f000 fa0c 	bl	80005f8 <User_Delay>

    HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 80001e0:	2200      	movs	r2, #0
 80001e2:	2110      	movs	r1, #16
 80001e4:	487c      	ldr	r0, [pc, #496]	; (80003d8 <main+0x28c>)
 80001e6:	f000 fdff 	bl	8000de8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, TX_Data_Temp, 3, 5000);
 80001ea:	f241 3388 	movw	r3, #5000	; 0x1388
 80001ee:	2203      	movs	r2, #3
 80001f0:	497a      	ldr	r1, [pc, #488]	; (80003dc <main+0x290>)
 80001f2:	487b      	ldr	r0, [pc, #492]	; (80003e0 <main+0x294>)
 80001f4:	f003 f8b0 	bl	8003358 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 80001f8:	2201      	movs	r2, #1
 80001fa:	2110      	movs	r1, #16
 80001fc:	4876      	ldr	r0, [pc, #472]	; (80003d8 <main+0x28c>)
 80001fe:	f000 fdf3 	bl	8000de8 <HAL_GPIO_WritePin>

    User_Delay(1);
 8000202:	2001      	movs	r0, #1
 8000204:	f000 f9f8 	bl	80005f8 <User_Delay>
    //TX_Data_Temp[3] = {0x00,0x24,0x12};
    TX_Data_Temp[2] = TX_Data_Temp[2] & (uint8_t)0xFD; //disable reset
 8000208:	4b74      	ldr	r3, [pc, #464]	; (80003dc <main+0x290>)
 800020a:	789b      	ldrb	r3, [r3, #2]
 800020c:	f023 0302 	bic.w	r3, r3, #2
 8000210:	b2da      	uxtb	r2, r3
 8000212:	4b72      	ldr	r3, [pc, #456]	; (80003dc <main+0x290>)
 8000214:	709a      	strb	r2, [r3, #2]
    HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8000216:	2200      	movs	r2, #0
 8000218:	2110      	movs	r1, #16
 800021a:	486f      	ldr	r0, [pc, #444]	; (80003d8 <main+0x28c>)
 800021c:	f000 fde4 	bl	8000de8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, TX_Data_Temp, 3, 5000);
 8000220:	f241 3388 	movw	r3, #5000	; 0x1388
 8000224:	2203      	movs	r2, #3
 8000226:	496d      	ldr	r1, [pc, #436]	; (80003dc <main+0x290>)
 8000228:	486d      	ldr	r0, [pc, #436]	; (80003e0 <main+0x294>)
 800022a:	f003 f895 	bl	8003358 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 800022e:	2201      	movs	r2, #1
 8000230:	2110      	movs	r1, #16
 8000232:	4869      	ldr	r0, [pc, #420]	; (80003d8 <main+0x28c>)
 8000234:	f000 fdd8 	bl	8000de8 <HAL_GPIO_WritePin>
    User_Delay(10);
 8000238:	200a      	movs	r0, #10
 800023a:	f000 f9dd 	bl	80005f8 <User_Delay>


    for(uint8_t i = 34;i<113;i++){
 800023e:	2322      	movs	r3, #34	; 0x22
 8000240:	71fb      	strb	r3, [r7, #7]
 8000242:	e02d      	b.n	80002a0 <main+0x154>
  	  TX_Data_Temp[0] = (uint8_t)(TX_Data[i] >> 16);
 8000244:	79fb      	ldrb	r3, [r7, #7]
 8000246:	4a67      	ldr	r2, [pc, #412]	; (80003e4 <main+0x298>)
 8000248:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800024c:	0c1b      	lsrs	r3, r3, #16
 800024e:	b2da      	uxtb	r2, r3
 8000250:	4b62      	ldr	r3, [pc, #392]	; (80003dc <main+0x290>)
 8000252:	701a      	strb	r2, [r3, #0]
  	  TX_Data_Temp[1] = (uint8_t)(TX_Data[i] >> 8);
 8000254:	79fb      	ldrb	r3, [r7, #7]
 8000256:	4a63      	ldr	r2, [pc, #396]	; (80003e4 <main+0x298>)
 8000258:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800025c:	0a1b      	lsrs	r3, r3, #8
 800025e:	b2da      	uxtb	r2, r3
 8000260:	4b5e      	ldr	r3, [pc, #376]	; (80003dc <main+0x290>)
 8000262:	705a      	strb	r2, [r3, #1]
  	  TX_Data_Temp[2] = (uint8_t)(TX_Data[i]);
 8000264:	79fb      	ldrb	r3, [r7, #7]
 8000266:	4a5f      	ldr	r2, [pc, #380]	; (80003e4 <main+0x298>)
 8000268:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800026c:	b2da      	uxtb	r2, r3
 800026e:	4b5b      	ldr	r3, [pc, #364]	; (80003dc <main+0x290>)
 8000270:	709a      	strb	r2, [r3, #2]
  	  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8000272:	2200      	movs	r2, #0
 8000274:	2110      	movs	r1, #16
 8000276:	4858      	ldr	r0, [pc, #352]	; (80003d8 <main+0x28c>)
 8000278:	f000 fdb6 	bl	8000de8 <HAL_GPIO_WritePin>
  	  HAL_SPI_Transmit(&hspi1, TX_Data_Temp, 3, 5000);
 800027c:	f241 3388 	movw	r3, #5000	; 0x1388
 8000280:	2203      	movs	r2, #3
 8000282:	4956      	ldr	r1, [pc, #344]	; (80003dc <main+0x290>)
 8000284:	4856      	ldr	r0, [pc, #344]	; (80003e0 <main+0x294>)
 8000286:	f003 f867 	bl	8003358 <HAL_SPI_Transmit>
  	  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 800028a:	2201      	movs	r2, #1
 800028c:	2110      	movs	r1, #16
 800028e:	4852      	ldr	r0, [pc, #328]	; (80003d8 <main+0x28c>)
 8000290:	f000 fdaa 	bl	8000de8 <HAL_GPIO_WritePin>
  	  User_Delay(1);
 8000294:	2001      	movs	r0, #1
 8000296:	f000 f9af 	bl	80005f8 <User_Delay>
    for(uint8_t i = 34;i<113;i++){
 800029a:	79fb      	ldrb	r3, [r7, #7]
 800029c:	3301      	adds	r3, #1
 800029e:	71fb      	strb	r3, [r7, #7]
 80002a0:	79fb      	ldrb	r3, [r7, #7]
 80002a2:	2b70      	cmp	r3, #112	; 0x70
 80002a4:	d9ce      	bls.n	8000244 <main+0xf8>
    }
    User_Delay(10);
 80002a6:	200a      	movs	r0, #10
 80002a8:	f000 f9a6 	bl	80005f8 <User_Delay>

    TX_Data_Temp[2] = TX_Data_Temp[2] | (uint8_t)(1<<3); //калибровка
 80002ac:	4b4b      	ldr	r3, [pc, #300]	; (80003dc <main+0x290>)
 80002ae:	789b      	ldrb	r3, [r3, #2]
 80002b0:	f043 0308 	orr.w	r3, r3, #8
 80002b4:	b2da      	uxtb	r2, r3
 80002b6:	4b49      	ldr	r3, [pc, #292]	; (80003dc <main+0x290>)
 80002b8:	709a      	strb	r2, [r3, #2]
    HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 80002ba:	2200      	movs	r2, #0
 80002bc:	2110      	movs	r1, #16
 80002be:	4846      	ldr	r0, [pc, #280]	; (80003d8 <main+0x28c>)
 80002c0:	f000 fd92 	bl	8000de8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, TX_Data_Temp, 3, 5000);
 80002c4:	f241 3388 	movw	r3, #5000	; 0x1388
 80002c8:	2203      	movs	r2, #3
 80002ca:	4944      	ldr	r1, [pc, #272]	; (80003dc <main+0x290>)
 80002cc:	4844      	ldr	r0, [pc, #272]	; (80003e0 <main+0x294>)
 80002ce:	f003 f843 	bl	8003358 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 80002d2:	2201      	movs	r2, #1
 80002d4:	2110      	movs	r1, #16
 80002d6:	4840      	ldr	r0, [pc, #256]	; (80003d8 <main+0x28c>)
 80002d8:	f000 fd86 	bl	8000de8 <HAL_GPIO_WritePin>
	  	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
	  	HAL_SPI_Transmit(&hspi1, coutner, 3, 5000);
	  	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
	  	CDC_Transmit_FS(coutner, 3);
	  	//User_Delay(1000);*/
	  	if(RX_USB_Flag != 0){
 80002dc:	4b42      	ldr	r3, [pc, #264]	; (80003e8 <main+0x29c>)
 80002de:	781b      	ldrb	r3, [r3, #0]
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d007      	beq.n	80002f4 <main+0x1a8>
	  		//USB_RX[1]++;
	  		//CDC_Transmit_FS(USB_RX, 7);
	  		//HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
	  		//HAL_SPI_Transmit_IT(&hspi1, TX_Data, sizeof(TX_Data));
	  		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80002e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002e8:	4840      	ldr	r0, [pc, #256]	; (80003ec <main+0x2a0>)
 80002ea:	f000 fd95 	bl	8000e18 <HAL_GPIO_TogglePin>

	  		RX_USB_Flag = 0;
 80002ee:	4b3e      	ldr	r3, [pc, #248]	; (80003e8 <main+0x29c>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	701a      	strb	r2, [r3, #0]
	  	}

	  	count = (count == 0)?1:0;
 80002f4:	4b3e      	ldr	r3, [pc, #248]	; (80003f0 <main+0x2a4>)
 80002f6:	781b      	ldrb	r3, [r3, #0]
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	bf0c      	ite	eq
 80002fc:	2301      	moveq	r3, #1
 80002fe:	2300      	movne	r3, #0
 8000300:	b2db      	uxtb	r3, r3
 8000302:	461a      	mov	r2, r3
 8000304:	4b3a      	ldr	r3, [pc, #232]	; (80003f0 <main+0x2a4>)
 8000306:	701a      	strb	r2, [r3, #0]


	  	  TX_Data_Temp[0] = (uint8_t)(Core_F[count] >> 16);
 8000308:	4b39      	ldr	r3, [pc, #228]	; (80003f0 <main+0x2a4>)
 800030a:	781b      	ldrb	r3, [r3, #0]
 800030c:	461a      	mov	r2, r3
 800030e:	4b39      	ldr	r3, [pc, #228]	; (80003f4 <main+0x2a8>)
 8000310:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000314:	0c1b      	lsrs	r3, r3, #16
 8000316:	b2da      	uxtb	r2, r3
 8000318:	4b30      	ldr	r3, [pc, #192]	; (80003dc <main+0x290>)
 800031a:	701a      	strb	r2, [r3, #0]
	  	  TX_Data_Temp[1] = (uint8_t)(Core_F[count] >> 8);
 800031c:	4b34      	ldr	r3, [pc, #208]	; (80003f0 <main+0x2a4>)
 800031e:	781b      	ldrb	r3, [r3, #0]
 8000320:	461a      	mov	r2, r3
 8000322:	4b34      	ldr	r3, [pc, #208]	; (80003f4 <main+0x2a8>)
 8000324:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000328:	0a1b      	lsrs	r3, r3, #8
 800032a:	b2da      	uxtb	r2, r3
 800032c:	4b2b      	ldr	r3, [pc, #172]	; (80003dc <main+0x290>)
 800032e:	705a      	strb	r2, [r3, #1]
	  	  TX_Data_Temp[2] = (uint8_t)(Core_F[count]);
 8000330:	4b2f      	ldr	r3, [pc, #188]	; (80003f0 <main+0x2a4>)
 8000332:	781b      	ldrb	r3, [r3, #0]
 8000334:	461a      	mov	r2, r3
 8000336:	4b2f      	ldr	r3, [pc, #188]	; (80003f4 <main+0x2a8>)
 8000338:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800033c:	b2da      	uxtb	r2, r3
 800033e:	4b27      	ldr	r3, [pc, #156]	; (80003dc <main+0x290>)
 8000340:	709a      	strb	r2, [r3, #2]
	  	  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8000342:	2200      	movs	r2, #0
 8000344:	2110      	movs	r1, #16
 8000346:	4824      	ldr	r0, [pc, #144]	; (80003d8 <main+0x28c>)
 8000348:	f000 fd4e 	bl	8000de8 <HAL_GPIO_WritePin>
	  	  HAL_SPI_Transmit(&hspi1, TX_Data_Temp, 3, 5000);
 800034c:	f241 3388 	movw	r3, #5000	; 0x1388
 8000350:	2203      	movs	r2, #3
 8000352:	4922      	ldr	r1, [pc, #136]	; (80003dc <main+0x290>)
 8000354:	4822      	ldr	r0, [pc, #136]	; (80003e0 <main+0x294>)
 8000356:	f002 ffff 	bl	8003358 <HAL_SPI_Transmit>
	  	  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 800035a:	2201      	movs	r2, #1
 800035c:	2110      	movs	r1, #16
 800035e:	481e      	ldr	r0, [pc, #120]	; (80003d8 <main+0x28c>)
 8000360:	f000 fd42 	bl	8000de8 <HAL_GPIO_WritePin>
	  	  User_Delay(1);
 8000364:	2001      	movs	r0, #1
 8000366:	f000 f947 	bl	80005f8 <User_Delay>
	  	  HAL_SPI_Transmit(&hspi1, TX_Data_Temp, 3, 5000);
	  	  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
	  	  User_Delay(1);*/


	  	TX_Data_Temp[0] = (uint8_t)(TX_Data[112] >> 16);
 800036a:	4b1e      	ldr	r3, [pc, #120]	; (80003e4 <main+0x298>)
 800036c:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 8000370:	0c1b      	lsrs	r3, r3, #16
 8000372:	b2da      	uxtb	r2, r3
 8000374:	4b19      	ldr	r3, [pc, #100]	; (80003dc <main+0x290>)
 8000376:	701a      	strb	r2, [r3, #0]
	  	TX_Data_Temp[1] = (uint8_t)(TX_Data[112] >> 8);
 8000378:	4b1a      	ldr	r3, [pc, #104]	; (80003e4 <main+0x298>)
 800037a:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 800037e:	0a1b      	lsrs	r3, r3, #8
 8000380:	b2da      	uxtb	r2, r3
 8000382:	4b16      	ldr	r3, [pc, #88]	; (80003dc <main+0x290>)
 8000384:	705a      	strb	r2, [r3, #1]
	  	TX_Data_Temp[2] = (uint8_t)(TX_Data[112]);
 8000386:	4b17      	ldr	r3, [pc, #92]	; (80003e4 <main+0x298>)
 8000388:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 800038c:	b2da      	uxtb	r2, r3
 800038e:	4b13      	ldr	r3, [pc, #76]	; (80003dc <main+0x290>)
 8000390:	709a      	strb	r2, [r3, #2]
	  	  TX_Data_Temp[2] = TX_Data_Temp[2] | (uint8_t)(1<<3); //калибровка
 8000392:	4b12      	ldr	r3, [pc, #72]	; (80003dc <main+0x290>)
 8000394:	789b      	ldrb	r3, [r3, #2]
 8000396:	f043 0308 	orr.w	r3, r3, #8
 800039a:	b2da      	uxtb	r2, r3
 800039c:	4b0f      	ldr	r3, [pc, #60]	; (80003dc <main+0x290>)
 800039e:	709a      	strb	r2, [r3, #2]
	  	    HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 80003a0:	2200      	movs	r2, #0
 80003a2:	2110      	movs	r1, #16
 80003a4:	480c      	ldr	r0, [pc, #48]	; (80003d8 <main+0x28c>)
 80003a6:	f000 fd1f 	bl	8000de8 <HAL_GPIO_WritePin>
	  	    HAL_SPI_Transmit(&hspi1, TX_Data_Temp, 3, 5000);
 80003aa:	f241 3388 	movw	r3, #5000	; 0x1388
 80003ae:	2203      	movs	r2, #3
 80003b0:	490a      	ldr	r1, [pc, #40]	; (80003dc <main+0x290>)
 80003b2:	480b      	ldr	r0, [pc, #44]	; (80003e0 <main+0x294>)
 80003b4:	f002 ffd0 	bl	8003358 <HAL_SPI_Transmit>
	  	    HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 80003b8:	2201      	movs	r2, #1
 80003ba:	2110      	movs	r1, #16
 80003bc:	4806      	ldr	r0, [pc, #24]	; (80003d8 <main+0x28c>)
 80003be:	f000 fd13 	bl	8000de8 <HAL_GPIO_WritePin>


	  	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80003c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003c6:	4809      	ldr	r0, [pc, #36]	; (80003ec <main+0x2a0>)
 80003c8:	f000 fd26 	bl	8000e18 <HAL_GPIO_TogglePin>

	  	User_Delay(2000);
 80003cc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80003d0:	f000 f912 	bl	80005f8 <User_Delay>
	  	if(RX_USB_Flag != 0){
 80003d4:	e782      	b.n	80002dc <main+0x190>
 80003d6:	bf00      	nop
 80003d8:	40010800 	.word	0x40010800
 80003dc:	200001cc 	.word	0x200001cc
 80003e0:	20000368 	.word	0x20000368
 80003e4:	20000008 	.word	0x20000008
 80003e8:	200003c0 	.word	0x200003c0
 80003ec:	40011000 	.word	0x40011000
 80003f0:	200003c1 	.word	0x200003c1
 80003f4:	20000000 	.word	0x20000000

080003f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b094      	sub	sp, #80	; 0x50
 80003fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000402:	2228      	movs	r2, #40	; 0x28
 8000404:	2100      	movs	r1, #0
 8000406:	4618      	mov	r0, r3
 8000408:	f007 fcee 	bl	8007de8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800040c:	f107 0314 	add.w	r3, r7, #20
 8000410:	2200      	movs	r2, #0
 8000412:	601a      	str	r2, [r3, #0]
 8000414:	605a      	str	r2, [r3, #4]
 8000416:	609a      	str	r2, [r3, #8]
 8000418:	60da      	str	r2, [r3, #12]
 800041a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800041c:	1d3b      	adds	r3, r7, #4
 800041e:	2200      	movs	r2, #0
 8000420:	601a      	str	r2, [r3, #0]
 8000422:	605a      	str	r2, [r3, #4]
 8000424:	609a      	str	r2, [r3, #8]
 8000426:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000428:	2301      	movs	r3, #1
 800042a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800042c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000430:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000432:	2300      	movs	r3, #0
 8000434:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000436:	2301      	movs	r3, #1
 8000438:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800043a:	2302      	movs	r3, #2
 800043c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800043e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000442:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000444:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000448:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800044a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800044e:	4618      	mov	r0, r3
 8000450:	f002 fa6a 	bl	8002928 <HAL_RCC_OscConfig>
 8000454:	4603      	mov	r3, r0
 8000456:	2b00      	cmp	r3, #0
 8000458:	d001      	beq.n	800045e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800045a:	f000 f8e7 	bl	800062c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800045e:	230f      	movs	r3, #15
 8000460:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000462:	2302      	movs	r3, #2
 8000464:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000466:	2300      	movs	r3, #0
 8000468:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800046a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800046e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000470:	2300      	movs	r3, #0
 8000472:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000474:	f107 0314 	add.w	r3, r7, #20
 8000478:	2102      	movs	r1, #2
 800047a:	4618      	mov	r0, r3
 800047c:	f002 fcd6 	bl	8002e2c <HAL_RCC_ClockConfig>
 8000480:	4603      	mov	r3, r0
 8000482:	2b00      	cmp	r3, #0
 8000484:	d001      	beq.n	800048a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000486:	f000 f8d1 	bl	800062c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800048a:	2310      	movs	r3, #16
 800048c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800048e:	2300      	movs	r3, #0
 8000490:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000492:	1d3b      	adds	r3, r7, #4
 8000494:	4618      	mov	r0, r3
 8000496:	f002 fe25 	bl	80030e4 <HAL_RCCEx_PeriphCLKConfig>
 800049a:	4603      	mov	r3, r0
 800049c:	2b00      	cmp	r3, #0
 800049e:	d001      	beq.n	80004a4 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80004a0:	f000 f8c4 	bl	800062c <Error_Handler>
  }
}
 80004a4:	bf00      	nop
 80004a6:	3750      	adds	r7, #80	; 0x50
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}

080004ac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80004b0:	4b17      	ldr	r3, [pc, #92]	; (8000510 <MX_SPI1_Init+0x64>)
 80004b2:	4a18      	ldr	r2, [pc, #96]	; (8000514 <MX_SPI1_Init+0x68>)
 80004b4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80004b6:	4b16      	ldr	r3, [pc, #88]	; (8000510 <MX_SPI1_Init+0x64>)
 80004b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80004bc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80004be:	4b14      	ldr	r3, [pc, #80]	; (8000510 <MX_SPI1_Init+0x64>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80004c4:	4b12      	ldr	r3, [pc, #72]	; (8000510 <MX_SPI1_Init+0x64>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80004ca:	4b11      	ldr	r3, [pc, #68]	; (8000510 <MX_SPI1_Init+0x64>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80004d0:	4b0f      	ldr	r3, [pc, #60]	; (8000510 <MX_SPI1_Init+0x64>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80004d6:	4b0e      	ldr	r3, [pc, #56]	; (8000510 <MX_SPI1_Init+0x64>)
 80004d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80004dc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80004de:	4b0c      	ldr	r3, [pc, #48]	; (8000510 <MX_SPI1_Init+0x64>)
 80004e0:	2218      	movs	r2, #24
 80004e2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80004e4:	4b0a      	ldr	r3, [pc, #40]	; (8000510 <MX_SPI1_Init+0x64>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80004ea:	4b09      	ldr	r3, [pc, #36]	; (8000510 <MX_SPI1_Init+0x64>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80004f0:	4b07      	ldr	r3, [pc, #28]	; (8000510 <MX_SPI1_Init+0x64>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80004f6:	4b06      	ldr	r3, [pc, #24]	; (8000510 <MX_SPI1_Init+0x64>)
 80004f8:	220a      	movs	r2, #10
 80004fa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80004fc:	4804      	ldr	r0, [pc, #16]	; (8000510 <MX_SPI1_Init+0x64>)
 80004fe:	f002 fea7 	bl	8003250 <HAL_SPI_Init>
 8000502:	4603      	mov	r3, r0
 8000504:	2b00      	cmp	r3, #0
 8000506:	d001      	beq.n	800050c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000508:	f000 f890 	bl	800062c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800050c:	bf00      	nop
 800050e:	bd80      	pop	{r7, pc}
 8000510:	20000368 	.word	0x20000368
 8000514:	40013000 	.word	0x40013000

08000518 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b088      	sub	sp, #32
 800051c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800051e:	f107 0310 	add.w	r3, r7, #16
 8000522:	2200      	movs	r2, #0
 8000524:	601a      	str	r2, [r3, #0]
 8000526:	605a      	str	r2, [r3, #4]
 8000528:	609a      	str	r2, [r3, #8]
 800052a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800052c:	4b2f      	ldr	r3, [pc, #188]	; (80005ec <MX_GPIO_Init+0xd4>)
 800052e:	699b      	ldr	r3, [r3, #24]
 8000530:	4a2e      	ldr	r2, [pc, #184]	; (80005ec <MX_GPIO_Init+0xd4>)
 8000532:	f043 0310 	orr.w	r3, r3, #16
 8000536:	6193      	str	r3, [r2, #24]
 8000538:	4b2c      	ldr	r3, [pc, #176]	; (80005ec <MX_GPIO_Init+0xd4>)
 800053a:	699b      	ldr	r3, [r3, #24]
 800053c:	f003 0310 	and.w	r3, r3, #16
 8000540:	60fb      	str	r3, [r7, #12]
 8000542:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000544:	4b29      	ldr	r3, [pc, #164]	; (80005ec <MX_GPIO_Init+0xd4>)
 8000546:	699b      	ldr	r3, [r3, #24]
 8000548:	4a28      	ldr	r2, [pc, #160]	; (80005ec <MX_GPIO_Init+0xd4>)
 800054a:	f043 0320 	orr.w	r3, r3, #32
 800054e:	6193      	str	r3, [r2, #24]
 8000550:	4b26      	ldr	r3, [pc, #152]	; (80005ec <MX_GPIO_Init+0xd4>)
 8000552:	699b      	ldr	r3, [r3, #24]
 8000554:	f003 0320 	and.w	r3, r3, #32
 8000558:	60bb      	str	r3, [r7, #8]
 800055a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800055c:	4b23      	ldr	r3, [pc, #140]	; (80005ec <MX_GPIO_Init+0xd4>)
 800055e:	699b      	ldr	r3, [r3, #24]
 8000560:	4a22      	ldr	r2, [pc, #136]	; (80005ec <MX_GPIO_Init+0xd4>)
 8000562:	f043 0304 	orr.w	r3, r3, #4
 8000566:	6193      	str	r3, [r2, #24]
 8000568:	4b20      	ldr	r3, [pc, #128]	; (80005ec <MX_GPIO_Init+0xd4>)
 800056a:	699b      	ldr	r3, [r3, #24]
 800056c:	f003 0304 	and.w	r3, r3, #4
 8000570:	607b      	str	r3, [r7, #4]
 8000572:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000574:	2200      	movs	r2, #0
 8000576:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800057a:	481d      	ldr	r0, [pc, #116]	; (80005f0 <MX_GPIO_Init+0xd8>)
 800057c:	f000 fc34 	bl	8000de8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI_CS_Pin|RST_Pin, GPIO_PIN_RESET);
 8000580:	2200      	movs	r2, #0
 8000582:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000586:	481b      	ldr	r0, [pc, #108]	; (80005f4 <MX_GPIO_Init+0xdc>)
 8000588:	f000 fc2e 	bl	8000de8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800058c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000590:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000592:	2301      	movs	r3, #1
 8000594:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000596:	2300      	movs	r3, #0
 8000598:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800059a:	2302      	movs	r3, #2
 800059c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800059e:	f107 0310 	add.w	r3, r7, #16
 80005a2:	4619      	mov	r1, r3
 80005a4:	4812      	ldr	r0, [pc, #72]	; (80005f0 <MX_GPIO_Init+0xd8>)
 80005a6:	f000 fa9b 	bl	8000ae0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 80005aa:	2310      	movs	r3, #16
 80005ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ae:	2301      	movs	r3, #1
 80005b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b2:	2300      	movs	r3, #0
 80005b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80005b6:	2301      	movs	r3, #1
 80005b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 80005ba:	f107 0310 	add.w	r3, r7, #16
 80005be:	4619      	mov	r1, r3
 80005c0:	480c      	ldr	r0, [pc, #48]	; (80005f4 <MX_GPIO_Init+0xdc>)
 80005c2:	f000 fa8d 	bl	8000ae0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RST_Pin */
  GPIO_InitStruct.Pin = RST_Pin;
 80005c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80005cc:	2311      	movs	r3, #17
 80005ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d0:	2300      	movs	r3, #0
 80005d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d4:	2302      	movs	r3, #2
 80005d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 80005d8:	f107 0310 	add.w	r3, r7, #16
 80005dc:	4619      	mov	r1, r3
 80005de:	4805      	ldr	r0, [pc, #20]	; (80005f4 <MX_GPIO_Init+0xdc>)
 80005e0:	f000 fa7e 	bl	8000ae0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005e4:	bf00      	nop
 80005e6:	3720      	adds	r7, #32
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	40021000 	.word	0x40021000
 80005f0:	40011000 	.word	0x40011000
 80005f4:	40010800 	.word	0x40010800

080005f8 <User_Delay>:

/* USER CODE BEGIN 4 */
void User_Delay(uint16_t timeout){
 80005f8:	b480      	push	{r7}
 80005fa:	b085      	sub	sp, #20
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	4603      	mov	r3, r0
 8000600:	80fb      	strh	r3, [r7, #6]
	for(uint32_t t = 0;t<=timeout*3600;t++);
 8000602:	2300      	movs	r3, #0
 8000604:	60fb      	str	r3, [r7, #12]
 8000606:	e002      	b.n	800060e <User_Delay+0x16>
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	3301      	adds	r3, #1
 800060c:	60fb      	str	r3, [r7, #12]
 800060e:	88fb      	ldrh	r3, [r7, #6]
 8000610:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8000614:	fb02 f303 	mul.w	r3, r2, r3
 8000618:	461a      	mov	r2, r3
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	4293      	cmp	r3, r2
 800061e:	d9f3      	bls.n	8000608 <User_Delay+0x10>
}
 8000620:	bf00      	nop
 8000622:	bf00      	nop
 8000624:	3714      	adds	r7, #20
 8000626:	46bd      	mov	sp, r7
 8000628:	bc80      	pop	{r7}
 800062a:	4770      	bx	lr

0800062c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000630:	b672      	cpsid	i
}
 8000632:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000634:	e7fe      	b.n	8000634 <Error_Handler+0x8>
	...

08000638 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000638:	b480      	push	{r7}
 800063a:	b085      	sub	sp, #20
 800063c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800063e:	4b15      	ldr	r3, [pc, #84]	; (8000694 <HAL_MspInit+0x5c>)
 8000640:	699b      	ldr	r3, [r3, #24]
 8000642:	4a14      	ldr	r2, [pc, #80]	; (8000694 <HAL_MspInit+0x5c>)
 8000644:	f043 0301 	orr.w	r3, r3, #1
 8000648:	6193      	str	r3, [r2, #24]
 800064a:	4b12      	ldr	r3, [pc, #72]	; (8000694 <HAL_MspInit+0x5c>)
 800064c:	699b      	ldr	r3, [r3, #24]
 800064e:	f003 0301 	and.w	r3, r3, #1
 8000652:	60bb      	str	r3, [r7, #8]
 8000654:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000656:	4b0f      	ldr	r3, [pc, #60]	; (8000694 <HAL_MspInit+0x5c>)
 8000658:	69db      	ldr	r3, [r3, #28]
 800065a:	4a0e      	ldr	r2, [pc, #56]	; (8000694 <HAL_MspInit+0x5c>)
 800065c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000660:	61d3      	str	r3, [r2, #28]
 8000662:	4b0c      	ldr	r3, [pc, #48]	; (8000694 <HAL_MspInit+0x5c>)
 8000664:	69db      	ldr	r3, [r3, #28]
 8000666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800066e:	4b0a      	ldr	r3, [pc, #40]	; (8000698 <HAL_MspInit+0x60>)
 8000670:	685b      	ldr	r3, [r3, #4]
 8000672:	60fb      	str	r3, [r7, #12]
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800067a:	60fb      	str	r3, [r7, #12]
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000682:	60fb      	str	r3, [r7, #12]
 8000684:	4a04      	ldr	r2, [pc, #16]	; (8000698 <HAL_MspInit+0x60>)
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800068a:	bf00      	nop
 800068c:	3714      	adds	r7, #20
 800068e:	46bd      	mov	sp, r7
 8000690:	bc80      	pop	{r7}
 8000692:	4770      	bx	lr
 8000694:	40021000 	.word	0x40021000
 8000698:	40010000 	.word	0x40010000

0800069c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b088      	sub	sp, #32
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a4:	f107 0310 	add.w	r3, r7, #16
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	609a      	str	r2, [r3, #8]
 80006b0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	4a1b      	ldr	r2, [pc, #108]	; (8000724 <HAL_SPI_MspInit+0x88>)
 80006b8:	4293      	cmp	r3, r2
 80006ba:	d12f      	bne.n	800071c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80006bc:	4b1a      	ldr	r3, [pc, #104]	; (8000728 <HAL_SPI_MspInit+0x8c>)
 80006be:	699b      	ldr	r3, [r3, #24]
 80006c0:	4a19      	ldr	r2, [pc, #100]	; (8000728 <HAL_SPI_MspInit+0x8c>)
 80006c2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80006c6:	6193      	str	r3, [r2, #24]
 80006c8:	4b17      	ldr	r3, [pc, #92]	; (8000728 <HAL_SPI_MspInit+0x8c>)
 80006ca:	699b      	ldr	r3, [r3, #24]
 80006cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80006d0:	60fb      	str	r3, [r7, #12]
 80006d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d4:	4b14      	ldr	r3, [pc, #80]	; (8000728 <HAL_SPI_MspInit+0x8c>)
 80006d6:	699b      	ldr	r3, [r3, #24]
 80006d8:	4a13      	ldr	r2, [pc, #76]	; (8000728 <HAL_SPI_MspInit+0x8c>)
 80006da:	f043 0304 	orr.w	r3, r3, #4
 80006de:	6193      	str	r3, [r2, #24]
 80006e0:	4b11      	ldr	r3, [pc, #68]	; (8000728 <HAL_SPI_MspInit+0x8c>)
 80006e2:	699b      	ldr	r3, [r3, #24]
 80006e4:	f003 0304 	and.w	r3, r3, #4
 80006e8:	60bb      	str	r3, [r7, #8]
 80006ea:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80006ec:	23a0      	movs	r3, #160	; 0xa0
 80006ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006f0:	2302      	movs	r3, #2
 80006f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006f4:	2303      	movs	r3, #3
 80006f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f8:	f107 0310 	add.w	r3, r7, #16
 80006fc:	4619      	mov	r1, r3
 80006fe:	480b      	ldr	r0, [pc, #44]	; (800072c <HAL_SPI_MspInit+0x90>)
 8000700:	f000 f9ee 	bl	8000ae0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000704:	2340      	movs	r3, #64	; 0x40
 8000706:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000708:	2300      	movs	r3, #0
 800070a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070c:	2300      	movs	r3, #0
 800070e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000710:	f107 0310 	add.w	r3, r7, #16
 8000714:	4619      	mov	r1, r3
 8000716:	4805      	ldr	r0, [pc, #20]	; (800072c <HAL_SPI_MspInit+0x90>)
 8000718:	f000 f9e2 	bl	8000ae0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800071c:	bf00      	nop
 800071e:	3720      	adds	r7, #32
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	40013000 	.word	0x40013000
 8000728:	40021000 	.word	0x40021000
 800072c:	40010800 	.word	0x40010800

08000730 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000734:	e7fe      	b.n	8000734 <NMI_Handler+0x4>

08000736 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000736:	b480      	push	{r7}
 8000738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800073a:	e7fe      	b.n	800073a <HardFault_Handler+0x4>

0800073c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000740:	e7fe      	b.n	8000740 <MemManage_Handler+0x4>

08000742 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000742:	b480      	push	{r7}
 8000744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000746:	e7fe      	b.n	8000746 <BusFault_Handler+0x4>

08000748 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800074c:	e7fe      	b.n	800074c <UsageFault_Handler+0x4>

0800074e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800074e:	b480      	push	{r7}
 8000750:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000752:	bf00      	nop
 8000754:	46bd      	mov	sp, r7
 8000756:	bc80      	pop	{r7}
 8000758:	4770      	bx	lr

0800075a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800075a:	b480      	push	{r7}
 800075c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800075e:	bf00      	nop
 8000760:	46bd      	mov	sp, r7
 8000762:	bc80      	pop	{r7}
 8000764:	4770      	bx	lr

08000766 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000766:	b480      	push	{r7}
 8000768:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800076a:	bf00      	nop
 800076c:	46bd      	mov	sp, r7
 800076e:	bc80      	pop	{r7}
 8000770:	4770      	bx	lr

08000772 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000772:	b580      	push	{r7, lr}
 8000774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000776:	f000 f889 	bl	800088c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
	...

08000780 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000784:	4802      	ldr	r0, [pc, #8]	; (8000790 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8000786:	f000 fc85 	bl	8001094 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	20001090 	.word	0x20001090

08000794 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000798:	4802      	ldr	r0, [pc, #8]	; (80007a4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800079a:	f000 fc7b 	bl	8001094 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800079e:	bf00      	nop
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	20001090 	.word	0x20001090

080007a8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007ac:	bf00      	nop
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bc80      	pop	{r7}
 80007b2:	4770      	bx	lr

080007b4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007b4:	f7ff fff8 	bl	80007a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007b8:	480b      	ldr	r0, [pc, #44]	; (80007e8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80007ba:	490c      	ldr	r1, [pc, #48]	; (80007ec <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80007bc:	4a0c      	ldr	r2, [pc, #48]	; (80007f0 <LoopFillZerobss+0x16>)
  movs r3, #0
 80007be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007c0:	e002      	b.n	80007c8 <LoopCopyDataInit>

080007c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007c6:	3304      	adds	r3, #4

080007c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007cc:	d3f9      	bcc.n	80007c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007ce:	4a09      	ldr	r2, [pc, #36]	; (80007f4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80007d0:	4c09      	ldr	r4, [pc, #36]	; (80007f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80007d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007d4:	e001      	b.n	80007da <LoopFillZerobss>

080007d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007d8:	3204      	adds	r2, #4

080007da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007dc:	d3fb      	bcc.n	80007d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007de:	f007 fb0b 	bl	8007df8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007e2:	f7ff fcb3 	bl	800014c <main>
  bx lr
 80007e6:	4770      	bx	lr
  ldr r0, =_sdata
 80007e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007ec:	2000034c 	.word	0x2000034c
  ldr r2, =_sidata
 80007f0:	08007ecc 	.word	0x08007ecc
  ldr r2, =_sbss
 80007f4:	2000034c 	.word	0x2000034c
  ldr r4, =_ebss
 80007f8:	200015a0 	.word	0x200015a0

080007fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007fc:	e7fe      	b.n	80007fc <ADC1_2_IRQHandler>
	...

08000800 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000804:	4b08      	ldr	r3, [pc, #32]	; (8000828 <HAL_Init+0x28>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a07      	ldr	r2, [pc, #28]	; (8000828 <HAL_Init+0x28>)
 800080a:	f043 0310 	orr.w	r3, r3, #16
 800080e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000810:	2003      	movs	r0, #3
 8000812:	f000 f923 	bl	8000a5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000816:	200f      	movs	r0, #15
 8000818:	f000 f808 	bl	800082c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800081c:	f7ff ff0c 	bl	8000638 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000820:	2300      	movs	r3, #0
}
 8000822:	4618      	mov	r0, r3
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40022000 	.word	0x40022000

0800082c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000834:	4b12      	ldr	r3, [pc, #72]	; (8000880 <HAL_InitTick+0x54>)
 8000836:	681a      	ldr	r2, [r3, #0]
 8000838:	4b12      	ldr	r3, [pc, #72]	; (8000884 <HAL_InitTick+0x58>)
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	4619      	mov	r1, r3
 800083e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000842:	fbb3 f3f1 	udiv	r3, r3, r1
 8000846:	fbb2 f3f3 	udiv	r3, r2, r3
 800084a:	4618      	mov	r0, r3
 800084c:	f000 f93b 	bl	8000ac6 <HAL_SYSTICK_Config>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000856:	2301      	movs	r3, #1
 8000858:	e00e      	b.n	8000878 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	2b0f      	cmp	r3, #15
 800085e:	d80a      	bhi.n	8000876 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000860:	2200      	movs	r2, #0
 8000862:	6879      	ldr	r1, [r7, #4]
 8000864:	f04f 30ff 	mov.w	r0, #4294967295
 8000868:	f000 f903 	bl	8000a72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800086c:	4a06      	ldr	r2, [pc, #24]	; (8000888 <HAL_InitTick+0x5c>)
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000872:	2300      	movs	r3, #0
 8000874:	e000      	b.n	8000878 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000876:	2301      	movs	r3, #1
}
 8000878:	4618      	mov	r0, r3
 800087a:	3708      	adds	r7, #8
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	200001d0 	.word	0x200001d0
 8000884:	200001d8 	.word	0x200001d8
 8000888:	200001d4 	.word	0x200001d4

0800088c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000890:	4b05      	ldr	r3, [pc, #20]	; (80008a8 <HAL_IncTick+0x1c>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	461a      	mov	r2, r3
 8000896:	4b05      	ldr	r3, [pc, #20]	; (80008ac <HAL_IncTick+0x20>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	4413      	add	r3, r2
 800089c:	4a03      	ldr	r2, [pc, #12]	; (80008ac <HAL_IncTick+0x20>)
 800089e:	6013      	str	r3, [r2, #0]
}
 80008a0:	bf00      	nop
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bc80      	pop	{r7}
 80008a6:	4770      	bx	lr
 80008a8:	200001d8 	.word	0x200001d8
 80008ac:	200003c4 	.word	0x200003c4

080008b0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  return uwTick;
 80008b4:	4b02      	ldr	r3, [pc, #8]	; (80008c0 <HAL_GetTick+0x10>)
 80008b6:	681b      	ldr	r3, [r3, #0]
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bc80      	pop	{r7}
 80008be:	4770      	bx	lr
 80008c0:	200003c4 	.word	0x200003c4

080008c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b085      	sub	sp, #20
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	f003 0307 	and.w	r3, r3, #7
 80008d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008d4:	4b0c      	ldr	r3, [pc, #48]	; (8000908 <__NVIC_SetPriorityGrouping+0x44>)
 80008d6:	68db      	ldr	r3, [r3, #12]
 80008d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008da:	68ba      	ldr	r2, [r7, #8]
 80008dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008e0:	4013      	ands	r3, r2
 80008e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008e8:	68bb      	ldr	r3, [r7, #8]
 80008ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008f6:	4a04      	ldr	r2, [pc, #16]	; (8000908 <__NVIC_SetPriorityGrouping+0x44>)
 80008f8:	68bb      	ldr	r3, [r7, #8]
 80008fa:	60d3      	str	r3, [r2, #12]
}
 80008fc:	bf00      	nop
 80008fe:	3714      	adds	r7, #20
 8000900:	46bd      	mov	sp, r7
 8000902:	bc80      	pop	{r7}
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop
 8000908:	e000ed00 	.word	0xe000ed00

0800090c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000910:	4b04      	ldr	r3, [pc, #16]	; (8000924 <__NVIC_GetPriorityGrouping+0x18>)
 8000912:	68db      	ldr	r3, [r3, #12]
 8000914:	0a1b      	lsrs	r3, r3, #8
 8000916:	f003 0307 	and.w	r3, r3, #7
}
 800091a:	4618      	mov	r0, r3
 800091c:	46bd      	mov	sp, r7
 800091e:	bc80      	pop	{r7}
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	e000ed00 	.word	0xe000ed00

08000928 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
 800092e:	4603      	mov	r3, r0
 8000930:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000936:	2b00      	cmp	r3, #0
 8000938:	db0b      	blt.n	8000952 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800093a:	79fb      	ldrb	r3, [r7, #7]
 800093c:	f003 021f 	and.w	r2, r3, #31
 8000940:	4906      	ldr	r1, [pc, #24]	; (800095c <__NVIC_EnableIRQ+0x34>)
 8000942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000946:	095b      	lsrs	r3, r3, #5
 8000948:	2001      	movs	r0, #1
 800094a:	fa00 f202 	lsl.w	r2, r0, r2
 800094e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000952:	bf00      	nop
 8000954:	370c      	adds	r7, #12
 8000956:	46bd      	mov	sp, r7
 8000958:	bc80      	pop	{r7}
 800095a:	4770      	bx	lr
 800095c:	e000e100 	.word	0xe000e100

08000960 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
 8000966:	4603      	mov	r3, r0
 8000968:	6039      	str	r1, [r7, #0]
 800096a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800096c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000970:	2b00      	cmp	r3, #0
 8000972:	db0a      	blt.n	800098a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	b2da      	uxtb	r2, r3
 8000978:	490c      	ldr	r1, [pc, #48]	; (80009ac <__NVIC_SetPriority+0x4c>)
 800097a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800097e:	0112      	lsls	r2, r2, #4
 8000980:	b2d2      	uxtb	r2, r2
 8000982:	440b      	add	r3, r1
 8000984:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000988:	e00a      	b.n	80009a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	b2da      	uxtb	r2, r3
 800098e:	4908      	ldr	r1, [pc, #32]	; (80009b0 <__NVIC_SetPriority+0x50>)
 8000990:	79fb      	ldrb	r3, [r7, #7]
 8000992:	f003 030f 	and.w	r3, r3, #15
 8000996:	3b04      	subs	r3, #4
 8000998:	0112      	lsls	r2, r2, #4
 800099a:	b2d2      	uxtb	r2, r2
 800099c:	440b      	add	r3, r1
 800099e:	761a      	strb	r2, [r3, #24]
}
 80009a0:	bf00      	nop
 80009a2:	370c      	adds	r7, #12
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bc80      	pop	{r7}
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	e000e100 	.word	0xe000e100
 80009b0:	e000ed00 	.word	0xe000ed00

080009b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b089      	sub	sp, #36	; 0x24
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	60f8      	str	r0, [r7, #12]
 80009bc:	60b9      	str	r1, [r7, #8]
 80009be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	f003 0307 	and.w	r3, r3, #7
 80009c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009c8:	69fb      	ldr	r3, [r7, #28]
 80009ca:	f1c3 0307 	rsb	r3, r3, #7
 80009ce:	2b04      	cmp	r3, #4
 80009d0:	bf28      	it	cs
 80009d2:	2304      	movcs	r3, #4
 80009d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009d6:	69fb      	ldr	r3, [r7, #28]
 80009d8:	3304      	adds	r3, #4
 80009da:	2b06      	cmp	r3, #6
 80009dc:	d902      	bls.n	80009e4 <NVIC_EncodePriority+0x30>
 80009de:	69fb      	ldr	r3, [r7, #28]
 80009e0:	3b03      	subs	r3, #3
 80009e2:	e000      	b.n	80009e6 <NVIC_EncodePriority+0x32>
 80009e4:	2300      	movs	r3, #0
 80009e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009e8:	f04f 32ff 	mov.w	r2, #4294967295
 80009ec:	69bb      	ldr	r3, [r7, #24]
 80009ee:	fa02 f303 	lsl.w	r3, r2, r3
 80009f2:	43da      	mvns	r2, r3
 80009f4:	68bb      	ldr	r3, [r7, #8]
 80009f6:	401a      	ands	r2, r3
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009fc:	f04f 31ff 	mov.w	r1, #4294967295
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	fa01 f303 	lsl.w	r3, r1, r3
 8000a06:	43d9      	mvns	r1, r3
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a0c:	4313      	orrs	r3, r2
         );
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	3724      	adds	r7, #36	; 0x24
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bc80      	pop	{r7}
 8000a16:	4770      	bx	lr

08000a18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	3b01      	subs	r3, #1
 8000a24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a28:	d301      	bcc.n	8000a2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	e00f      	b.n	8000a4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a2e:	4a0a      	ldr	r2, [pc, #40]	; (8000a58 <SysTick_Config+0x40>)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	3b01      	subs	r3, #1
 8000a34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a36:	210f      	movs	r1, #15
 8000a38:	f04f 30ff 	mov.w	r0, #4294967295
 8000a3c:	f7ff ff90 	bl	8000960 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a40:	4b05      	ldr	r3, [pc, #20]	; (8000a58 <SysTick_Config+0x40>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a46:	4b04      	ldr	r3, [pc, #16]	; (8000a58 <SysTick_Config+0x40>)
 8000a48:	2207      	movs	r2, #7
 8000a4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a4c:	2300      	movs	r3, #0
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	e000e010 	.word	0xe000e010

08000a5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a64:	6878      	ldr	r0, [r7, #4]
 8000a66:	f7ff ff2d 	bl	80008c4 <__NVIC_SetPriorityGrouping>
}
 8000a6a:	bf00      	nop
 8000a6c:	3708      	adds	r7, #8
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}

08000a72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a72:	b580      	push	{r7, lr}
 8000a74:	b086      	sub	sp, #24
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	4603      	mov	r3, r0
 8000a7a:	60b9      	str	r1, [r7, #8]
 8000a7c:	607a      	str	r2, [r7, #4]
 8000a7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a80:	2300      	movs	r3, #0
 8000a82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a84:	f7ff ff42 	bl	800090c <__NVIC_GetPriorityGrouping>
 8000a88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a8a:	687a      	ldr	r2, [r7, #4]
 8000a8c:	68b9      	ldr	r1, [r7, #8]
 8000a8e:	6978      	ldr	r0, [r7, #20]
 8000a90:	f7ff ff90 	bl	80009b4 <NVIC_EncodePriority>
 8000a94:	4602      	mov	r2, r0
 8000a96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a9a:	4611      	mov	r1, r2
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f7ff ff5f 	bl	8000960 <__NVIC_SetPriority>
}
 8000aa2:	bf00      	nop
 8000aa4:	3718      	adds	r7, #24
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}

08000aaa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aaa:	b580      	push	{r7, lr}
 8000aac:	b082      	sub	sp, #8
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ab4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f7ff ff35 	bl	8000928 <__NVIC_EnableIRQ>
}
 8000abe:	bf00      	nop
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}

08000ac6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	b082      	sub	sp, #8
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ace:	6878      	ldr	r0, [r7, #4]
 8000ad0:	f7ff ffa2 	bl	8000a18 <SysTick_Config>
 8000ad4:	4603      	mov	r3, r0
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
	...

08000ae0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b08b      	sub	sp, #44	; 0x2c
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
 8000ae8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000aea:	2300      	movs	r3, #0
 8000aec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000aee:	2300      	movs	r3, #0
 8000af0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000af2:	e169      	b.n	8000dc8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000af4:	2201      	movs	r2, #1
 8000af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000af8:	fa02 f303 	lsl.w	r3, r2, r3
 8000afc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	69fa      	ldr	r2, [r7, #28]
 8000b04:	4013      	ands	r3, r2
 8000b06:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b08:	69ba      	ldr	r2, [r7, #24]
 8000b0a:	69fb      	ldr	r3, [r7, #28]
 8000b0c:	429a      	cmp	r2, r3
 8000b0e:	f040 8158 	bne.w	8000dc2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	685b      	ldr	r3, [r3, #4]
 8000b16:	4a9a      	ldr	r2, [pc, #616]	; (8000d80 <HAL_GPIO_Init+0x2a0>)
 8000b18:	4293      	cmp	r3, r2
 8000b1a:	d05e      	beq.n	8000bda <HAL_GPIO_Init+0xfa>
 8000b1c:	4a98      	ldr	r2, [pc, #608]	; (8000d80 <HAL_GPIO_Init+0x2a0>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d875      	bhi.n	8000c0e <HAL_GPIO_Init+0x12e>
 8000b22:	4a98      	ldr	r2, [pc, #608]	; (8000d84 <HAL_GPIO_Init+0x2a4>)
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d058      	beq.n	8000bda <HAL_GPIO_Init+0xfa>
 8000b28:	4a96      	ldr	r2, [pc, #600]	; (8000d84 <HAL_GPIO_Init+0x2a4>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d86f      	bhi.n	8000c0e <HAL_GPIO_Init+0x12e>
 8000b2e:	4a96      	ldr	r2, [pc, #600]	; (8000d88 <HAL_GPIO_Init+0x2a8>)
 8000b30:	4293      	cmp	r3, r2
 8000b32:	d052      	beq.n	8000bda <HAL_GPIO_Init+0xfa>
 8000b34:	4a94      	ldr	r2, [pc, #592]	; (8000d88 <HAL_GPIO_Init+0x2a8>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d869      	bhi.n	8000c0e <HAL_GPIO_Init+0x12e>
 8000b3a:	4a94      	ldr	r2, [pc, #592]	; (8000d8c <HAL_GPIO_Init+0x2ac>)
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	d04c      	beq.n	8000bda <HAL_GPIO_Init+0xfa>
 8000b40:	4a92      	ldr	r2, [pc, #584]	; (8000d8c <HAL_GPIO_Init+0x2ac>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d863      	bhi.n	8000c0e <HAL_GPIO_Init+0x12e>
 8000b46:	4a92      	ldr	r2, [pc, #584]	; (8000d90 <HAL_GPIO_Init+0x2b0>)
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d046      	beq.n	8000bda <HAL_GPIO_Init+0xfa>
 8000b4c:	4a90      	ldr	r2, [pc, #576]	; (8000d90 <HAL_GPIO_Init+0x2b0>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d85d      	bhi.n	8000c0e <HAL_GPIO_Init+0x12e>
 8000b52:	2b12      	cmp	r3, #18
 8000b54:	d82a      	bhi.n	8000bac <HAL_GPIO_Init+0xcc>
 8000b56:	2b12      	cmp	r3, #18
 8000b58:	d859      	bhi.n	8000c0e <HAL_GPIO_Init+0x12e>
 8000b5a:	a201      	add	r2, pc, #4	; (adr r2, 8000b60 <HAL_GPIO_Init+0x80>)
 8000b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b60:	08000bdb 	.word	0x08000bdb
 8000b64:	08000bb5 	.word	0x08000bb5
 8000b68:	08000bc7 	.word	0x08000bc7
 8000b6c:	08000c09 	.word	0x08000c09
 8000b70:	08000c0f 	.word	0x08000c0f
 8000b74:	08000c0f 	.word	0x08000c0f
 8000b78:	08000c0f 	.word	0x08000c0f
 8000b7c:	08000c0f 	.word	0x08000c0f
 8000b80:	08000c0f 	.word	0x08000c0f
 8000b84:	08000c0f 	.word	0x08000c0f
 8000b88:	08000c0f 	.word	0x08000c0f
 8000b8c:	08000c0f 	.word	0x08000c0f
 8000b90:	08000c0f 	.word	0x08000c0f
 8000b94:	08000c0f 	.word	0x08000c0f
 8000b98:	08000c0f 	.word	0x08000c0f
 8000b9c:	08000c0f 	.word	0x08000c0f
 8000ba0:	08000c0f 	.word	0x08000c0f
 8000ba4:	08000bbd 	.word	0x08000bbd
 8000ba8:	08000bd1 	.word	0x08000bd1
 8000bac:	4a79      	ldr	r2, [pc, #484]	; (8000d94 <HAL_GPIO_Init+0x2b4>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d013      	beq.n	8000bda <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000bb2:	e02c      	b.n	8000c0e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	68db      	ldr	r3, [r3, #12]
 8000bb8:	623b      	str	r3, [r7, #32]
          break;
 8000bba:	e029      	b.n	8000c10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	68db      	ldr	r3, [r3, #12]
 8000bc0:	3304      	adds	r3, #4
 8000bc2:	623b      	str	r3, [r7, #32]
          break;
 8000bc4:	e024      	b.n	8000c10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	68db      	ldr	r3, [r3, #12]
 8000bca:	3308      	adds	r3, #8
 8000bcc:	623b      	str	r3, [r7, #32]
          break;
 8000bce:	e01f      	b.n	8000c10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	68db      	ldr	r3, [r3, #12]
 8000bd4:	330c      	adds	r3, #12
 8000bd6:	623b      	str	r3, [r7, #32]
          break;
 8000bd8:	e01a      	b.n	8000c10 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	689b      	ldr	r3, [r3, #8]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d102      	bne.n	8000be8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000be2:	2304      	movs	r3, #4
 8000be4:	623b      	str	r3, [r7, #32]
          break;
 8000be6:	e013      	b.n	8000c10 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	689b      	ldr	r3, [r3, #8]
 8000bec:	2b01      	cmp	r3, #1
 8000bee:	d105      	bne.n	8000bfc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000bf0:	2308      	movs	r3, #8
 8000bf2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	69fa      	ldr	r2, [r7, #28]
 8000bf8:	611a      	str	r2, [r3, #16]
          break;
 8000bfa:	e009      	b.n	8000c10 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000bfc:	2308      	movs	r3, #8
 8000bfe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	69fa      	ldr	r2, [r7, #28]
 8000c04:	615a      	str	r2, [r3, #20]
          break;
 8000c06:	e003      	b.n	8000c10 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	623b      	str	r3, [r7, #32]
          break;
 8000c0c:	e000      	b.n	8000c10 <HAL_GPIO_Init+0x130>
          break;
 8000c0e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c10:	69bb      	ldr	r3, [r7, #24]
 8000c12:	2bff      	cmp	r3, #255	; 0xff
 8000c14:	d801      	bhi.n	8000c1a <HAL_GPIO_Init+0x13a>
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	e001      	b.n	8000c1e <HAL_GPIO_Init+0x13e>
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	3304      	adds	r3, #4
 8000c1e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c20:	69bb      	ldr	r3, [r7, #24]
 8000c22:	2bff      	cmp	r3, #255	; 0xff
 8000c24:	d802      	bhi.n	8000c2c <HAL_GPIO_Init+0x14c>
 8000c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c28:	009b      	lsls	r3, r3, #2
 8000c2a:	e002      	b.n	8000c32 <HAL_GPIO_Init+0x152>
 8000c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c2e:	3b08      	subs	r3, #8
 8000c30:	009b      	lsls	r3, r3, #2
 8000c32:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	681a      	ldr	r2, [r3, #0]
 8000c38:	210f      	movs	r1, #15
 8000c3a:	693b      	ldr	r3, [r7, #16]
 8000c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c40:	43db      	mvns	r3, r3
 8000c42:	401a      	ands	r2, r3
 8000c44:	6a39      	ldr	r1, [r7, #32]
 8000c46:	693b      	ldr	r3, [r7, #16]
 8000c48:	fa01 f303 	lsl.w	r3, r1, r3
 8000c4c:	431a      	orrs	r2, r3
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	f000 80b1 	beq.w	8000dc2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c60:	4b4d      	ldr	r3, [pc, #308]	; (8000d98 <HAL_GPIO_Init+0x2b8>)
 8000c62:	699b      	ldr	r3, [r3, #24]
 8000c64:	4a4c      	ldr	r2, [pc, #304]	; (8000d98 <HAL_GPIO_Init+0x2b8>)
 8000c66:	f043 0301 	orr.w	r3, r3, #1
 8000c6a:	6193      	str	r3, [r2, #24]
 8000c6c:	4b4a      	ldr	r3, [pc, #296]	; (8000d98 <HAL_GPIO_Init+0x2b8>)
 8000c6e:	699b      	ldr	r3, [r3, #24]
 8000c70:	f003 0301 	and.w	r3, r3, #1
 8000c74:	60bb      	str	r3, [r7, #8]
 8000c76:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c78:	4a48      	ldr	r2, [pc, #288]	; (8000d9c <HAL_GPIO_Init+0x2bc>)
 8000c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c7c:	089b      	lsrs	r3, r3, #2
 8000c7e:	3302      	adds	r3, #2
 8000c80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c84:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c88:	f003 0303 	and.w	r3, r3, #3
 8000c8c:	009b      	lsls	r3, r3, #2
 8000c8e:	220f      	movs	r2, #15
 8000c90:	fa02 f303 	lsl.w	r3, r2, r3
 8000c94:	43db      	mvns	r3, r3
 8000c96:	68fa      	ldr	r2, [r7, #12]
 8000c98:	4013      	ands	r3, r2
 8000c9a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	4a40      	ldr	r2, [pc, #256]	; (8000da0 <HAL_GPIO_Init+0x2c0>)
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	d013      	beq.n	8000ccc <HAL_GPIO_Init+0x1ec>
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	4a3f      	ldr	r2, [pc, #252]	; (8000da4 <HAL_GPIO_Init+0x2c4>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d00d      	beq.n	8000cc8 <HAL_GPIO_Init+0x1e8>
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	4a3e      	ldr	r2, [pc, #248]	; (8000da8 <HAL_GPIO_Init+0x2c8>)
 8000cb0:	4293      	cmp	r3, r2
 8000cb2:	d007      	beq.n	8000cc4 <HAL_GPIO_Init+0x1e4>
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	4a3d      	ldr	r2, [pc, #244]	; (8000dac <HAL_GPIO_Init+0x2cc>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d101      	bne.n	8000cc0 <HAL_GPIO_Init+0x1e0>
 8000cbc:	2303      	movs	r3, #3
 8000cbe:	e006      	b.n	8000cce <HAL_GPIO_Init+0x1ee>
 8000cc0:	2304      	movs	r3, #4
 8000cc2:	e004      	b.n	8000cce <HAL_GPIO_Init+0x1ee>
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	e002      	b.n	8000cce <HAL_GPIO_Init+0x1ee>
 8000cc8:	2301      	movs	r3, #1
 8000cca:	e000      	b.n	8000cce <HAL_GPIO_Init+0x1ee>
 8000ccc:	2300      	movs	r3, #0
 8000cce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000cd0:	f002 0203 	and.w	r2, r2, #3
 8000cd4:	0092      	lsls	r2, r2, #2
 8000cd6:	4093      	lsls	r3, r2
 8000cd8:	68fa      	ldr	r2, [r7, #12]
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000cde:	492f      	ldr	r1, [pc, #188]	; (8000d9c <HAL_GPIO_Init+0x2bc>)
 8000ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce2:	089b      	lsrs	r3, r3, #2
 8000ce4:	3302      	adds	r3, #2
 8000ce6:	68fa      	ldr	r2, [r7, #12]
 8000ce8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d006      	beq.n	8000d06 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000cf8:	4b2d      	ldr	r3, [pc, #180]	; (8000db0 <HAL_GPIO_Init+0x2d0>)
 8000cfa:	689a      	ldr	r2, [r3, #8]
 8000cfc:	492c      	ldr	r1, [pc, #176]	; (8000db0 <HAL_GPIO_Init+0x2d0>)
 8000cfe:	69bb      	ldr	r3, [r7, #24]
 8000d00:	4313      	orrs	r3, r2
 8000d02:	608b      	str	r3, [r1, #8]
 8000d04:	e006      	b.n	8000d14 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d06:	4b2a      	ldr	r3, [pc, #168]	; (8000db0 <HAL_GPIO_Init+0x2d0>)
 8000d08:	689a      	ldr	r2, [r3, #8]
 8000d0a:	69bb      	ldr	r3, [r7, #24]
 8000d0c:	43db      	mvns	r3, r3
 8000d0e:	4928      	ldr	r1, [pc, #160]	; (8000db0 <HAL_GPIO_Init+0x2d0>)
 8000d10:	4013      	ands	r3, r2
 8000d12:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d006      	beq.n	8000d2e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d20:	4b23      	ldr	r3, [pc, #140]	; (8000db0 <HAL_GPIO_Init+0x2d0>)
 8000d22:	68da      	ldr	r2, [r3, #12]
 8000d24:	4922      	ldr	r1, [pc, #136]	; (8000db0 <HAL_GPIO_Init+0x2d0>)
 8000d26:	69bb      	ldr	r3, [r7, #24]
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	60cb      	str	r3, [r1, #12]
 8000d2c:	e006      	b.n	8000d3c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d2e:	4b20      	ldr	r3, [pc, #128]	; (8000db0 <HAL_GPIO_Init+0x2d0>)
 8000d30:	68da      	ldr	r2, [r3, #12]
 8000d32:	69bb      	ldr	r3, [r7, #24]
 8000d34:	43db      	mvns	r3, r3
 8000d36:	491e      	ldr	r1, [pc, #120]	; (8000db0 <HAL_GPIO_Init+0x2d0>)
 8000d38:	4013      	ands	r3, r2
 8000d3a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d006      	beq.n	8000d56 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d48:	4b19      	ldr	r3, [pc, #100]	; (8000db0 <HAL_GPIO_Init+0x2d0>)
 8000d4a:	685a      	ldr	r2, [r3, #4]
 8000d4c:	4918      	ldr	r1, [pc, #96]	; (8000db0 <HAL_GPIO_Init+0x2d0>)
 8000d4e:	69bb      	ldr	r3, [r7, #24]
 8000d50:	4313      	orrs	r3, r2
 8000d52:	604b      	str	r3, [r1, #4]
 8000d54:	e006      	b.n	8000d64 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d56:	4b16      	ldr	r3, [pc, #88]	; (8000db0 <HAL_GPIO_Init+0x2d0>)
 8000d58:	685a      	ldr	r2, [r3, #4]
 8000d5a:	69bb      	ldr	r3, [r7, #24]
 8000d5c:	43db      	mvns	r3, r3
 8000d5e:	4914      	ldr	r1, [pc, #80]	; (8000db0 <HAL_GPIO_Init+0x2d0>)
 8000d60:	4013      	ands	r3, r2
 8000d62:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d021      	beq.n	8000db4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d70:	4b0f      	ldr	r3, [pc, #60]	; (8000db0 <HAL_GPIO_Init+0x2d0>)
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	490e      	ldr	r1, [pc, #56]	; (8000db0 <HAL_GPIO_Init+0x2d0>)
 8000d76:	69bb      	ldr	r3, [r7, #24]
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	600b      	str	r3, [r1, #0]
 8000d7c:	e021      	b.n	8000dc2 <HAL_GPIO_Init+0x2e2>
 8000d7e:	bf00      	nop
 8000d80:	10320000 	.word	0x10320000
 8000d84:	10310000 	.word	0x10310000
 8000d88:	10220000 	.word	0x10220000
 8000d8c:	10210000 	.word	0x10210000
 8000d90:	10120000 	.word	0x10120000
 8000d94:	10110000 	.word	0x10110000
 8000d98:	40021000 	.word	0x40021000
 8000d9c:	40010000 	.word	0x40010000
 8000da0:	40010800 	.word	0x40010800
 8000da4:	40010c00 	.word	0x40010c00
 8000da8:	40011000 	.word	0x40011000
 8000dac:	40011400 	.word	0x40011400
 8000db0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000db4:	4b0b      	ldr	r3, [pc, #44]	; (8000de4 <HAL_GPIO_Init+0x304>)
 8000db6:	681a      	ldr	r2, [r3, #0]
 8000db8:	69bb      	ldr	r3, [r7, #24]
 8000dba:	43db      	mvns	r3, r3
 8000dbc:	4909      	ldr	r1, [pc, #36]	; (8000de4 <HAL_GPIO_Init+0x304>)
 8000dbe:	4013      	ands	r3, r2
 8000dc0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dc4:	3301      	adds	r3, #1
 8000dc6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dce:	fa22 f303 	lsr.w	r3, r2, r3
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	f47f ae8e 	bne.w	8000af4 <HAL_GPIO_Init+0x14>
  }
}
 8000dd8:	bf00      	nop
 8000dda:	bf00      	nop
 8000ddc:	372c      	adds	r7, #44	; 0x2c
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bc80      	pop	{r7}
 8000de2:	4770      	bx	lr
 8000de4:	40010400 	.word	0x40010400

08000de8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
 8000df0:	460b      	mov	r3, r1
 8000df2:	807b      	strh	r3, [r7, #2]
 8000df4:	4613      	mov	r3, r2
 8000df6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000df8:	787b      	ldrb	r3, [r7, #1]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d003      	beq.n	8000e06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000dfe:	887a      	ldrh	r2, [r7, #2]
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000e04:	e003      	b.n	8000e0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e06:	887b      	ldrh	r3, [r7, #2]
 8000e08:	041a      	lsls	r2, r3, #16
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	611a      	str	r2, [r3, #16]
}
 8000e0e:	bf00      	nop
 8000e10:	370c      	adds	r7, #12
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bc80      	pop	{r7}
 8000e16:	4770      	bx	lr

08000e18 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b085      	sub	sp, #20
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	460b      	mov	r3, r1
 8000e22:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	68db      	ldr	r3, [r3, #12]
 8000e28:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000e2a:	887a      	ldrh	r2, [r7, #2]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	4013      	ands	r3, r2
 8000e30:	041a      	lsls	r2, r3, #16
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	43d9      	mvns	r1, r3
 8000e36:	887b      	ldrh	r3, [r7, #2]
 8000e38:	400b      	ands	r3, r1
 8000e3a:	431a      	orrs	r2, r3
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	611a      	str	r2, [r3, #16]
}
 8000e40:	bf00      	nop
 8000e42:	3714      	adds	r7, #20
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bc80      	pop	{r7}
 8000e48:	4770      	bx	lr

08000e4a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000e4a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e4c:	b08b      	sub	sp, #44	; 0x2c
 8000e4e:	af06      	add	r7, sp, #24
 8000e50:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d101      	bne.n	8000e5c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	e0f1      	b.n	8001040 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000e62:	b2db      	uxtb	r3, r3
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d106      	bne.n	8000e76 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000e70:	6878      	ldr	r0, [r7, #4]
 8000e72:	f006 fd07 	bl	8007884 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2203      	movs	r2, #3
 8000e7a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4618      	mov	r0, r3
 8000e84:	f002 fc78 	bl	8003778 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	603b      	str	r3, [r7, #0]
 8000e8e:	687e      	ldr	r6, [r7, #4]
 8000e90:	466d      	mov	r5, sp
 8000e92:	f106 0410 	add.w	r4, r6, #16
 8000e96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e9a:	6823      	ldr	r3, [r4, #0]
 8000e9c:	602b      	str	r3, [r5, #0]
 8000e9e:	1d33      	adds	r3, r6, #4
 8000ea0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ea2:	6838      	ldr	r0, [r7, #0]
 8000ea4:	f002 fc42 	bl	800372c <USB_CoreInit>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d005      	beq.n	8000eba <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2202      	movs	r2, #2
 8000eb2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e0c2      	b.n	8001040 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f002 fc73 	bl	80037ac <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	73fb      	strb	r3, [r7, #15]
 8000eca:	e040      	b.n	8000f4e <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000ecc:	7bfb      	ldrb	r3, [r7, #15]
 8000ece:	6879      	ldr	r1, [r7, #4]
 8000ed0:	1c5a      	adds	r2, r3, #1
 8000ed2:	4613      	mov	r3, r2
 8000ed4:	009b      	lsls	r3, r3, #2
 8000ed6:	4413      	add	r3, r2
 8000ed8:	00db      	lsls	r3, r3, #3
 8000eda:	440b      	add	r3, r1
 8000edc:	3301      	adds	r3, #1
 8000ede:	2201      	movs	r2, #1
 8000ee0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000ee2:	7bfb      	ldrb	r3, [r7, #15]
 8000ee4:	6879      	ldr	r1, [r7, #4]
 8000ee6:	1c5a      	adds	r2, r3, #1
 8000ee8:	4613      	mov	r3, r2
 8000eea:	009b      	lsls	r3, r3, #2
 8000eec:	4413      	add	r3, r2
 8000eee:	00db      	lsls	r3, r3, #3
 8000ef0:	440b      	add	r3, r1
 8000ef2:	7bfa      	ldrb	r2, [r7, #15]
 8000ef4:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000ef6:	7bfb      	ldrb	r3, [r7, #15]
 8000ef8:	6879      	ldr	r1, [r7, #4]
 8000efa:	1c5a      	adds	r2, r3, #1
 8000efc:	4613      	mov	r3, r2
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	4413      	add	r3, r2
 8000f02:	00db      	lsls	r3, r3, #3
 8000f04:	440b      	add	r3, r1
 8000f06:	3303      	adds	r3, #3
 8000f08:	2200      	movs	r2, #0
 8000f0a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000f0c:	7bfa      	ldrb	r2, [r7, #15]
 8000f0e:	6879      	ldr	r1, [r7, #4]
 8000f10:	4613      	mov	r3, r2
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	4413      	add	r3, r2
 8000f16:	00db      	lsls	r3, r3, #3
 8000f18:	440b      	add	r3, r1
 8000f1a:	3338      	adds	r3, #56	; 0x38
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000f20:	7bfa      	ldrb	r2, [r7, #15]
 8000f22:	6879      	ldr	r1, [r7, #4]
 8000f24:	4613      	mov	r3, r2
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	4413      	add	r3, r2
 8000f2a:	00db      	lsls	r3, r3, #3
 8000f2c:	440b      	add	r3, r1
 8000f2e:	333c      	adds	r3, #60	; 0x3c
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000f34:	7bfa      	ldrb	r2, [r7, #15]
 8000f36:	6879      	ldr	r1, [r7, #4]
 8000f38:	4613      	mov	r3, r2
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	4413      	add	r3, r2
 8000f3e:	00db      	lsls	r3, r3, #3
 8000f40:	440b      	add	r3, r1
 8000f42:	3340      	adds	r3, #64	; 0x40
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f48:	7bfb      	ldrb	r3, [r7, #15]
 8000f4a:	3301      	adds	r3, #1
 8000f4c:	73fb      	strb	r3, [r7, #15]
 8000f4e:	7bfa      	ldrb	r2, [r7, #15]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	429a      	cmp	r2, r3
 8000f56:	d3b9      	bcc.n	8000ecc <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f58:	2300      	movs	r3, #0
 8000f5a:	73fb      	strb	r3, [r7, #15]
 8000f5c:	e044      	b.n	8000fe8 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000f5e:	7bfa      	ldrb	r2, [r7, #15]
 8000f60:	6879      	ldr	r1, [r7, #4]
 8000f62:	4613      	mov	r3, r2
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	4413      	add	r3, r2
 8000f68:	00db      	lsls	r3, r3, #3
 8000f6a:	440b      	add	r3, r1
 8000f6c:	f203 1369 	addw	r3, r3, #361	; 0x169
 8000f70:	2200      	movs	r2, #0
 8000f72:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000f74:	7bfa      	ldrb	r2, [r7, #15]
 8000f76:	6879      	ldr	r1, [r7, #4]
 8000f78:	4613      	mov	r3, r2
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	4413      	add	r3, r2
 8000f7e:	00db      	lsls	r3, r3, #3
 8000f80:	440b      	add	r3, r1
 8000f82:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000f86:	7bfa      	ldrb	r2, [r7, #15]
 8000f88:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000f8a:	7bfa      	ldrb	r2, [r7, #15]
 8000f8c:	6879      	ldr	r1, [r7, #4]
 8000f8e:	4613      	mov	r3, r2
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	4413      	add	r3, r2
 8000f94:	00db      	lsls	r3, r3, #3
 8000f96:	440b      	add	r3, r1
 8000f98:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000fa0:	7bfa      	ldrb	r2, [r7, #15]
 8000fa2:	6879      	ldr	r1, [r7, #4]
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	4413      	add	r3, r2
 8000faa:	00db      	lsls	r3, r3, #3
 8000fac:	440b      	add	r3, r1
 8000fae:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000fb6:	7bfa      	ldrb	r2, [r7, #15]
 8000fb8:	6879      	ldr	r1, [r7, #4]
 8000fba:	4613      	mov	r3, r2
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	4413      	add	r3, r2
 8000fc0:	00db      	lsls	r3, r3, #3
 8000fc2:	440b      	add	r3, r1
 8000fc4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000fcc:	7bfa      	ldrb	r2, [r7, #15]
 8000fce:	6879      	ldr	r1, [r7, #4]
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	009b      	lsls	r3, r3, #2
 8000fd4:	4413      	add	r3, r2
 8000fd6:	00db      	lsls	r3, r3, #3
 8000fd8:	440b      	add	r3, r1
 8000fda:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000fde:	2200      	movs	r2, #0
 8000fe0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fe2:	7bfb      	ldrb	r3, [r7, #15]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	73fb      	strb	r3, [r7, #15]
 8000fe8:	7bfa      	ldrb	r2, [r7, #15]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	429a      	cmp	r2, r3
 8000ff0:	d3b5      	bcc.n	8000f5e <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	603b      	str	r3, [r7, #0]
 8000ff8:	687e      	ldr	r6, [r7, #4]
 8000ffa:	466d      	mov	r5, sp
 8000ffc:	f106 0410 	add.w	r4, r6, #16
 8001000:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001002:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001004:	6823      	ldr	r3, [r4, #0]
 8001006:	602b      	str	r3, [r5, #0]
 8001008:	1d33      	adds	r3, r6, #4
 800100a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800100c:	6838      	ldr	r0, [r7, #0]
 800100e:	f002 fbd9 	bl	80037c4 <USB_DevInit>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d005      	beq.n	8001024 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2202      	movs	r2, #2
 800101c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001020:	2301      	movs	r3, #1
 8001022:	e00d      	b.n	8001040 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2200      	movs	r2, #0
 8001028:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2201      	movs	r2, #1
 8001030:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4618      	mov	r0, r3
 800103a:	f004 fe5a 	bl	8005cf2 <USB_DevDisconnect>

  return HAL_OK;
 800103e:	2300      	movs	r3, #0
}
 8001040:	4618      	mov	r0, r3
 8001042:	3714      	adds	r7, #20
 8001044:	46bd      	mov	sp, r7
 8001046:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001048 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001056:	2b01      	cmp	r3, #1
 8001058:	d101      	bne.n	800105e <HAL_PCD_Start+0x16>
 800105a:	2302      	movs	r3, #2
 800105c:	e016      	b.n	800108c <HAL_PCD_Start+0x44>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2201      	movs	r2, #1
 8001062:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4618      	mov	r0, r3
 800106c:	f002 fb6e 	bl	800374c <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001070:	2101      	movs	r1, #1
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f006 fe81 	bl	8007d7a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4618      	mov	r0, r3
 800107e:	f004 fe2e 	bl	8005cde <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2200      	movs	r2, #0
 8001086:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800108a:	2300      	movs	r3, #0
}
 800108c:	4618      	mov	r0, r3
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}

08001094 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b088      	sub	sp, #32
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4618      	mov	r0, r3
 80010a2:	f004 fe30 	bl	8005d06 <USB_ReadInterrupts>
 80010a6:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80010a8:	69bb      	ldr	r3, [r7, #24]
 80010aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d003      	beq.n	80010ba <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f000 fb1b 	bl	80016ee <PCD_EP_ISR_Handler>

    return;
 80010b8:	e119      	b.n	80012ee <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80010ba:	69bb      	ldr	r3, [r7, #24]
 80010bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d013      	beq.n	80010ec <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80010cc:	b29a      	uxth	r2, r3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80010d6:	b292      	uxth	r2, r2
 80010d8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	f006 fc54 	bl	800798a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80010e2:	2100      	movs	r1, #0
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f000 f905 	bl	80012f4 <HAL_PCD_SetAddress>

    return;
 80010ea:	e100      	b.n	80012ee <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d00c      	beq.n	8001110 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80010fe:	b29a      	uxth	r2, r3
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001108:	b292      	uxth	r2, r2
 800110a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800110e:	e0ee      	b.n	80012ee <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001110:	69bb      	ldr	r3, [r7, #24]
 8001112:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001116:	2b00      	cmp	r3, #0
 8001118:	d00c      	beq.n	8001134 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001122:	b29a      	uxth	r2, r3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800112c:	b292      	uxth	r2, r2
 800112e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001132:	e0dc      	b.n	80012ee <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800113a:	2b00      	cmp	r3, #0
 800113c:	d027      	beq.n	800118e <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001146:	b29a      	uxth	r2, r3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f022 0204 	bic.w	r2, r2, #4
 8001150:	b292      	uxth	r2, r2
 8001152:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800115e:	b29a      	uxth	r2, r3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f022 0208 	bic.w	r2, r2, #8
 8001168:	b292      	uxth	r2, r2
 800116a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f006 fc44 	bl	80079fc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800117c:	b29a      	uxth	r2, r3
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001186:	b292      	uxth	r2, r2
 8001188:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800118c:	e0af      	b.n	80012ee <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800118e:	69bb      	ldr	r3, [r7, #24]
 8001190:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001194:	2b00      	cmp	r3, #0
 8001196:	f000 8083 	beq.w	80012a0 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 800119a:	2300      	movs	r3, #0
 800119c:	77fb      	strb	r3, [r7, #31]
 800119e:	e010      	b.n	80011c2 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	461a      	mov	r2, r3
 80011a6:	7ffb      	ldrb	r3, [r7, #31]
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	441a      	add	r2, r3
 80011ac:	7ffb      	ldrb	r3, [r7, #31]
 80011ae:	8812      	ldrh	r2, [r2, #0]
 80011b0:	b292      	uxth	r2, r2
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	3320      	adds	r3, #32
 80011b6:	443b      	add	r3, r7
 80011b8:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 80011bc:	7ffb      	ldrb	r3, [r7, #31]
 80011be:	3301      	adds	r3, #1
 80011c0:	77fb      	strb	r3, [r7, #31]
 80011c2:	7ffb      	ldrb	r3, [r7, #31]
 80011c4:	2b07      	cmp	r3, #7
 80011c6:	d9eb      	bls.n	80011a0 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80011d0:	b29a      	uxth	r2, r3
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f042 0201 	orr.w	r2, r2, #1
 80011da:	b292      	uxth	r2, r2
 80011dc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80011e8:	b29a      	uxth	r2, r3
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f022 0201 	bic.w	r2, r2, #1
 80011f2:	b292      	uxth	r2, r2
 80011f4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80011f8:	bf00      	nop
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001202:	b29b      	uxth	r3, r3
 8001204:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001208:	2b00      	cmp	r3, #0
 800120a:	d0f6      	beq.n	80011fa <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001214:	b29a      	uxth	r2, r3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800121e:	b292      	uxth	r2, r2
 8001220:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001224:	2300      	movs	r3, #0
 8001226:	77fb      	strb	r3, [r7, #31]
 8001228:	e00f      	b.n	800124a <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800122a:	7ffb      	ldrb	r3, [r7, #31]
 800122c:	687a      	ldr	r2, [r7, #4]
 800122e:	6812      	ldr	r2, [r2, #0]
 8001230:	4611      	mov	r1, r2
 8001232:	7ffa      	ldrb	r2, [r7, #31]
 8001234:	0092      	lsls	r2, r2, #2
 8001236:	440a      	add	r2, r1
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	3320      	adds	r3, #32
 800123c:	443b      	add	r3, r7
 800123e:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8001242:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001244:	7ffb      	ldrb	r3, [r7, #31]
 8001246:	3301      	adds	r3, #1
 8001248:	77fb      	strb	r3, [r7, #31]
 800124a:	7ffb      	ldrb	r3, [r7, #31]
 800124c:	2b07      	cmp	r3, #7
 800124e:	d9ec      	bls.n	800122a <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001258:	b29a      	uxth	r2, r3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f042 0208 	orr.w	r2, r2, #8
 8001262:	b292      	uxth	r2, r2
 8001264:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001270:	b29a      	uxth	r2, r3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800127a:	b292      	uxth	r2, r2
 800127c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001288:	b29a      	uxth	r2, r3
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f042 0204 	orr.w	r2, r2, #4
 8001292:	b292      	uxth	r2, r2
 8001294:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f006 fb95 	bl	80079c8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800129e:	e026      	b.n	80012ee <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80012a0:	69bb      	ldr	r3, [r7, #24]
 80012a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d00f      	beq.n	80012ca <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80012b2:	b29a      	uxth	r2, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80012bc:	b292      	uxth	r2, r2
 80012be:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f006 fb53 	bl	800796e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80012c8:	e011      	b.n	80012ee <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80012ca:	69bb      	ldr	r3, [r7, #24]
 80012cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d00c      	beq.n	80012ee <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80012dc:	b29a      	uxth	r2, r3
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80012e6:	b292      	uxth	r2, r2
 80012e8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80012ec:	bf00      	nop
  }
}
 80012ee:	3720      	adds	r7, #32
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	460b      	mov	r3, r1
 80012fe:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001306:	2b01      	cmp	r3, #1
 8001308:	d101      	bne.n	800130e <HAL_PCD_SetAddress+0x1a>
 800130a:	2302      	movs	r3, #2
 800130c:	e013      	b.n	8001336 <HAL_PCD_SetAddress+0x42>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2201      	movs	r2, #1
 8001312:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	78fa      	ldrb	r2, [r7, #3]
 800131a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	78fa      	ldrb	r2, [r7, #3]
 8001324:	4611      	mov	r1, r2
 8001326:	4618      	mov	r0, r3
 8001328:	f004 fcc6 	bl	8005cb8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2200      	movs	r2, #0
 8001330:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001334:	2300      	movs	r3, #0
}
 8001336:	4618      	mov	r0, r3
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800133e:	b580      	push	{r7, lr}
 8001340:	b084      	sub	sp, #16
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
 8001346:	4608      	mov	r0, r1
 8001348:	4611      	mov	r1, r2
 800134a:	461a      	mov	r2, r3
 800134c:	4603      	mov	r3, r0
 800134e:	70fb      	strb	r3, [r7, #3]
 8001350:	460b      	mov	r3, r1
 8001352:	803b      	strh	r3, [r7, #0]
 8001354:	4613      	mov	r3, r2
 8001356:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001358:	2300      	movs	r3, #0
 800135a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800135c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001360:	2b00      	cmp	r3, #0
 8001362:	da0e      	bge.n	8001382 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001364:	78fb      	ldrb	r3, [r7, #3]
 8001366:	f003 0307 	and.w	r3, r3, #7
 800136a:	1c5a      	adds	r2, r3, #1
 800136c:	4613      	mov	r3, r2
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	4413      	add	r3, r2
 8001372:	00db      	lsls	r3, r3, #3
 8001374:	687a      	ldr	r2, [r7, #4]
 8001376:	4413      	add	r3, r2
 8001378:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	2201      	movs	r2, #1
 800137e:	705a      	strb	r2, [r3, #1]
 8001380:	e00e      	b.n	80013a0 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001382:	78fb      	ldrb	r3, [r7, #3]
 8001384:	f003 0207 	and.w	r2, r3, #7
 8001388:	4613      	mov	r3, r2
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	4413      	add	r3, r2
 800138e:	00db      	lsls	r3, r3, #3
 8001390:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001394:	687a      	ldr	r2, [r7, #4]
 8001396:	4413      	add	r3, r2
 8001398:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	2200      	movs	r2, #0
 800139e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80013a0:	78fb      	ldrb	r3, [r7, #3]
 80013a2:	f003 0307 	and.w	r3, r3, #7
 80013a6:	b2da      	uxtb	r2, r3
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80013ac:	883a      	ldrh	r2, [r7, #0]
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	78ba      	ldrb	r2, [r7, #2]
 80013b6:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80013b8:	78bb      	ldrb	r3, [r7, #2]
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	d102      	bne.n	80013c4 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	2200      	movs	r2, #0
 80013c2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d101      	bne.n	80013d2 <HAL_PCD_EP_Open+0x94>
 80013ce:	2302      	movs	r3, #2
 80013d0:	e00e      	b.n	80013f0 <HAL_PCD_EP_Open+0xb2>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2201      	movs	r2, #1
 80013d6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	68f9      	ldr	r1, [r7, #12]
 80013e0:	4618      	mov	r0, r3
 80013e2:	f002 fa0f 	bl	8003804 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2200      	movs	r2, #0
 80013ea:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80013ee:	7afb      	ldrb	r3, [r7, #11]
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	3710      	adds	r7, #16
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	460b      	mov	r3, r1
 8001402:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001404:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001408:	2b00      	cmp	r3, #0
 800140a:	da0e      	bge.n	800142a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800140c:	78fb      	ldrb	r3, [r7, #3]
 800140e:	f003 0307 	and.w	r3, r3, #7
 8001412:	1c5a      	adds	r2, r3, #1
 8001414:	4613      	mov	r3, r2
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	4413      	add	r3, r2
 800141a:	00db      	lsls	r3, r3, #3
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	4413      	add	r3, r2
 8001420:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	2201      	movs	r2, #1
 8001426:	705a      	strb	r2, [r3, #1]
 8001428:	e00e      	b.n	8001448 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800142a:	78fb      	ldrb	r3, [r7, #3]
 800142c:	f003 0207 	and.w	r2, r3, #7
 8001430:	4613      	mov	r3, r2
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	4413      	add	r3, r2
 8001436:	00db      	lsls	r3, r3, #3
 8001438:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800143c:	687a      	ldr	r2, [r7, #4]
 800143e:	4413      	add	r3, r2
 8001440:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	2200      	movs	r2, #0
 8001446:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001448:	78fb      	ldrb	r3, [r7, #3]
 800144a:	f003 0307 	and.w	r3, r3, #7
 800144e:	b2da      	uxtb	r2, r3
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800145a:	2b01      	cmp	r3, #1
 800145c:	d101      	bne.n	8001462 <HAL_PCD_EP_Close+0x6a>
 800145e:	2302      	movs	r3, #2
 8001460:	e00e      	b.n	8001480 <HAL_PCD_EP_Close+0x88>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2201      	movs	r2, #1
 8001466:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	68f9      	ldr	r1, [r7, #12]
 8001470:	4618      	mov	r0, r3
 8001472:	f002 fd87 	bl	8003f84 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2200      	movs	r2, #0
 800147a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800147e:	2300      	movs	r3, #0
}
 8001480:	4618      	mov	r0, r3
 8001482:	3710      	adds	r7, #16
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}

08001488 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b086      	sub	sp, #24
 800148c:	af00      	add	r7, sp, #0
 800148e:	60f8      	str	r0, [r7, #12]
 8001490:	607a      	str	r2, [r7, #4]
 8001492:	603b      	str	r3, [r7, #0]
 8001494:	460b      	mov	r3, r1
 8001496:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001498:	7afb      	ldrb	r3, [r7, #11]
 800149a:	f003 0207 	and.w	r2, r3, #7
 800149e:	4613      	mov	r3, r2
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	4413      	add	r3, r2
 80014a4:	00db      	lsls	r3, r3, #3
 80014a6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80014aa:	68fa      	ldr	r2, [r7, #12]
 80014ac:	4413      	add	r3, r2
 80014ae:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	683a      	ldr	r2, [r7, #0]
 80014ba:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	2200      	movs	r2, #0
 80014c0:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	2200      	movs	r2, #0
 80014c6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80014c8:	7afb      	ldrb	r3, [r7, #11]
 80014ca:	f003 0307 	and.w	r3, r3, #7
 80014ce:	b2da      	uxtb	r2, r3
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	6979      	ldr	r1, [r7, #20]
 80014da:	4618      	mov	r0, r3
 80014dc:	f002 ff3e 	bl	800435c <USB_EPStartXfer>

  return HAL_OK;
 80014e0:	2300      	movs	r3, #0
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3718      	adds	r7, #24
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}

080014ea <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80014ea:	b480      	push	{r7}
 80014ec:	b083      	sub	sp, #12
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	6078      	str	r0, [r7, #4]
 80014f2:	460b      	mov	r3, r1
 80014f4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80014f6:	78fb      	ldrb	r3, [r7, #3]
 80014f8:	f003 0207 	and.w	r2, r3, #7
 80014fc:	6879      	ldr	r1, [r7, #4]
 80014fe:	4613      	mov	r3, r2
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	4413      	add	r3, r2
 8001504:	00db      	lsls	r3, r3, #3
 8001506:	440b      	add	r3, r1
 8001508:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800150c:	681b      	ldr	r3, [r3, #0]
}
 800150e:	4618      	mov	r0, r3
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	bc80      	pop	{r7}
 8001516:	4770      	bx	lr

08001518 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b086      	sub	sp, #24
 800151c:	af00      	add	r7, sp, #0
 800151e:	60f8      	str	r0, [r7, #12]
 8001520:	607a      	str	r2, [r7, #4]
 8001522:	603b      	str	r3, [r7, #0]
 8001524:	460b      	mov	r3, r1
 8001526:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001528:	7afb      	ldrb	r3, [r7, #11]
 800152a:	f003 0307 	and.w	r3, r3, #7
 800152e:	1c5a      	adds	r2, r3, #1
 8001530:	4613      	mov	r3, r2
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	4413      	add	r3, r2
 8001536:	00db      	lsls	r3, r3, #3
 8001538:	68fa      	ldr	r2, [r7, #12]
 800153a:	4413      	add	r3, r2
 800153c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	687a      	ldr	r2, [r7, #4]
 8001542:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	683a      	ldr	r2, [r7, #0]
 8001548:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	2201      	movs	r2, #1
 800154e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	683a      	ldr	r2, [r7, #0]
 8001556:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	2200      	movs	r2, #0
 800155c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	2201      	movs	r2, #1
 8001562:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001564:	7afb      	ldrb	r3, [r7, #11]
 8001566:	f003 0307 	and.w	r3, r3, #7
 800156a:	b2da      	uxtb	r2, r3
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	6979      	ldr	r1, [r7, #20]
 8001576:	4618      	mov	r0, r3
 8001578:	f002 fef0 	bl	800435c <USB_EPStartXfer>

  return HAL_OK;
 800157c:	2300      	movs	r3, #0
}
 800157e:	4618      	mov	r0, r3
 8001580:	3718      	adds	r7, #24
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001586:	b580      	push	{r7, lr}
 8001588:	b084      	sub	sp, #16
 800158a:	af00      	add	r7, sp, #0
 800158c:	6078      	str	r0, [r7, #4]
 800158e:	460b      	mov	r3, r1
 8001590:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001592:	78fb      	ldrb	r3, [r7, #3]
 8001594:	f003 0207 	and.w	r2, r3, #7
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	429a      	cmp	r2, r3
 800159e:	d901      	bls.n	80015a4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	e04c      	b.n	800163e <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80015a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	da0e      	bge.n	80015ca <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80015ac:	78fb      	ldrb	r3, [r7, #3]
 80015ae:	f003 0307 	and.w	r3, r3, #7
 80015b2:	1c5a      	adds	r2, r3, #1
 80015b4:	4613      	mov	r3, r2
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	4413      	add	r3, r2
 80015ba:	00db      	lsls	r3, r3, #3
 80015bc:	687a      	ldr	r2, [r7, #4]
 80015be:	4413      	add	r3, r2
 80015c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	2201      	movs	r2, #1
 80015c6:	705a      	strb	r2, [r3, #1]
 80015c8:	e00c      	b.n	80015e4 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80015ca:	78fa      	ldrb	r2, [r7, #3]
 80015cc:	4613      	mov	r3, r2
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	4413      	add	r3, r2
 80015d2:	00db      	lsls	r3, r3, #3
 80015d4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80015d8:	687a      	ldr	r2, [r7, #4]
 80015da:	4413      	add	r3, r2
 80015dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	2200      	movs	r2, #0
 80015e2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	2201      	movs	r2, #1
 80015e8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80015ea:	78fb      	ldrb	r3, [r7, #3]
 80015ec:	f003 0307 	and.w	r3, r3, #7
 80015f0:	b2da      	uxtb	r2, r3
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d101      	bne.n	8001604 <HAL_PCD_EP_SetStall+0x7e>
 8001600:	2302      	movs	r3, #2
 8001602:	e01c      	b.n	800163e <HAL_PCD_EP_SetStall+0xb8>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2201      	movs	r2, #1
 8001608:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	68f9      	ldr	r1, [r7, #12]
 8001612:	4618      	mov	r0, r3
 8001614:	f004 fa53 	bl	8005abe <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001618:	78fb      	ldrb	r3, [r7, #3]
 800161a:	f003 0307 	and.w	r3, r3, #7
 800161e:	2b00      	cmp	r3, #0
 8001620:	d108      	bne.n	8001634 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800162c:	4619      	mov	r1, r3
 800162e:	4610      	mov	r0, r2
 8001630:	f004 fb78 	bl	8005d24 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2200      	movs	r2, #0
 8001638:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800163c:	2300      	movs	r3, #0
}
 800163e:	4618      	mov	r0, r3
 8001640:	3710      	adds	r7, #16
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}

08001646 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001646:	b580      	push	{r7, lr}
 8001648:	b084      	sub	sp, #16
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
 800164e:	460b      	mov	r3, r1
 8001650:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001652:	78fb      	ldrb	r3, [r7, #3]
 8001654:	f003 020f 	and.w	r2, r3, #15
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	429a      	cmp	r2, r3
 800165e:	d901      	bls.n	8001664 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	e040      	b.n	80016e6 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001664:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001668:	2b00      	cmp	r3, #0
 800166a:	da0e      	bge.n	800168a <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800166c:	78fb      	ldrb	r3, [r7, #3]
 800166e:	f003 0307 	and.w	r3, r3, #7
 8001672:	1c5a      	adds	r2, r3, #1
 8001674:	4613      	mov	r3, r2
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	4413      	add	r3, r2
 800167a:	00db      	lsls	r3, r3, #3
 800167c:	687a      	ldr	r2, [r7, #4]
 800167e:	4413      	add	r3, r2
 8001680:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	2201      	movs	r2, #1
 8001686:	705a      	strb	r2, [r3, #1]
 8001688:	e00e      	b.n	80016a8 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800168a:	78fb      	ldrb	r3, [r7, #3]
 800168c:	f003 0207 	and.w	r2, r3, #7
 8001690:	4613      	mov	r3, r2
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	4413      	add	r3, r2
 8001696:	00db      	lsls	r3, r3, #3
 8001698:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800169c:	687a      	ldr	r2, [r7, #4]
 800169e:	4413      	add	r3, r2
 80016a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	2200      	movs	r2, #0
 80016a6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	2200      	movs	r2, #0
 80016ac:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80016ae:	78fb      	ldrb	r3, [r7, #3]
 80016b0:	f003 0307 	and.w	r3, r3, #7
 80016b4:	b2da      	uxtb	r2, r3
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d101      	bne.n	80016c8 <HAL_PCD_EP_ClrStall+0x82>
 80016c4:	2302      	movs	r3, #2
 80016c6:	e00e      	b.n	80016e6 <HAL_PCD_EP_ClrStall+0xa0>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2201      	movs	r2, #1
 80016cc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	68f9      	ldr	r1, [r7, #12]
 80016d6:	4618      	mov	r0, r3
 80016d8:	f004 fa41 	bl	8005b5e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2200      	movs	r2, #0
 80016e0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80016e4:	2300      	movs	r3, #0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3710      	adds	r7, #16
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}

080016ee <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80016ee:	b580      	push	{r7, lr}
 80016f0:	b096      	sub	sp, #88	; 0x58
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80016f6:	e3bf      	b.n	8001e78 <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001700:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001704:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001708:	b2db      	uxtb	r3, r3
 800170a:	f003 030f 	and.w	r3, r3, #15
 800170e:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8001712:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001716:	2b00      	cmp	r3, #0
 8001718:	f040 8179 	bne.w	8001a0e <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800171c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001720:	f003 0310 	and.w	r3, r3, #16
 8001724:	2b00      	cmp	r3, #0
 8001726:	d152      	bne.n	80017ce <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	881b      	ldrh	r3, [r3, #0]
 800172e:	b29b      	uxth	r3, r3
 8001730:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001734:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001738:	81fb      	strh	r3, [r7, #14]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	89fb      	ldrh	r3, [r7, #14]
 8001740:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001744:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001748:	b29b      	uxth	r3, r3
 800174a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	3328      	adds	r3, #40	; 0x28
 8001750:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800175a:	b29b      	uxth	r3, r3
 800175c:	461a      	mov	r2, r3
 800175e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	00db      	lsls	r3, r3, #3
 8001764:	4413      	add	r3, r2
 8001766:	3302      	adds	r3, #2
 8001768:	005b      	lsls	r3, r3, #1
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	6812      	ldr	r2, [r2, #0]
 800176e:	4413      	add	r3, r2
 8001770:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001774:	881b      	ldrh	r3, [r3, #0]
 8001776:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800177a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800177c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800177e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001780:	695a      	ldr	r2, [r3, #20]
 8001782:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001784:	69db      	ldr	r3, [r3, #28]
 8001786:	441a      	add	r2, r3
 8001788:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800178a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800178c:	2100      	movs	r1, #0
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f006 f8d3 	bl	800793a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800179a:	b2db      	uxtb	r3, r3
 800179c:	2b00      	cmp	r3, #0
 800179e:	f000 836b 	beq.w	8001e78 <PCD_EP_ISR_Handler+0x78a>
 80017a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017a4:	699b      	ldr	r3, [r3, #24]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	f040 8366 	bne.w	8001e78 <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80017b8:	b2da      	uxtb	r2, r3
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	b292      	uxth	r2, r2
 80017c0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2200      	movs	r2, #0
 80017c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80017cc:	e354      	b.n	8001e78 <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80017d4:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	881b      	ldrh	r3, [r3, #0]
 80017dc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80017e0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80017e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d034      	beq.n	8001856 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80017f4:	b29b      	uxth	r3, r3
 80017f6:	461a      	mov	r2, r3
 80017f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	00db      	lsls	r3, r3, #3
 80017fe:	4413      	add	r3, r2
 8001800:	3306      	adds	r3, #6
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	6812      	ldr	r2, [r2, #0]
 8001808:	4413      	add	r3, r2
 800180a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800180e:	881b      	ldrh	r3, [r3, #0]
 8001810:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001814:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001816:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6818      	ldr	r0, [r3, #0]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001822:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001824:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001826:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001828:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800182a:	b29b      	uxth	r3, r3
 800182c:	f004 faca 	bl	8005dc4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	881b      	ldrh	r3, [r3, #0]
 8001836:	b29a      	uxth	r2, r3
 8001838:	f640 738f 	movw	r3, #3983	; 0xf8f
 800183c:	4013      	ands	r3, r2
 800183e:	823b      	strh	r3, [r7, #16]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	8a3a      	ldrh	r2, [r7, #16]
 8001846:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800184a:	b292      	uxth	r2, r2
 800184c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f006 f846 	bl	80078e0 <HAL_PCD_SetupStageCallback>
 8001854:	e310      	b.n	8001e78 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001856:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800185a:	2b00      	cmp	r3, #0
 800185c:	f280 830c 	bge.w	8001e78 <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	881b      	ldrh	r3, [r3, #0]
 8001866:	b29a      	uxth	r2, r3
 8001868:	f640 738f 	movw	r3, #3983	; 0xf8f
 800186c:	4013      	ands	r3, r2
 800186e:	83fb      	strh	r3, [r7, #30]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	8bfa      	ldrh	r2, [r7, #30]
 8001876:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800187a:	b292      	uxth	r2, r2
 800187c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001886:	b29b      	uxth	r3, r3
 8001888:	461a      	mov	r2, r3
 800188a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	00db      	lsls	r3, r3, #3
 8001890:	4413      	add	r3, r2
 8001892:	3306      	adds	r3, #6
 8001894:	005b      	lsls	r3, r3, #1
 8001896:	687a      	ldr	r2, [r7, #4]
 8001898:	6812      	ldr	r2, [r2, #0]
 800189a:	4413      	add	r3, r2
 800189c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80018a0:	881b      	ldrh	r3, [r3, #0]
 80018a2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80018a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018a8:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80018aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018ac:	69db      	ldr	r3, [r3, #28]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d019      	beq.n	80018e6 <PCD_EP_ISR_Handler+0x1f8>
 80018b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018b4:	695b      	ldr	r3, [r3, #20]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d015      	beq.n	80018e6 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6818      	ldr	r0, [r3, #0]
 80018be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018c0:	6959      	ldr	r1, [r3, #20]
 80018c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018c4:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80018c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018c8:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80018ca:	b29b      	uxth	r3, r3
 80018cc:	f004 fa7a 	bl	8005dc4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80018d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018d2:	695a      	ldr	r2, [r3, #20]
 80018d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018d6:	69db      	ldr	r3, [r3, #28]
 80018d8:	441a      	add	r2, r3
 80018da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018dc:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80018de:	2100      	movs	r1, #0
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f006 f80f 	bl	8007904 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	881b      	ldrh	r3, [r3, #0]
 80018ec:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80018f0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80018f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	f040 82bd 	bne.w	8001e78 <PCD_EP_ISR_Handler+0x78a>
 80018fe:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001902:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001906:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800190a:	f000 82b5 	beq.w	8001e78 <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	61bb      	str	r3, [r7, #24]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800191c:	b29b      	uxth	r3, r3
 800191e:	461a      	mov	r2, r3
 8001920:	69bb      	ldr	r3, [r7, #24]
 8001922:	4413      	add	r3, r2
 8001924:	61bb      	str	r3, [r7, #24]
 8001926:	69bb      	ldr	r3, [r7, #24]
 8001928:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800192c:	617b      	str	r3, [r7, #20]
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	881b      	ldrh	r3, [r3, #0]
 8001932:	b29b      	uxth	r3, r3
 8001934:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001938:	b29a      	uxth	r2, r3
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	801a      	strh	r2, [r3, #0]
 800193e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001940:	691b      	ldr	r3, [r3, #16]
 8001942:	2b3e      	cmp	r3, #62	; 0x3e
 8001944:	d91d      	bls.n	8001982 <PCD_EP_ISR_Handler+0x294>
 8001946:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001948:	691b      	ldr	r3, [r3, #16]
 800194a:	095b      	lsrs	r3, r3, #5
 800194c:	647b      	str	r3, [r7, #68]	; 0x44
 800194e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001950:	691b      	ldr	r3, [r3, #16]
 8001952:	f003 031f 	and.w	r3, r3, #31
 8001956:	2b00      	cmp	r3, #0
 8001958:	d102      	bne.n	8001960 <PCD_EP_ISR_Handler+0x272>
 800195a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800195c:	3b01      	subs	r3, #1
 800195e:	647b      	str	r3, [r7, #68]	; 0x44
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	881b      	ldrh	r3, [r3, #0]
 8001964:	b29a      	uxth	r2, r3
 8001966:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001968:	b29b      	uxth	r3, r3
 800196a:	029b      	lsls	r3, r3, #10
 800196c:	b29b      	uxth	r3, r3
 800196e:	4313      	orrs	r3, r2
 8001970:	b29b      	uxth	r3, r3
 8001972:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001976:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800197a:	b29a      	uxth	r2, r3
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	801a      	strh	r2, [r3, #0]
 8001980:	e026      	b.n	80019d0 <PCD_EP_ISR_Handler+0x2e2>
 8001982:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001984:	691b      	ldr	r3, [r3, #16]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d10a      	bne.n	80019a0 <PCD_EP_ISR_Handler+0x2b2>
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	881b      	ldrh	r3, [r3, #0]
 800198e:	b29b      	uxth	r3, r3
 8001990:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001994:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001998:	b29a      	uxth	r2, r3
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	801a      	strh	r2, [r3, #0]
 800199e:	e017      	b.n	80019d0 <PCD_EP_ISR_Handler+0x2e2>
 80019a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019a2:	691b      	ldr	r3, [r3, #16]
 80019a4:	085b      	lsrs	r3, r3, #1
 80019a6:	647b      	str	r3, [r7, #68]	; 0x44
 80019a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019aa:	691b      	ldr	r3, [r3, #16]
 80019ac:	f003 0301 	and.w	r3, r3, #1
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d002      	beq.n	80019ba <PCD_EP_ISR_Handler+0x2cc>
 80019b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019b6:	3301      	adds	r3, #1
 80019b8:	647b      	str	r3, [r7, #68]	; 0x44
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	881b      	ldrh	r3, [r3, #0]
 80019be:	b29a      	uxth	r2, r3
 80019c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019c2:	b29b      	uxth	r3, r3
 80019c4:	029b      	lsls	r3, r3, #10
 80019c6:	b29b      	uxth	r3, r3
 80019c8:	4313      	orrs	r3, r2
 80019ca:	b29a      	uxth	r2, r3
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	881b      	ldrh	r3, [r3, #0]
 80019d6:	b29b      	uxth	r3, r3
 80019d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80019dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019e0:	827b      	strh	r3, [r7, #18]
 80019e2:	8a7b      	ldrh	r3, [r7, #18]
 80019e4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80019e8:	827b      	strh	r3, [r7, #18]
 80019ea:	8a7b      	ldrh	r3, [r7, #18]
 80019ec:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80019f0:	827b      	strh	r3, [r7, #18]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	8a7b      	ldrh	r3, [r7, #18]
 80019f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80019fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001a00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a08:	b29b      	uxth	r3, r3
 8001a0a:	8013      	strh	r3, [r2, #0]
 8001a0c:	e234      	b.n	8001e78 <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	461a      	mov	r2, r3
 8001a14:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	4413      	add	r3, r2
 8001a1c:	881b      	ldrh	r3, [r3, #0]
 8001a1e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001a22:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	f280 80fc 	bge.w	8001c24 <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	461a      	mov	r2, r3
 8001a32:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	4413      	add	r3, r2
 8001a3a:	881b      	ldrh	r3, [r3, #0]
 8001a3c:	b29a      	uxth	r2, r3
 8001a3e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001a42:	4013      	ands	r3, r2
 8001a44:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	4413      	add	r3, r2
 8001a56:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001a5a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001a5e:	b292      	uxth	r2, r2
 8001a60:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001a62:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8001a66:	4613      	mov	r3, r2
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	4413      	add	r3, r2
 8001a6c:	00db      	lsls	r3, r3, #3
 8001a6e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	4413      	add	r3, r2
 8001a76:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001a78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a7a:	7b1b      	ldrb	r3, [r3, #12]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d125      	bne.n	8001acc <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a88:	b29b      	uxth	r3, r3
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	00db      	lsls	r3, r3, #3
 8001a92:	4413      	add	r3, r2
 8001a94:	3306      	adds	r3, #6
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	6812      	ldr	r2, [r2, #0]
 8001a9c:	4413      	add	r3, r2
 8001a9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001aa2:	881b      	ldrh	r3, [r3, #0]
 8001aa4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001aa8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8001aac:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	f000 8092 	beq.w	8001bda <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6818      	ldr	r0, [r3, #0]
 8001aba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001abc:	6959      	ldr	r1, [r3, #20]
 8001abe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ac0:	88da      	ldrh	r2, [r3, #6]
 8001ac2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001ac6:	f004 f97d 	bl	8005dc4 <USB_ReadPMA>
 8001aca:	e086      	b.n	8001bda <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001acc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ace:	78db      	ldrb	r3, [r3, #3]
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d10a      	bne.n	8001aea <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001ad4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001ad8:	461a      	mov	r2, r3
 8001ada:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f000 f9d9 	bl	8001e94 <HAL_PCD_EP_DB_Receive>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8001ae8:	e077      	b.n	8001bda <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	461a      	mov	r2, r3
 8001af0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	4413      	add	r3, r2
 8001af8:	881b      	ldrh	r3, [r3, #0]
 8001afa:	b29b      	uxth	r3, r3
 8001afc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001b00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b04:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	441a      	add	r2, r3
 8001b16:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001b1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001b1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001b22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b26:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001b2a:	b29b      	uxth	r3, r3
 8001b2c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	461a      	mov	r2, r3
 8001b34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	4413      	add	r3, r2
 8001b3c:	881b      	ldrh	r3, [r3, #0]
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d024      	beq.n	8001b92 <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b50:	b29b      	uxth	r3, r3
 8001b52:	461a      	mov	r2, r3
 8001b54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	00db      	lsls	r3, r3, #3
 8001b5a:	4413      	add	r3, r2
 8001b5c:	3302      	adds	r3, #2
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	6812      	ldr	r2, [r2, #0]
 8001b64:	4413      	add	r3, r2
 8001b66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b6a:	881b      	ldrh	r3, [r3, #0]
 8001b6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b70:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001b74:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d02e      	beq.n	8001bda <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6818      	ldr	r0, [r3, #0]
 8001b80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b82:	6959      	ldr	r1, [r3, #20]
 8001b84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b86:	891a      	ldrh	r2, [r3, #8]
 8001b88:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001b8c:	f004 f91a 	bl	8005dc4 <USB_ReadPMA>
 8001b90:	e023      	b.n	8001bda <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b9a:	b29b      	uxth	r3, r3
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	00db      	lsls	r3, r3, #3
 8001ba4:	4413      	add	r3, r2
 8001ba6:	3306      	adds	r3, #6
 8001ba8:	005b      	lsls	r3, r3, #1
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	6812      	ldr	r2, [r2, #0]
 8001bae:	4413      	add	r3, r2
 8001bb0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001bb4:	881b      	ldrh	r3, [r3, #0]
 8001bb6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001bba:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001bbe:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d009      	beq.n	8001bda <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6818      	ldr	r0, [r3, #0]
 8001bca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bcc:	6959      	ldr	r1, [r3, #20]
 8001bce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bd0:	895a      	ldrh	r2, [r3, #10]
 8001bd2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001bd6:	f004 f8f5 	bl	8005dc4 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001bda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bdc:	69da      	ldr	r2, [r3, #28]
 8001bde:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001be2:	441a      	add	r2, r3
 8001be4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001be6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001be8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bea:	695a      	ldr	r2, [r3, #20]
 8001bec:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001bf0:	441a      	add	r2, r3
 8001bf2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bf4:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001bf6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bf8:	699b      	ldr	r3, [r3, #24]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d005      	beq.n	8001c0a <PCD_EP_ISR_Handler+0x51c>
 8001bfe:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8001c02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c04:	691b      	ldr	r3, [r3, #16]
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d206      	bcs.n	8001c18 <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001c0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	4619      	mov	r1, r3
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f005 fe77 	bl	8007904 <HAL_PCD_DataOutStageCallback>
 8001c16:	e005      	b.n	8001c24 <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f002 fb9c 	bl	800435c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001c24:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001c28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	f000 8123 	beq.w	8001e78 <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 8001c32:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001c36:	1c5a      	adds	r2, r3, #1
 8001c38:	4613      	mov	r3, r2
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	4413      	add	r3, r2
 8001c3e:	00db      	lsls	r3, r3, #3
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	4413      	add	r3, r2
 8001c44:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	4413      	add	r3, r2
 8001c54:	881b      	ldrh	r3, [r3, #0]
 8001c56:	b29b      	uxth	r3, r3
 8001c58:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001c5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c60:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	461a      	mov	r2, r3
 8001c6a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	441a      	add	r2, r3
 8001c72:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001c76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c7e:	b29b      	uxth	r3, r3
 8001c80:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001c82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c84:	78db      	ldrb	r3, [r3, #3]
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	f040 80a2 	bne.w	8001dd0 <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 8001c8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c8e:	2200      	movs	r2, #0
 8001c90:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001c92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c94:	7b1b      	ldrb	r3, [r3, #12]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	f000 8093 	beq.w	8001dc2 <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001c9c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001ca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d046      	beq.n	8001d36 <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001ca8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001caa:	785b      	ldrb	r3, [r3, #1]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d126      	bne.n	8001cfe <PCD_EP_ISR_Handler+0x610>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	627b      	str	r3, [r7, #36]	; 0x24
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc4:	4413      	add	r3, r2
 8001cc6:	627b      	str	r3, [r7, #36]	; 0x24
 8001cc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	011a      	lsls	r2, r3, #4
 8001cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd0:	4413      	add	r3, r2
 8001cd2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001cd6:	623b      	str	r3, [r7, #32]
 8001cd8:	6a3b      	ldr	r3, [r7, #32]
 8001cda:	881b      	ldrh	r3, [r3, #0]
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ce2:	b29a      	uxth	r2, r3
 8001ce4:	6a3b      	ldr	r3, [r7, #32]
 8001ce6:	801a      	strh	r2, [r3, #0]
 8001ce8:	6a3b      	ldr	r3, [r7, #32]
 8001cea:	881b      	ldrh	r3, [r3, #0]
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001cf2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001cf6:	b29a      	uxth	r2, r3
 8001cf8:	6a3b      	ldr	r3, [r7, #32]
 8001cfa:	801a      	strh	r2, [r3, #0]
 8001cfc:	e061      	b.n	8001dc2 <PCD_EP_ISR_Handler+0x6d4>
 8001cfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d00:	785b      	ldrb	r3, [r3, #1]
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d15d      	bne.n	8001dc2 <PCD_EP_ISR_Handler+0x6d4>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	461a      	mov	r2, r3
 8001d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d1a:	4413      	add	r3, r2
 8001d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	011a      	lsls	r2, r3, #4
 8001d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d26:	4413      	add	r3, r2
 8001d28:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001d2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d30:	2200      	movs	r2, #0
 8001d32:	801a      	strh	r2, [r3, #0]
 8001d34:	e045      	b.n	8001dc2 <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d3e:	785b      	ldrb	r3, [r3, #1]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d126      	bne.n	8001d92 <PCD_EP_ISR_Handler+0x6a4>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	637b      	str	r3, [r7, #52]	; 0x34
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	461a      	mov	r2, r3
 8001d56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d58:	4413      	add	r3, r2
 8001d5a:	637b      	str	r3, [r7, #52]	; 0x34
 8001d5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	011a      	lsls	r2, r3, #4
 8001d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d64:	4413      	add	r3, r2
 8001d66:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001d6a:	633b      	str	r3, [r7, #48]	; 0x30
 8001d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d6e:	881b      	ldrh	r3, [r3, #0]
 8001d70:	b29b      	uxth	r3, r3
 8001d72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d76:	b29a      	uxth	r2, r3
 8001d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d7a:	801a      	strh	r2, [r3, #0]
 8001d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d7e:	881b      	ldrh	r3, [r3, #0]
 8001d80:	b29b      	uxth	r3, r3
 8001d82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d8a:	b29a      	uxth	r2, r3
 8001d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d8e:	801a      	strh	r2, [r3, #0]
 8001d90:	e017      	b.n	8001dc2 <PCD_EP_ISR_Handler+0x6d4>
 8001d92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d94:	785b      	ldrb	r3, [r3, #1]
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d113      	bne.n	8001dc2 <PCD_EP_ISR_Handler+0x6d4>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001da2:	b29b      	uxth	r3, r3
 8001da4:	461a      	mov	r2, r3
 8001da6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001da8:	4413      	add	r3, r2
 8001daa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001dac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	011a      	lsls	r2, r3, #4
 8001db2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001db4:	4413      	add	r3, r2
 8001db6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001dba:	63bb      	str	r3, [r7, #56]	; 0x38
 8001dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001dc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f005 fdb6 	bl	800793a <HAL_PCD_DataInStageCallback>
 8001dce:	e053      	b.n	8001e78 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001dd0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d146      	bne.n	8001e6a <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	461a      	mov	r2, r3
 8001de8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	00db      	lsls	r3, r3, #3
 8001dee:	4413      	add	r3, r2
 8001df0:	3302      	adds	r3, #2
 8001df2:	005b      	lsls	r3, r3, #1
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	6812      	ldr	r2, [r2, #0]
 8001df8:	4413      	add	r3, r2
 8001dfa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001dfe:	881b      	ldrh	r3, [r3, #0]
 8001e00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e04:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8001e08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e0a:	699a      	ldr	r2, [r3, #24]
 8001e0c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d907      	bls.n	8001e24 <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 8001e14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e16:	699a      	ldr	r2, [r3, #24]
 8001e18:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001e1c:	1ad2      	subs	r2, r2, r3
 8001e1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e20:	619a      	str	r2, [r3, #24]
 8001e22:	e002      	b.n	8001e2a <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 8001e24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e26:	2200      	movs	r2, #0
 8001e28:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001e2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e2c:	699b      	ldr	r3, [r3, #24]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d106      	bne.n	8001e40 <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001e32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	4619      	mov	r1, r3
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f005 fd7e 	bl	800793a <HAL_PCD_DataInStageCallback>
 8001e3e:	e01b      	b.n	8001e78 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001e40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e42:	695a      	ldr	r2, [r3, #20]
 8001e44:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001e48:	441a      	add	r2, r3
 8001e4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e4c:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001e4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e50:	69da      	ldr	r2, [r3, #28]
 8001e52:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001e56:	441a      	add	r2, r3
 8001e58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e5a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001e62:	4618      	mov	r0, r3
 8001e64:	f002 fa7a 	bl	800435c <USB_EPStartXfer>
 8001e68:	e006      	b.n	8001e78 <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001e6a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001e6e:	461a      	mov	r2, r3
 8001e70:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f000 f91b 	bl	80020ae <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	b21b      	sxth	r3, r3
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	f6ff ac37 	blt.w	80016f8 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001e8a:	2300      	movs	r3, #0
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3758      	adds	r7, #88	; 0x58
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b088      	sub	sp, #32
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	60b9      	str	r1, [r7, #8]
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001ea2:	88fb      	ldrh	r3, [r7, #6]
 8001ea4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d07e      	beq.n	8001faa <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	00db      	lsls	r3, r3, #3
 8001ebe:	4413      	add	r3, r2
 8001ec0:	3302      	adds	r3, #2
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	68fa      	ldr	r2, [r7, #12]
 8001ec6:	6812      	ldr	r2, [r2, #0]
 8001ec8:	4413      	add	r3, r2
 8001eca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ece:	881b      	ldrh	r3, [r3, #0]
 8001ed0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ed4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	699a      	ldr	r2, [r3, #24]
 8001eda:	8b7b      	ldrh	r3, [r7, #26]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d306      	bcc.n	8001eee <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	699a      	ldr	r2, [r3, #24]
 8001ee4:	8b7b      	ldrh	r3, [r7, #26]
 8001ee6:	1ad2      	subs	r2, r2, r3
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	619a      	str	r2, [r3, #24]
 8001eec:	e002      	b.n	8001ef4 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	699b      	ldr	r3, [r3, #24]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d123      	bne.n	8001f44 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	461a      	mov	r2, r3
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	4413      	add	r3, r2
 8001f0a:	881b      	ldrh	r3, [r3, #0]
 8001f0c:	b29b      	uxth	r3, r3
 8001f0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f16:	833b      	strh	r3, [r7, #24]
 8001f18:	8b3b      	ldrh	r3, [r7, #24]
 8001f1a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001f1e:	833b      	strh	r3, [r7, #24]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	461a      	mov	r2, r3
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	441a      	add	r2, r3
 8001f2e:	8b3b      	ldrh	r3, [r7, #24]
 8001f30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001f44:	88fb      	ldrh	r3, [r7, #6]
 8001f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d01f      	beq.n	8001f8e <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	461a      	mov	r2, r3
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	4413      	add	r3, r2
 8001f5c:	881b      	ldrh	r3, [r3, #0]
 8001f5e:	b29b      	uxth	r3, r3
 8001f60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f68:	82fb      	strh	r3, [r7, #22]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	461a      	mov	r2, r3
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	441a      	add	r2, r3
 8001f78:	8afb      	ldrh	r3, [r7, #22]
 8001f7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f86:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001f8e:	8b7b      	ldrh	r3, [r7, #26]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	f000 8087 	beq.w	80020a4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	6818      	ldr	r0, [r3, #0]
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	6959      	ldr	r1, [r3, #20]
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	891a      	ldrh	r2, [r3, #8]
 8001fa2:	8b7b      	ldrh	r3, [r7, #26]
 8001fa4:	f003 ff0e 	bl	8005dc4 <USB_ReadPMA>
 8001fa8:	e07c      	b.n	80020a4 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	00db      	lsls	r3, r3, #3
 8001fbc:	4413      	add	r3, r2
 8001fbe:	3306      	adds	r3, #6
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	68fa      	ldr	r2, [r7, #12]
 8001fc4:	6812      	ldr	r2, [r2, #0]
 8001fc6:	4413      	add	r3, r2
 8001fc8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001fcc:	881b      	ldrh	r3, [r3, #0]
 8001fce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fd2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	699a      	ldr	r2, [r3, #24]
 8001fd8:	8b7b      	ldrh	r3, [r7, #26]
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d306      	bcc.n	8001fec <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	699a      	ldr	r2, [r3, #24]
 8001fe2:	8b7b      	ldrh	r3, [r7, #26]
 8001fe4:	1ad2      	subs	r2, r2, r3
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	619a      	str	r2, [r3, #24]
 8001fea:	e002      	b.n	8001ff2 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	699b      	ldr	r3, [r3, #24]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d123      	bne.n	8002042 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	461a      	mov	r2, r3
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	4413      	add	r3, r2
 8002008:	881b      	ldrh	r3, [r3, #0]
 800200a:	b29b      	uxth	r3, r3
 800200c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002010:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002014:	83fb      	strh	r3, [r7, #30]
 8002016:	8bfb      	ldrh	r3, [r7, #30]
 8002018:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800201c:	83fb      	strh	r3, [r7, #30]
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	461a      	mov	r2, r3
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	441a      	add	r2, r3
 800202c:	8bfb      	ldrh	r3, [r7, #30]
 800202e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002032:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002036:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800203a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800203e:	b29b      	uxth	r3, r3
 8002040:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002042:	88fb      	ldrh	r3, [r7, #6]
 8002044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002048:	2b00      	cmp	r3, #0
 800204a:	d11f      	bne.n	800208c <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	461a      	mov	r2, r3
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	4413      	add	r3, r2
 800205a:	881b      	ldrh	r3, [r3, #0]
 800205c:	b29b      	uxth	r3, r3
 800205e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002062:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002066:	83bb      	strh	r3, [r7, #28]
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	461a      	mov	r2, r3
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	441a      	add	r2, r3
 8002076:	8bbb      	ldrh	r3, [r7, #28]
 8002078:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800207c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002080:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002084:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002088:	b29b      	uxth	r3, r3
 800208a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800208c:	8b7b      	ldrh	r3, [r7, #26]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d008      	beq.n	80020a4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	6818      	ldr	r0, [r3, #0]
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	6959      	ldr	r1, [r3, #20]
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	895a      	ldrh	r2, [r3, #10]
 800209e:	8b7b      	ldrh	r3, [r7, #26]
 80020a0:	f003 fe90 	bl	8005dc4 <USB_ReadPMA>
    }
  }

  return count;
 80020a4:	8b7b      	ldrh	r3, [r7, #26]
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3720      	adds	r7, #32
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}

080020ae <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80020ae:	b580      	push	{r7, lr}
 80020b0:	b0a4      	sub	sp, #144	; 0x90
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	60f8      	str	r0, [r7, #12]
 80020b6:	60b9      	str	r1, [r7, #8]
 80020b8:	4613      	mov	r3, r2
 80020ba:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80020bc:	88fb      	ldrh	r3, [r7, #6]
 80020be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	f000 81dd 	beq.w	8002482 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020d0:	b29b      	uxth	r3, r3
 80020d2:	461a      	mov	r2, r3
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	00db      	lsls	r3, r3, #3
 80020da:	4413      	add	r3, r2
 80020dc:	3302      	adds	r3, #2
 80020de:	005b      	lsls	r3, r3, #1
 80020e0:	68fa      	ldr	r2, [r7, #12]
 80020e2:	6812      	ldr	r2, [r2, #0]
 80020e4:	4413      	add	r3, r2
 80020e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80020ea:	881b      	ldrh	r3, [r3, #0]
 80020ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020f0:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	699a      	ldr	r2, [r3, #24]
 80020f8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d907      	bls.n	8002110 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	699a      	ldr	r2, [r3, #24]
 8002104:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002108:	1ad2      	subs	r2, r2, r3
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	619a      	str	r2, [r3, #24]
 800210e:	e002      	b.n	8002116 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	2200      	movs	r2, #0
 8002114:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	699b      	ldr	r3, [r3, #24]
 800211a:	2b00      	cmp	r3, #0
 800211c:	f040 80b9 	bne.w	8002292 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	785b      	ldrb	r3, [r3, #1]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d126      	bne.n	8002176 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002136:	b29b      	uxth	r3, r3
 8002138:	461a      	mov	r2, r3
 800213a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800213c:	4413      	add	r3, r2
 800213e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	011a      	lsls	r2, r3, #4
 8002146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002148:	4413      	add	r3, r2
 800214a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800214e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002152:	881b      	ldrh	r3, [r3, #0]
 8002154:	b29b      	uxth	r3, r3
 8002156:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800215a:	b29a      	uxth	r2, r3
 800215c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800215e:	801a      	strh	r2, [r3, #0]
 8002160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002162:	881b      	ldrh	r3, [r3, #0]
 8002164:	b29b      	uxth	r3, r3
 8002166:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800216a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800216e:	b29a      	uxth	r2, r3
 8002170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002172:	801a      	strh	r2, [r3, #0]
 8002174:	e01a      	b.n	80021ac <HAL_PCD_EP_DB_Transmit+0xfe>
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	785b      	ldrb	r3, [r3, #1]
 800217a:	2b01      	cmp	r3, #1
 800217c:	d116      	bne.n	80021ac <HAL_PCD_EP_DB_Transmit+0xfe>
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	637b      	str	r3, [r7, #52]	; 0x34
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800218c:	b29b      	uxth	r3, r3
 800218e:	461a      	mov	r2, r3
 8002190:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002192:	4413      	add	r3, r2
 8002194:	637b      	str	r3, [r7, #52]	; 0x34
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	011a      	lsls	r2, r3, #4
 800219c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800219e:	4413      	add	r3, r2
 80021a0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80021a4:	633b      	str	r3, [r7, #48]	; 0x30
 80021a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021a8:	2200      	movs	r2, #0
 80021aa:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	627b      	str	r3, [r7, #36]	; 0x24
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	785b      	ldrb	r3, [r3, #1]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d126      	bne.n	8002208 <HAL_PCD_EP_DB_Transmit+0x15a>
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	61fb      	str	r3, [r7, #28]
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021c8:	b29b      	uxth	r3, r3
 80021ca:	461a      	mov	r2, r3
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	4413      	add	r3, r2
 80021d0:	61fb      	str	r3, [r7, #28]
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	011a      	lsls	r2, r3, #4
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	4413      	add	r3, r2
 80021dc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80021e0:	61bb      	str	r3, [r7, #24]
 80021e2:	69bb      	ldr	r3, [r7, #24]
 80021e4:	881b      	ldrh	r3, [r3, #0]
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021ec:	b29a      	uxth	r2, r3
 80021ee:	69bb      	ldr	r3, [r7, #24]
 80021f0:	801a      	strh	r2, [r3, #0]
 80021f2:	69bb      	ldr	r3, [r7, #24]
 80021f4:	881b      	ldrh	r3, [r3, #0]
 80021f6:	b29b      	uxth	r3, r3
 80021f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002200:	b29a      	uxth	r2, r3
 8002202:	69bb      	ldr	r3, [r7, #24]
 8002204:	801a      	strh	r2, [r3, #0]
 8002206:	e017      	b.n	8002238 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	785b      	ldrb	r3, [r3, #1]
 800220c:	2b01      	cmp	r3, #1
 800220e:	d113      	bne.n	8002238 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002218:	b29b      	uxth	r3, r3
 800221a:	461a      	mov	r2, r3
 800221c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221e:	4413      	add	r3, r2
 8002220:	627b      	str	r3, [r7, #36]	; 0x24
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	011a      	lsls	r2, r3, #4
 8002228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222a:	4413      	add	r3, r2
 800222c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002230:	623b      	str	r3, [r7, #32]
 8002232:	6a3b      	ldr	r3, [r7, #32]
 8002234:	2200      	movs	r2, #0
 8002236:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	4619      	mov	r1, r3
 800223e:	68f8      	ldr	r0, [r7, #12]
 8002240:	f005 fb7b 	bl	800793a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002244:	88fb      	ldrh	r3, [r7, #6]
 8002246:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800224a:	2b00      	cmp	r3, #0
 800224c:	f000 82fc 	beq.w	8002848 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	461a      	mov	r2, r3
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	4413      	add	r3, r2
 800225e:	881b      	ldrh	r3, [r3, #0]
 8002260:	b29b      	uxth	r3, r3
 8002262:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002266:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800226a:	82fb      	strh	r3, [r7, #22]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	461a      	mov	r2, r3
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	441a      	add	r2, r3
 800227a:	8afb      	ldrh	r3, [r7, #22]
 800227c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002280:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002284:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002288:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800228c:	b29b      	uxth	r3, r3
 800228e:	8013      	strh	r3, [r2, #0]
 8002290:	e2da      	b.n	8002848 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002292:	88fb      	ldrh	r3, [r7, #6]
 8002294:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002298:	2b00      	cmp	r3, #0
 800229a:	d021      	beq.n	80022e0 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	461a      	mov	r2, r3
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	4413      	add	r3, r2
 80022aa:	881b      	ldrh	r3, [r3, #0]
 80022ac:	b29b      	uxth	r3, r3
 80022ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022b6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	461a      	mov	r2, r3
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	441a      	add	r2, r3
 80022c8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80022cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80022d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80022d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80022d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022dc:	b29b      	uxth	r3, r3
 80022de:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	f040 82ae 	bne.w	8002848 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	695a      	ldr	r2, [r3, #20]
 80022f0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80022f4:	441a      	add	r2, r3
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	69da      	ldr	r2, [r3, #28]
 80022fe:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002302:	441a      	add	r2, r3
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	6a1a      	ldr	r2, [r3, #32]
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	691b      	ldr	r3, [r3, #16]
 8002310:	429a      	cmp	r2, r3
 8002312:	d30b      	bcc.n	800232c <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	691b      	ldr	r3, [r3, #16]
 8002318:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	6a1a      	ldr	r2, [r3, #32]
 8002320:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002324:	1ad2      	subs	r2, r2, r3
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	621a      	str	r2, [r3, #32]
 800232a:	e017      	b.n	800235c <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	6a1b      	ldr	r3, [r3, #32]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d108      	bne.n	8002346 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8002334:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002338:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	2200      	movs	r2, #0
 8002340:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002344:	e00a      	b.n	800235c <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	2200      	movs	r2, #0
 800234a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	6a1b      	ldr	r3, [r3, #32]
 8002352:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	2200      	movs	r2, #0
 800235a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	785b      	ldrb	r3, [r3, #1]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d165      	bne.n	8002430 <HAL_PCD_EP_DB_Transmit+0x382>
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	63fb      	str	r3, [r7, #60]	; 0x3c
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002372:	b29b      	uxth	r3, r3
 8002374:	461a      	mov	r2, r3
 8002376:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002378:	4413      	add	r3, r2
 800237a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	011a      	lsls	r2, r3, #4
 8002382:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002384:	4413      	add	r3, r2
 8002386:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800238a:	63bb      	str	r3, [r7, #56]	; 0x38
 800238c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800238e:	881b      	ldrh	r3, [r3, #0]
 8002390:	b29b      	uxth	r3, r3
 8002392:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002396:	b29a      	uxth	r2, r3
 8002398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800239a:	801a      	strh	r2, [r3, #0]
 800239c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80023a0:	2b3e      	cmp	r3, #62	; 0x3e
 80023a2:	d91d      	bls.n	80023e0 <HAL_PCD_EP_DB_Transmit+0x332>
 80023a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80023a8:	095b      	lsrs	r3, r3, #5
 80023aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80023ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80023b0:	f003 031f 	and.w	r3, r3, #31
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d102      	bne.n	80023be <HAL_PCD_EP_DB_Transmit+0x310>
 80023b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023ba:	3b01      	subs	r3, #1
 80023bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80023be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023c0:	881b      	ldrh	r3, [r3, #0]
 80023c2:	b29a      	uxth	r2, r3
 80023c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023c6:	b29b      	uxth	r3, r3
 80023c8:	029b      	lsls	r3, r3, #10
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	4313      	orrs	r3, r2
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023d8:	b29a      	uxth	r2, r3
 80023da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023dc:	801a      	strh	r2, [r3, #0]
 80023de:	e044      	b.n	800246a <HAL_PCD_EP_DB_Transmit+0x3bc>
 80023e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d10a      	bne.n	80023fe <HAL_PCD_EP_DB_Transmit+0x350>
 80023e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023ea:	881b      	ldrh	r3, [r3, #0]
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023f6:	b29a      	uxth	r2, r3
 80023f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023fa:	801a      	strh	r2, [r3, #0]
 80023fc:	e035      	b.n	800246a <HAL_PCD_EP_DB_Transmit+0x3bc>
 80023fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002402:	085b      	lsrs	r3, r3, #1
 8002404:	64bb      	str	r3, [r7, #72]	; 0x48
 8002406:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	2b00      	cmp	r3, #0
 8002410:	d002      	beq.n	8002418 <HAL_PCD_EP_DB_Transmit+0x36a>
 8002412:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002414:	3301      	adds	r3, #1
 8002416:	64bb      	str	r3, [r7, #72]	; 0x48
 8002418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800241a:	881b      	ldrh	r3, [r3, #0]
 800241c:	b29a      	uxth	r2, r3
 800241e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002420:	b29b      	uxth	r3, r3
 8002422:	029b      	lsls	r3, r3, #10
 8002424:	b29b      	uxth	r3, r3
 8002426:	4313      	orrs	r3, r2
 8002428:	b29a      	uxth	r2, r3
 800242a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800242c:	801a      	strh	r2, [r3, #0]
 800242e:	e01c      	b.n	800246a <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	785b      	ldrb	r3, [r3, #1]
 8002434:	2b01      	cmp	r3, #1
 8002436:	d118      	bne.n	800246a <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	647b      	str	r3, [r7, #68]	; 0x44
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002446:	b29b      	uxth	r3, r3
 8002448:	461a      	mov	r2, r3
 800244a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800244c:	4413      	add	r3, r2
 800244e:	647b      	str	r3, [r7, #68]	; 0x44
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	011a      	lsls	r2, r3, #4
 8002456:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002458:	4413      	add	r3, r2
 800245a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800245e:	643b      	str	r3, [r7, #64]	; 0x40
 8002460:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002464:	b29a      	uxth	r2, r3
 8002466:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002468:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	6818      	ldr	r0, [r3, #0]
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	6959      	ldr	r1, [r3, #20]
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	891a      	ldrh	r2, [r3, #8]
 8002476:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800247a:	b29b      	uxth	r3, r3
 800247c:	f003 fc5d 	bl	8005d3a <USB_WritePMA>
 8002480:	e1e2      	b.n	8002848 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800248a:	b29b      	uxth	r3, r3
 800248c:	461a      	mov	r2, r3
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	00db      	lsls	r3, r3, #3
 8002494:	4413      	add	r3, r2
 8002496:	3306      	adds	r3, #6
 8002498:	005b      	lsls	r3, r3, #1
 800249a:	68fa      	ldr	r2, [r7, #12]
 800249c:	6812      	ldr	r2, [r2, #0]
 800249e:	4413      	add	r3, r2
 80024a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024a4:	881b      	ldrh	r3, [r3, #0]
 80024a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024aa:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	699a      	ldr	r2, [r3, #24]
 80024b2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d307      	bcc.n	80024ca <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	699a      	ldr	r2, [r3, #24]
 80024be:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80024c2:	1ad2      	subs	r2, r2, r3
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	619a      	str	r2, [r3, #24]
 80024c8:	e002      	b.n	80024d0 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	2200      	movs	r2, #0
 80024ce:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	699b      	ldr	r3, [r3, #24]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	f040 80c0 	bne.w	800265a <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	785b      	ldrb	r3, [r3, #1]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d126      	bne.n	8002530 <HAL_PCD_EP_DB_Transmit+0x482>
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	461a      	mov	r2, r3
 80024f4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80024f6:	4413      	add	r3, r2
 80024f8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	011a      	lsls	r2, r3, #4
 8002500:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002502:	4413      	add	r3, r2
 8002504:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002508:	67bb      	str	r3, [r7, #120]	; 0x78
 800250a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800250c:	881b      	ldrh	r3, [r3, #0]
 800250e:	b29b      	uxth	r3, r3
 8002510:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002514:	b29a      	uxth	r2, r3
 8002516:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002518:	801a      	strh	r2, [r3, #0]
 800251a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800251c:	881b      	ldrh	r3, [r3, #0]
 800251e:	b29b      	uxth	r3, r3
 8002520:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002524:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002528:	b29a      	uxth	r2, r3
 800252a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800252c:	801a      	strh	r2, [r3, #0]
 800252e:	e01a      	b.n	8002566 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	785b      	ldrb	r3, [r3, #1]
 8002534:	2b01      	cmp	r3, #1
 8002536:	d116      	bne.n	8002566 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	667b      	str	r3, [r7, #100]	; 0x64
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002546:	b29b      	uxth	r3, r3
 8002548:	461a      	mov	r2, r3
 800254a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800254c:	4413      	add	r3, r2
 800254e:	667b      	str	r3, [r7, #100]	; 0x64
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	011a      	lsls	r2, r3, #4
 8002556:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002558:	4413      	add	r3, r2
 800255a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800255e:	663b      	str	r3, [r7, #96]	; 0x60
 8002560:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002562:	2200      	movs	r2, #0
 8002564:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	677b      	str	r3, [r7, #116]	; 0x74
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	785b      	ldrb	r3, [r3, #1]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d12b      	bne.n	80025cc <HAL_PCD_EP_DB_Transmit+0x51e>
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	66fb      	str	r3, [r7, #108]	; 0x6c
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002582:	b29b      	uxth	r3, r3
 8002584:	461a      	mov	r2, r3
 8002586:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002588:	4413      	add	r3, r2
 800258a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	011a      	lsls	r2, r3, #4
 8002592:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002594:	4413      	add	r3, r2
 8002596:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800259a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800259e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025a2:	881b      	ldrh	r3, [r3, #0]
 80025a4:	b29b      	uxth	r3, r3
 80025a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025aa:	b29a      	uxth	r2, r3
 80025ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025b0:	801a      	strh	r2, [r3, #0]
 80025b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025b6:	881b      	ldrh	r3, [r3, #0]
 80025b8:	b29b      	uxth	r3, r3
 80025ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025c2:	b29a      	uxth	r2, r3
 80025c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025c8:	801a      	strh	r2, [r3, #0]
 80025ca:	e017      	b.n	80025fc <HAL_PCD_EP_DB_Transmit+0x54e>
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	785b      	ldrb	r3, [r3, #1]
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d113      	bne.n	80025fc <HAL_PCD_EP_DB_Transmit+0x54e>
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025dc:	b29b      	uxth	r3, r3
 80025de:	461a      	mov	r2, r3
 80025e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025e2:	4413      	add	r3, r2
 80025e4:	677b      	str	r3, [r7, #116]	; 0x74
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	011a      	lsls	r2, r3, #4
 80025ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025ee:	4413      	add	r3, r2
 80025f0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80025f4:	673b      	str	r3, [r7, #112]	; 0x70
 80025f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025f8:	2200      	movs	r2, #0
 80025fa:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	4619      	mov	r1, r3
 8002602:	68f8      	ldr	r0, [r7, #12]
 8002604:	f005 f999 	bl	800793a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002608:	88fb      	ldrh	r3, [r7, #6]
 800260a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800260e:	2b00      	cmp	r3, #0
 8002610:	f040 811a 	bne.w	8002848 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	461a      	mov	r2, r3
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	4413      	add	r3, r2
 8002622:	881b      	ldrh	r3, [r3, #0]
 8002624:	b29b      	uxth	r3, r3
 8002626:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800262a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800262e:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	461a      	mov	r2, r3
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	441a      	add	r2, r3
 8002640:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8002644:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002648:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800264c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002650:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002654:	b29b      	uxth	r3, r3
 8002656:	8013      	strh	r3, [r2, #0]
 8002658:	e0f6      	b.n	8002848 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800265a:	88fb      	ldrh	r3, [r7, #6]
 800265c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d121      	bne.n	80026a8 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	461a      	mov	r2, r3
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	4413      	add	r3, r2
 8002672:	881b      	ldrh	r3, [r3, #0]
 8002674:	b29b      	uxth	r3, r3
 8002676:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800267a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800267e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	461a      	mov	r2, r3
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	441a      	add	r2, r3
 8002690:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002694:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002698:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800269c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	f040 80ca 	bne.w	8002848 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	695a      	ldr	r2, [r3, #20]
 80026b8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80026bc:	441a      	add	r2, r3
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	69da      	ldr	r2, [r3, #28]
 80026c6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80026ca:	441a      	add	r2, r3
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	6a1a      	ldr	r2, [r3, #32]
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	691b      	ldr	r3, [r3, #16]
 80026d8:	429a      	cmp	r2, r3
 80026da:	d30b      	bcc.n	80026f4 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	691b      	ldr	r3, [r3, #16]
 80026e0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	6a1a      	ldr	r2, [r3, #32]
 80026e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80026ec:	1ad2      	subs	r2, r2, r3
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	621a      	str	r2, [r3, #32]
 80026f2:	e017      	b.n	8002724 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	6a1b      	ldr	r3, [r3, #32]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d108      	bne.n	800270e <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80026fc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002700:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	2200      	movs	r2, #0
 8002708:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800270c:	e00a      	b.n	8002724 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	6a1b      	ldr	r3, [r3, #32]
 8002712:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	2200      	movs	r2, #0
 800271a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	2200      	movs	r2, #0
 8002720:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	657b      	str	r3, [r7, #84]	; 0x54
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	785b      	ldrb	r3, [r3, #1]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d165      	bne.n	80027fe <HAL_PCD_EP_DB_Transmit+0x750>
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002740:	b29b      	uxth	r3, r3
 8002742:	461a      	mov	r2, r3
 8002744:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002746:	4413      	add	r3, r2
 8002748:	65fb      	str	r3, [r7, #92]	; 0x5c
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	781b      	ldrb	r3, [r3, #0]
 800274e:	011a      	lsls	r2, r3, #4
 8002750:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002752:	4413      	add	r3, r2
 8002754:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002758:	65bb      	str	r3, [r7, #88]	; 0x58
 800275a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800275c:	881b      	ldrh	r3, [r3, #0]
 800275e:	b29b      	uxth	r3, r3
 8002760:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002764:	b29a      	uxth	r2, r3
 8002766:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002768:	801a      	strh	r2, [r3, #0]
 800276a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800276e:	2b3e      	cmp	r3, #62	; 0x3e
 8002770:	d91d      	bls.n	80027ae <HAL_PCD_EP_DB_Transmit+0x700>
 8002772:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002776:	095b      	lsrs	r3, r3, #5
 8002778:	66bb      	str	r3, [r7, #104]	; 0x68
 800277a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800277e:	f003 031f 	and.w	r3, r3, #31
 8002782:	2b00      	cmp	r3, #0
 8002784:	d102      	bne.n	800278c <HAL_PCD_EP_DB_Transmit+0x6de>
 8002786:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002788:	3b01      	subs	r3, #1
 800278a:	66bb      	str	r3, [r7, #104]	; 0x68
 800278c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800278e:	881b      	ldrh	r3, [r3, #0]
 8002790:	b29a      	uxth	r2, r3
 8002792:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002794:	b29b      	uxth	r3, r3
 8002796:	029b      	lsls	r3, r3, #10
 8002798:	b29b      	uxth	r3, r3
 800279a:	4313      	orrs	r3, r2
 800279c:	b29b      	uxth	r3, r3
 800279e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027a6:	b29a      	uxth	r2, r3
 80027a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027aa:	801a      	strh	r2, [r3, #0]
 80027ac:	e041      	b.n	8002832 <HAL_PCD_EP_DB_Transmit+0x784>
 80027ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d10a      	bne.n	80027cc <HAL_PCD_EP_DB_Transmit+0x71e>
 80027b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027b8:	881b      	ldrh	r3, [r3, #0]
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027c4:	b29a      	uxth	r2, r3
 80027c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027c8:	801a      	strh	r2, [r3, #0]
 80027ca:	e032      	b.n	8002832 <HAL_PCD_EP_DB_Transmit+0x784>
 80027cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027d0:	085b      	lsrs	r3, r3, #1
 80027d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80027d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027d8:	f003 0301 	and.w	r3, r3, #1
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d002      	beq.n	80027e6 <HAL_PCD_EP_DB_Transmit+0x738>
 80027e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027e2:	3301      	adds	r3, #1
 80027e4:	66bb      	str	r3, [r7, #104]	; 0x68
 80027e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027e8:	881b      	ldrh	r3, [r3, #0]
 80027ea:	b29a      	uxth	r2, r3
 80027ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	029b      	lsls	r3, r3, #10
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	4313      	orrs	r3, r2
 80027f6:	b29a      	uxth	r2, r3
 80027f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027fa:	801a      	strh	r2, [r3, #0]
 80027fc:	e019      	b.n	8002832 <HAL_PCD_EP_DB_Transmit+0x784>
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	785b      	ldrb	r3, [r3, #1]
 8002802:	2b01      	cmp	r3, #1
 8002804:	d115      	bne.n	8002832 <HAL_PCD_EP_DB_Transmit+0x784>
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800280e:	b29b      	uxth	r3, r3
 8002810:	461a      	mov	r2, r3
 8002812:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002814:	4413      	add	r3, r2
 8002816:	657b      	str	r3, [r7, #84]	; 0x54
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	011a      	lsls	r2, r3, #4
 800281e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002820:	4413      	add	r3, r2
 8002822:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002826:	653b      	str	r3, [r7, #80]	; 0x50
 8002828:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800282c:	b29a      	uxth	r2, r3
 800282e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002830:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	6818      	ldr	r0, [r3, #0]
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	6959      	ldr	r1, [r3, #20]
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	895a      	ldrh	r2, [r3, #10]
 800283e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002842:	b29b      	uxth	r3, r3
 8002844:	f003 fa79 	bl	8005d3a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	461a      	mov	r2, r3
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	4413      	add	r3, r2
 8002856:	881b      	ldrh	r3, [r3, #0]
 8002858:	b29b      	uxth	r3, r3
 800285a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800285e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002862:	82bb      	strh	r3, [r7, #20]
 8002864:	8abb      	ldrh	r3, [r7, #20]
 8002866:	f083 0310 	eor.w	r3, r3, #16
 800286a:	82bb      	strh	r3, [r7, #20]
 800286c:	8abb      	ldrh	r3, [r7, #20]
 800286e:	f083 0320 	eor.w	r3, r3, #32
 8002872:	82bb      	strh	r3, [r7, #20]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	461a      	mov	r2, r3
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	441a      	add	r2, r3
 8002882:	8abb      	ldrh	r3, [r7, #20]
 8002884:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002888:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800288c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002890:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002894:	b29b      	uxth	r3, r3
 8002896:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002898:	2300      	movs	r3, #0
}
 800289a:	4618      	mov	r0, r3
 800289c:	3790      	adds	r7, #144	; 0x90
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}

080028a2 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80028a2:	b480      	push	{r7}
 80028a4:	b087      	sub	sp, #28
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	60f8      	str	r0, [r7, #12]
 80028aa:	607b      	str	r3, [r7, #4]
 80028ac:	460b      	mov	r3, r1
 80028ae:	817b      	strh	r3, [r7, #10]
 80028b0:	4613      	mov	r3, r2
 80028b2:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80028b4:	897b      	ldrh	r3, [r7, #10]
 80028b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028ba:	b29b      	uxth	r3, r3
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d00b      	beq.n	80028d8 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028c0:	897b      	ldrh	r3, [r7, #10]
 80028c2:	f003 0307 	and.w	r3, r3, #7
 80028c6:	1c5a      	adds	r2, r3, #1
 80028c8:	4613      	mov	r3, r2
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	4413      	add	r3, r2
 80028ce:	00db      	lsls	r3, r3, #3
 80028d0:	68fa      	ldr	r2, [r7, #12]
 80028d2:	4413      	add	r3, r2
 80028d4:	617b      	str	r3, [r7, #20]
 80028d6:	e009      	b.n	80028ec <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80028d8:	897a      	ldrh	r2, [r7, #10]
 80028da:	4613      	mov	r3, r2
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	4413      	add	r3, r2
 80028e0:	00db      	lsls	r3, r3, #3
 80028e2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80028e6:	68fa      	ldr	r2, [r7, #12]
 80028e8:	4413      	add	r3, r2
 80028ea:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80028ec:	893b      	ldrh	r3, [r7, #8]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d107      	bne.n	8002902 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	2200      	movs	r2, #0
 80028f6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	b29a      	uxth	r2, r3
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	80da      	strh	r2, [r3, #6]
 8002900:	e00b      	b.n	800291a <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	2201      	movs	r2, #1
 8002906:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	b29a      	uxth	r2, r3
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	0c1b      	lsrs	r3, r3, #16
 8002914:	b29a      	uxth	r2, r3
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800291a:	2300      	movs	r3, #0
}
 800291c:	4618      	mov	r0, r3
 800291e:	371c      	adds	r7, #28
 8002920:	46bd      	mov	sp, r7
 8002922:	bc80      	pop	{r7}
 8002924:	4770      	bx	lr
	...

08002928 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b086      	sub	sp, #24
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d101      	bne.n	800293a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e272      	b.n	8002e20 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0301 	and.w	r3, r3, #1
 8002942:	2b00      	cmp	r3, #0
 8002944:	f000 8087 	beq.w	8002a56 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002948:	4b92      	ldr	r3, [pc, #584]	; (8002b94 <HAL_RCC_OscConfig+0x26c>)
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f003 030c 	and.w	r3, r3, #12
 8002950:	2b04      	cmp	r3, #4
 8002952:	d00c      	beq.n	800296e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002954:	4b8f      	ldr	r3, [pc, #572]	; (8002b94 <HAL_RCC_OscConfig+0x26c>)
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f003 030c 	and.w	r3, r3, #12
 800295c:	2b08      	cmp	r3, #8
 800295e:	d112      	bne.n	8002986 <HAL_RCC_OscConfig+0x5e>
 8002960:	4b8c      	ldr	r3, [pc, #560]	; (8002b94 <HAL_RCC_OscConfig+0x26c>)
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002968:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800296c:	d10b      	bne.n	8002986 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800296e:	4b89      	ldr	r3, [pc, #548]	; (8002b94 <HAL_RCC_OscConfig+0x26c>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d06c      	beq.n	8002a54 <HAL_RCC_OscConfig+0x12c>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d168      	bne.n	8002a54 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e24c      	b.n	8002e20 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800298e:	d106      	bne.n	800299e <HAL_RCC_OscConfig+0x76>
 8002990:	4b80      	ldr	r3, [pc, #512]	; (8002b94 <HAL_RCC_OscConfig+0x26c>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a7f      	ldr	r2, [pc, #508]	; (8002b94 <HAL_RCC_OscConfig+0x26c>)
 8002996:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800299a:	6013      	str	r3, [r2, #0]
 800299c:	e02e      	b.n	80029fc <HAL_RCC_OscConfig+0xd4>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d10c      	bne.n	80029c0 <HAL_RCC_OscConfig+0x98>
 80029a6:	4b7b      	ldr	r3, [pc, #492]	; (8002b94 <HAL_RCC_OscConfig+0x26c>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a7a      	ldr	r2, [pc, #488]	; (8002b94 <HAL_RCC_OscConfig+0x26c>)
 80029ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029b0:	6013      	str	r3, [r2, #0]
 80029b2:	4b78      	ldr	r3, [pc, #480]	; (8002b94 <HAL_RCC_OscConfig+0x26c>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a77      	ldr	r2, [pc, #476]	; (8002b94 <HAL_RCC_OscConfig+0x26c>)
 80029b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029bc:	6013      	str	r3, [r2, #0]
 80029be:	e01d      	b.n	80029fc <HAL_RCC_OscConfig+0xd4>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029c8:	d10c      	bne.n	80029e4 <HAL_RCC_OscConfig+0xbc>
 80029ca:	4b72      	ldr	r3, [pc, #456]	; (8002b94 <HAL_RCC_OscConfig+0x26c>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a71      	ldr	r2, [pc, #452]	; (8002b94 <HAL_RCC_OscConfig+0x26c>)
 80029d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029d4:	6013      	str	r3, [r2, #0]
 80029d6:	4b6f      	ldr	r3, [pc, #444]	; (8002b94 <HAL_RCC_OscConfig+0x26c>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a6e      	ldr	r2, [pc, #440]	; (8002b94 <HAL_RCC_OscConfig+0x26c>)
 80029dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029e0:	6013      	str	r3, [r2, #0]
 80029e2:	e00b      	b.n	80029fc <HAL_RCC_OscConfig+0xd4>
 80029e4:	4b6b      	ldr	r3, [pc, #428]	; (8002b94 <HAL_RCC_OscConfig+0x26c>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a6a      	ldr	r2, [pc, #424]	; (8002b94 <HAL_RCC_OscConfig+0x26c>)
 80029ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029ee:	6013      	str	r3, [r2, #0]
 80029f0:	4b68      	ldr	r3, [pc, #416]	; (8002b94 <HAL_RCC_OscConfig+0x26c>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a67      	ldr	r2, [pc, #412]	; (8002b94 <HAL_RCC_OscConfig+0x26c>)
 80029f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029fa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d013      	beq.n	8002a2c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a04:	f7fd ff54 	bl	80008b0 <HAL_GetTick>
 8002a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a0a:	e008      	b.n	8002a1e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a0c:	f7fd ff50 	bl	80008b0 <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	2b64      	cmp	r3, #100	; 0x64
 8002a18:	d901      	bls.n	8002a1e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e200      	b.n	8002e20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a1e:	4b5d      	ldr	r3, [pc, #372]	; (8002b94 <HAL_RCC_OscConfig+0x26c>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d0f0      	beq.n	8002a0c <HAL_RCC_OscConfig+0xe4>
 8002a2a:	e014      	b.n	8002a56 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a2c:	f7fd ff40 	bl	80008b0 <HAL_GetTick>
 8002a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a32:	e008      	b.n	8002a46 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a34:	f7fd ff3c 	bl	80008b0 <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	2b64      	cmp	r3, #100	; 0x64
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e1ec      	b.n	8002e20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a46:	4b53      	ldr	r3, [pc, #332]	; (8002b94 <HAL_RCC_OscConfig+0x26c>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d1f0      	bne.n	8002a34 <HAL_RCC_OscConfig+0x10c>
 8002a52:	e000      	b.n	8002a56 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0302 	and.w	r3, r3, #2
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d063      	beq.n	8002b2a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a62:	4b4c      	ldr	r3, [pc, #304]	; (8002b94 <HAL_RCC_OscConfig+0x26c>)
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f003 030c 	and.w	r3, r3, #12
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d00b      	beq.n	8002a86 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002a6e:	4b49      	ldr	r3, [pc, #292]	; (8002b94 <HAL_RCC_OscConfig+0x26c>)
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f003 030c 	and.w	r3, r3, #12
 8002a76:	2b08      	cmp	r3, #8
 8002a78:	d11c      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x18c>
 8002a7a:	4b46      	ldr	r3, [pc, #280]	; (8002b94 <HAL_RCC_OscConfig+0x26c>)
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d116      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a86:	4b43      	ldr	r3, [pc, #268]	; (8002b94 <HAL_RCC_OscConfig+0x26c>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0302 	and.w	r3, r3, #2
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d005      	beq.n	8002a9e <HAL_RCC_OscConfig+0x176>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	691b      	ldr	r3, [r3, #16]
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d001      	beq.n	8002a9e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e1c0      	b.n	8002e20 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a9e:	4b3d      	ldr	r3, [pc, #244]	; (8002b94 <HAL_RCC_OscConfig+0x26c>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	695b      	ldr	r3, [r3, #20]
 8002aaa:	00db      	lsls	r3, r3, #3
 8002aac:	4939      	ldr	r1, [pc, #228]	; (8002b94 <HAL_RCC_OscConfig+0x26c>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ab2:	e03a      	b.n	8002b2a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	691b      	ldr	r3, [r3, #16]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d020      	beq.n	8002afe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002abc:	4b36      	ldr	r3, [pc, #216]	; (8002b98 <HAL_RCC_OscConfig+0x270>)
 8002abe:	2201      	movs	r2, #1
 8002ac0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ac2:	f7fd fef5 	bl	80008b0 <HAL_GetTick>
 8002ac6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ac8:	e008      	b.n	8002adc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002aca:	f7fd fef1 	bl	80008b0 <HAL_GetTick>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d901      	bls.n	8002adc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e1a1      	b.n	8002e20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002adc:	4b2d      	ldr	r3, [pc, #180]	; (8002b94 <HAL_RCC_OscConfig+0x26c>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0302 	and.w	r3, r3, #2
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d0f0      	beq.n	8002aca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ae8:	4b2a      	ldr	r3, [pc, #168]	; (8002b94 <HAL_RCC_OscConfig+0x26c>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	695b      	ldr	r3, [r3, #20]
 8002af4:	00db      	lsls	r3, r3, #3
 8002af6:	4927      	ldr	r1, [pc, #156]	; (8002b94 <HAL_RCC_OscConfig+0x26c>)
 8002af8:	4313      	orrs	r3, r2
 8002afa:	600b      	str	r3, [r1, #0]
 8002afc:	e015      	b.n	8002b2a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002afe:	4b26      	ldr	r3, [pc, #152]	; (8002b98 <HAL_RCC_OscConfig+0x270>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b04:	f7fd fed4 	bl	80008b0 <HAL_GetTick>
 8002b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b0a:	e008      	b.n	8002b1e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b0c:	f7fd fed0 	bl	80008b0 <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d901      	bls.n	8002b1e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e180      	b.n	8002e20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b1e:	4b1d      	ldr	r3, [pc, #116]	; (8002b94 <HAL_RCC_OscConfig+0x26c>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0302 	and.w	r3, r3, #2
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d1f0      	bne.n	8002b0c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0308 	and.w	r3, r3, #8
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d03a      	beq.n	8002bac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	699b      	ldr	r3, [r3, #24]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d019      	beq.n	8002b72 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b3e:	4b17      	ldr	r3, [pc, #92]	; (8002b9c <HAL_RCC_OscConfig+0x274>)
 8002b40:	2201      	movs	r2, #1
 8002b42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b44:	f7fd feb4 	bl	80008b0 <HAL_GetTick>
 8002b48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b4a:	e008      	b.n	8002b5e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b4c:	f7fd feb0 	bl	80008b0 <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d901      	bls.n	8002b5e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e160      	b.n	8002e20 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b5e:	4b0d      	ldr	r3, [pc, #52]	; (8002b94 <HAL_RCC_OscConfig+0x26c>)
 8002b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b62:	f003 0302 	and.w	r3, r3, #2
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d0f0      	beq.n	8002b4c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002b6a:	2001      	movs	r0, #1
 8002b6c:	f000 fa9c 	bl	80030a8 <RCC_Delay>
 8002b70:	e01c      	b.n	8002bac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b72:	4b0a      	ldr	r3, [pc, #40]	; (8002b9c <HAL_RCC_OscConfig+0x274>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b78:	f7fd fe9a 	bl	80008b0 <HAL_GetTick>
 8002b7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b7e:	e00f      	b.n	8002ba0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b80:	f7fd fe96 	bl	80008b0 <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d908      	bls.n	8002ba0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e146      	b.n	8002e20 <HAL_RCC_OscConfig+0x4f8>
 8002b92:	bf00      	nop
 8002b94:	40021000 	.word	0x40021000
 8002b98:	42420000 	.word	0x42420000
 8002b9c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ba0:	4b92      	ldr	r3, [pc, #584]	; (8002dec <HAL_RCC_OscConfig+0x4c4>)
 8002ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba4:	f003 0302 	and.w	r3, r3, #2
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d1e9      	bne.n	8002b80 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0304 	and.w	r3, r3, #4
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	f000 80a6 	beq.w	8002d06 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bbe:	4b8b      	ldr	r3, [pc, #556]	; (8002dec <HAL_RCC_OscConfig+0x4c4>)
 8002bc0:	69db      	ldr	r3, [r3, #28]
 8002bc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d10d      	bne.n	8002be6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bca:	4b88      	ldr	r3, [pc, #544]	; (8002dec <HAL_RCC_OscConfig+0x4c4>)
 8002bcc:	69db      	ldr	r3, [r3, #28]
 8002bce:	4a87      	ldr	r2, [pc, #540]	; (8002dec <HAL_RCC_OscConfig+0x4c4>)
 8002bd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bd4:	61d3      	str	r3, [r2, #28]
 8002bd6:	4b85      	ldr	r3, [pc, #532]	; (8002dec <HAL_RCC_OscConfig+0x4c4>)
 8002bd8:	69db      	ldr	r3, [r3, #28]
 8002bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bde:	60bb      	str	r3, [r7, #8]
 8002be0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002be2:	2301      	movs	r3, #1
 8002be4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002be6:	4b82      	ldr	r3, [pc, #520]	; (8002df0 <HAL_RCC_OscConfig+0x4c8>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d118      	bne.n	8002c24 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bf2:	4b7f      	ldr	r3, [pc, #508]	; (8002df0 <HAL_RCC_OscConfig+0x4c8>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a7e      	ldr	r2, [pc, #504]	; (8002df0 <HAL_RCC_OscConfig+0x4c8>)
 8002bf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bfe:	f7fd fe57 	bl	80008b0 <HAL_GetTick>
 8002c02:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c04:	e008      	b.n	8002c18 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c06:	f7fd fe53 	bl	80008b0 <HAL_GetTick>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	1ad3      	subs	r3, r2, r3
 8002c10:	2b64      	cmp	r3, #100	; 0x64
 8002c12:	d901      	bls.n	8002c18 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002c14:	2303      	movs	r3, #3
 8002c16:	e103      	b.n	8002e20 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c18:	4b75      	ldr	r3, [pc, #468]	; (8002df0 <HAL_RCC_OscConfig+0x4c8>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d0f0      	beq.n	8002c06 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d106      	bne.n	8002c3a <HAL_RCC_OscConfig+0x312>
 8002c2c:	4b6f      	ldr	r3, [pc, #444]	; (8002dec <HAL_RCC_OscConfig+0x4c4>)
 8002c2e:	6a1b      	ldr	r3, [r3, #32]
 8002c30:	4a6e      	ldr	r2, [pc, #440]	; (8002dec <HAL_RCC_OscConfig+0x4c4>)
 8002c32:	f043 0301 	orr.w	r3, r3, #1
 8002c36:	6213      	str	r3, [r2, #32]
 8002c38:	e02d      	b.n	8002c96 <HAL_RCC_OscConfig+0x36e>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d10c      	bne.n	8002c5c <HAL_RCC_OscConfig+0x334>
 8002c42:	4b6a      	ldr	r3, [pc, #424]	; (8002dec <HAL_RCC_OscConfig+0x4c4>)
 8002c44:	6a1b      	ldr	r3, [r3, #32]
 8002c46:	4a69      	ldr	r2, [pc, #420]	; (8002dec <HAL_RCC_OscConfig+0x4c4>)
 8002c48:	f023 0301 	bic.w	r3, r3, #1
 8002c4c:	6213      	str	r3, [r2, #32]
 8002c4e:	4b67      	ldr	r3, [pc, #412]	; (8002dec <HAL_RCC_OscConfig+0x4c4>)
 8002c50:	6a1b      	ldr	r3, [r3, #32]
 8002c52:	4a66      	ldr	r2, [pc, #408]	; (8002dec <HAL_RCC_OscConfig+0x4c4>)
 8002c54:	f023 0304 	bic.w	r3, r3, #4
 8002c58:	6213      	str	r3, [r2, #32]
 8002c5a:	e01c      	b.n	8002c96 <HAL_RCC_OscConfig+0x36e>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	2b05      	cmp	r3, #5
 8002c62:	d10c      	bne.n	8002c7e <HAL_RCC_OscConfig+0x356>
 8002c64:	4b61      	ldr	r3, [pc, #388]	; (8002dec <HAL_RCC_OscConfig+0x4c4>)
 8002c66:	6a1b      	ldr	r3, [r3, #32]
 8002c68:	4a60      	ldr	r2, [pc, #384]	; (8002dec <HAL_RCC_OscConfig+0x4c4>)
 8002c6a:	f043 0304 	orr.w	r3, r3, #4
 8002c6e:	6213      	str	r3, [r2, #32]
 8002c70:	4b5e      	ldr	r3, [pc, #376]	; (8002dec <HAL_RCC_OscConfig+0x4c4>)
 8002c72:	6a1b      	ldr	r3, [r3, #32]
 8002c74:	4a5d      	ldr	r2, [pc, #372]	; (8002dec <HAL_RCC_OscConfig+0x4c4>)
 8002c76:	f043 0301 	orr.w	r3, r3, #1
 8002c7a:	6213      	str	r3, [r2, #32]
 8002c7c:	e00b      	b.n	8002c96 <HAL_RCC_OscConfig+0x36e>
 8002c7e:	4b5b      	ldr	r3, [pc, #364]	; (8002dec <HAL_RCC_OscConfig+0x4c4>)
 8002c80:	6a1b      	ldr	r3, [r3, #32]
 8002c82:	4a5a      	ldr	r2, [pc, #360]	; (8002dec <HAL_RCC_OscConfig+0x4c4>)
 8002c84:	f023 0301 	bic.w	r3, r3, #1
 8002c88:	6213      	str	r3, [r2, #32]
 8002c8a:	4b58      	ldr	r3, [pc, #352]	; (8002dec <HAL_RCC_OscConfig+0x4c4>)
 8002c8c:	6a1b      	ldr	r3, [r3, #32]
 8002c8e:	4a57      	ldr	r2, [pc, #348]	; (8002dec <HAL_RCC_OscConfig+0x4c4>)
 8002c90:	f023 0304 	bic.w	r3, r3, #4
 8002c94:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d015      	beq.n	8002cca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c9e:	f7fd fe07 	bl	80008b0 <HAL_GetTick>
 8002ca2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ca4:	e00a      	b.n	8002cbc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ca6:	f7fd fe03 	bl	80008b0 <HAL_GetTick>
 8002caa:	4602      	mov	r2, r0
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d901      	bls.n	8002cbc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	e0b1      	b.n	8002e20 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cbc:	4b4b      	ldr	r3, [pc, #300]	; (8002dec <HAL_RCC_OscConfig+0x4c4>)
 8002cbe:	6a1b      	ldr	r3, [r3, #32]
 8002cc0:	f003 0302 	and.w	r3, r3, #2
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d0ee      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x37e>
 8002cc8:	e014      	b.n	8002cf4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cca:	f7fd fdf1 	bl	80008b0 <HAL_GetTick>
 8002cce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cd0:	e00a      	b.n	8002ce8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cd2:	f7fd fded 	bl	80008b0 <HAL_GetTick>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d901      	bls.n	8002ce8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	e09b      	b.n	8002e20 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ce8:	4b40      	ldr	r3, [pc, #256]	; (8002dec <HAL_RCC_OscConfig+0x4c4>)
 8002cea:	6a1b      	ldr	r3, [r3, #32]
 8002cec:	f003 0302 	and.w	r3, r3, #2
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d1ee      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002cf4:	7dfb      	ldrb	r3, [r7, #23]
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d105      	bne.n	8002d06 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cfa:	4b3c      	ldr	r3, [pc, #240]	; (8002dec <HAL_RCC_OscConfig+0x4c4>)
 8002cfc:	69db      	ldr	r3, [r3, #28]
 8002cfe:	4a3b      	ldr	r2, [pc, #236]	; (8002dec <HAL_RCC_OscConfig+0x4c4>)
 8002d00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d04:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	69db      	ldr	r3, [r3, #28]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	f000 8087 	beq.w	8002e1e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d10:	4b36      	ldr	r3, [pc, #216]	; (8002dec <HAL_RCC_OscConfig+0x4c4>)
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f003 030c 	and.w	r3, r3, #12
 8002d18:	2b08      	cmp	r3, #8
 8002d1a:	d061      	beq.n	8002de0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	69db      	ldr	r3, [r3, #28]
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d146      	bne.n	8002db2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d24:	4b33      	ldr	r3, [pc, #204]	; (8002df4 <HAL_RCC_OscConfig+0x4cc>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d2a:	f7fd fdc1 	bl	80008b0 <HAL_GetTick>
 8002d2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d30:	e008      	b.n	8002d44 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d32:	f7fd fdbd 	bl	80008b0 <HAL_GetTick>
 8002d36:	4602      	mov	r2, r0
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d901      	bls.n	8002d44 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002d40:	2303      	movs	r3, #3
 8002d42:	e06d      	b.n	8002e20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d44:	4b29      	ldr	r3, [pc, #164]	; (8002dec <HAL_RCC_OscConfig+0x4c4>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d1f0      	bne.n	8002d32 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6a1b      	ldr	r3, [r3, #32]
 8002d54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d58:	d108      	bne.n	8002d6c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002d5a:	4b24      	ldr	r3, [pc, #144]	; (8002dec <HAL_RCC_OscConfig+0x4c4>)
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	4921      	ldr	r1, [pc, #132]	; (8002dec <HAL_RCC_OscConfig+0x4c4>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d6c:	4b1f      	ldr	r3, [pc, #124]	; (8002dec <HAL_RCC_OscConfig+0x4c4>)
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6a19      	ldr	r1, [r3, #32]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7c:	430b      	orrs	r3, r1
 8002d7e:	491b      	ldr	r1, [pc, #108]	; (8002dec <HAL_RCC_OscConfig+0x4c4>)
 8002d80:	4313      	orrs	r3, r2
 8002d82:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d84:	4b1b      	ldr	r3, [pc, #108]	; (8002df4 <HAL_RCC_OscConfig+0x4cc>)
 8002d86:	2201      	movs	r2, #1
 8002d88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d8a:	f7fd fd91 	bl	80008b0 <HAL_GetTick>
 8002d8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d90:	e008      	b.n	8002da4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d92:	f7fd fd8d 	bl	80008b0 <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d901      	bls.n	8002da4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	e03d      	b.n	8002e20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002da4:	4b11      	ldr	r3, [pc, #68]	; (8002dec <HAL_RCC_OscConfig+0x4c4>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d0f0      	beq.n	8002d92 <HAL_RCC_OscConfig+0x46a>
 8002db0:	e035      	b.n	8002e1e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002db2:	4b10      	ldr	r3, [pc, #64]	; (8002df4 <HAL_RCC_OscConfig+0x4cc>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db8:	f7fd fd7a 	bl	80008b0 <HAL_GetTick>
 8002dbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dbe:	e008      	b.n	8002dd2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dc0:	f7fd fd76 	bl	80008b0 <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d901      	bls.n	8002dd2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e026      	b.n	8002e20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dd2:	4b06      	ldr	r3, [pc, #24]	; (8002dec <HAL_RCC_OscConfig+0x4c4>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d1f0      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x498>
 8002dde:	e01e      	b.n	8002e1e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	69db      	ldr	r3, [r3, #28]
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d107      	bne.n	8002df8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e019      	b.n	8002e20 <HAL_RCC_OscConfig+0x4f8>
 8002dec:	40021000 	.word	0x40021000
 8002df0:	40007000 	.word	0x40007000
 8002df4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002df8:	4b0b      	ldr	r3, [pc, #44]	; (8002e28 <HAL_RCC_OscConfig+0x500>)
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6a1b      	ldr	r3, [r3, #32]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d106      	bne.n	8002e1a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d001      	beq.n	8002e1e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e000      	b.n	8002e20 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002e1e:	2300      	movs	r3, #0
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3718      	adds	r7, #24
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	40021000 	.word	0x40021000

08002e2c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d101      	bne.n	8002e40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e0d0      	b.n	8002fe2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e40:	4b6a      	ldr	r3, [pc, #424]	; (8002fec <HAL_RCC_ClockConfig+0x1c0>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0307 	and.w	r3, r3, #7
 8002e48:	683a      	ldr	r2, [r7, #0]
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d910      	bls.n	8002e70 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e4e:	4b67      	ldr	r3, [pc, #412]	; (8002fec <HAL_RCC_ClockConfig+0x1c0>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f023 0207 	bic.w	r2, r3, #7
 8002e56:	4965      	ldr	r1, [pc, #404]	; (8002fec <HAL_RCC_ClockConfig+0x1c0>)
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e5e:	4b63      	ldr	r3, [pc, #396]	; (8002fec <HAL_RCC_ClockConfig+0x1c0>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0307 	and.w	r3, r3, #7
 8002e66:	683a      	ldr	r2, [r7, #0]
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d001      	beq.n	8002e70 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e0b8      	b.n	8002fe2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0302 	and.w	r3, r3, #2
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d020      	beq.n	8002ebe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0304 	and.w	r3, r3, #4
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d005      	beq.n	8002e94 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e88:	4b59      	ldr	r3, [pc, #356]	; (8002ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	4a58      	ldr	r2, [pc, #352]	; (8002ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e8e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002e92:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0308 	and.w	r3, r3, #8
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d005      	beq.n	8002eac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ea0:	4b53      	ldr	r3, [pc, #332]	; (8002ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	4a52      	ldr	r2, [pc, #328]	; (8002ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ea6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002eaa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002eac:	4b50      	ldr	r3, [pc, #320]	; (8002ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	494d      	ldr	r1, [pc, #308]	; (8002ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0301 	and.w	r3, r3, #1
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d040      	beq.n	8002f4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d107      	bne.n	8002ee2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ed2:	4b47      	ldr	r3, [pc, #284]	; (8002ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d115      	bne.n	8002f0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e07f      	b.n	8002fe2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d107      	bne.n	8002efa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eea:	4b41      	ldr	r3, [pc, #260]	; (8002ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d109      	bne.n	8002f0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e073      	b.n	8002fe2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002efa:	4b3d      	ldr	r3, [pc, #244]	; (8002ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0302 	and.w	r3, r3, #2
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d101      	bne.n	8002f0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e06b      	b.n	8002fe2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f0a:	4b39      	ldr	r3, [pc, #228]	; (8002ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	f023 0203 	bic.w	r2, r3, #3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	4936      	ldr	r1, [pc, #216]	; (8002ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f1c:	f7fd fcc8 	bl	80008b0 <HAL_GetTick>
 8002f20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f22:	e00a      	b.n	8002f3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f24:	f7fd fcc4 	bl	80008b0 <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d901      	bls.n	8002f3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e053      	b.n	8002fe2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f3a:	4b2d      	ldr	r3, [pc, #180]	; (8002ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f003 020c 	and.w	r2, r3, #12
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d1eb      	bne.n	8002f24 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f4c:	4b27      	ldr	r3, [pc, #156]	; (8002fec <HAL_RCC_ClockConfig+0x1c0>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0307 	and.w	r3, r3, #7
 8002f54:	683a      	ldr	r2, [r7, #0]
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d210      	bcs.n	8002f7c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f5a:	4b24      	ldr	r3, [pc, #144]	; (8002fec <HAL_RCC_ClockConfig+0x1c0>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f023 0207 	bic.w	r2, r3, #7
 8002f62:	4922      	ldr	r1, [pc, #136]	; (8002fec <HAL_RCC_ClockConfig+0x1c0>)
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f6a:	4b20      	ldr	r3, [pc, #128]	; (8002fec <HAL_RCC_ClockConfig+0x1c0>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0307 	and.w	r3, r3, #7
 8002f72:	683a      	ldr	r2, [r7, #0]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d001      	beq.n	8002f7c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e032      	b.n	8002fe2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0304 	and.w	r3, r3, #4
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d008      	beq.n	8002f9a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f88:	4b19      	ldr	r3, [pc, #100]	; (8002ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	4916      	ldr	r1, [pc, #88]	; (8002ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f96:	4313      	orrs	r3, r2
 8002f98:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0308 	and.w	r3, r3, #8
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d009      	beq.n	8002fba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002fa6:	4b12      	ldr	r3, [pc, #72]	; (8002ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	00db      	lsls	r3, r3, #3
 8002fb4:	490e      	ldr	r1, [pc, #56]	; (8002ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002fba:	f000 f821 	bl	8003000 <HAL_RCC_GetSysClockFreq>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	4b0b      	ldr	r3, [pc, #44]	; (8002ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	091b      	lsrs	r3, r3, #4
 8002fc6:	f003 030f 	and.w	r3, r3, #15
 8002fca:	490a      	ldr	r1, [pc, #40]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c8>)
 8002fcc:	5ccb      	ldrb	r3, [r1, r3]
 8002fce:	fa22 f303 	lsr.w	r3, r2, r3
 8002fd2:	4a09      	ldr	r2, [pc, #36]	; (8002ff8 <HAL_RCC_ClockConfig+0x1cc>)
 8002fd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002fd6:	4b09      	ldr	r3, [pc, #36]	; (8002ffc <HAL_RCC_ClockConfig+0x1d0>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7fd fc26 	bl	800082c <HAL_InitTick>

  return HAL_OK;
 8002fe0:	2300      	movs	r3, #0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3710      	adds	r7, #16
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	40022000 	.word	0x40022000
 8002ff0:	40021000 	.word	0x40021000
 8002ff4:	08007ea0 	.word	0x08007ea0
 8002ff8:	200001d0 	.word	0x200001d0
 8002ffc:	200001d4 	.word	0x200001d4

08003000 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003000:	b480      	push	{r7}
 8003002:	b087      	sub	sp, #28
 8003004:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003006:	2300      	movs	r3, #0
 8003008:	60fb      	str	r3, [r7, #12]
 800300a:	2300      	movs	r3, #0
 800300c:	60bb      	str	r3, [r7, #8]
 800300e:	2300      	movs	r3, #0
 8003010:	617b      	str	r3, [r7, #20]
 8003012:	2300      	movs	r3, #0
 8003014:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003016:	2300      	movs	r3, #0
 8003018:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800301a:	4b1e      	ldr	r3, [pc, #120]	; (8003094 <HAL_RCC_GetSysClockFreq+0x94>)
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f003 030c 	and.w	r3, r3, #12
 8003026:	2b04      	cmp	r3, #4
 8003028:	d002      	beq.n	8003030 <HAL_RCC_GetSysClockFreq+0x30>
 800302a:	2b08      	cmp	r3, #8
 800302c:	d003      	beq.n	8003036 <HAL_RCC_GetSysClockFreq+0x36>
 800302e:	e027      	b.n	8003080 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003030:	4b19      	ldr	r3, [pc, #100]	; (8003098 <HAL_RCC_GetSysClockFreq+0x98>)
 8003032:	613b      	str	r3, [r7, #16]
      break;
 8003034:	e027      	b.n	8003086 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	0c9b      	lsrs	r3, r3, #18
 800303a:	f003 030f 	and.w	r3, r3, #15
 800303e:	4a17      	ldr	r2, [pc, #92]	; (800309c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003040:	5cd3      	ldrb	r3, [r2, r3]
 8003042:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d010      	beq.n	8003070 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800304e:	4b11      	ldr	r3, [pc, #68]	; (8003094 <HAL_RCC_GetSysClockFreq+0x94>)
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	0c5b      	lsrs	r3, r3, #17
 8003054:	f003 0301 	and.w	r3, r3, #1
 8003058:	4a11      	ldr	r2, [pc, #68]	; (80030a0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800305a:	5cd3      	ldrb	r3, [r2, r3]
 800305c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a0d      	ldr	r2, [pc, #52]	; (8003098 <HAL_RCC_GetSysClockFreq+0x98>)
 8003062:	fb03 f202 	mul.w	r2, r3, r2
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	fbb2 f3f3 	udiv	r3, r2, r3
 800306c:	617b      	str	r3, [r7, #20]
 800306e:	e004      	b.n	800307a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	4a0c      	ldr	r2, [pc, #48]	; (80030a4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003074:	fb02 f303 	mul.w	r3, r2, r3
 8003078:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	613b      	str	r3, [r7, #16]
      break;
 800307e:	e002      	b.n	8003086 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003080:	4b05      	ldr	r3, [pc, #20]	; (8003098 <HAL_RCC_GetSysClockFreq+0x98>)
 8003082:	613b      	str	r3, [r7, #16]
      break;
 8003084:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003086:	693b      	ldr	r3, [r7, #16]
}
 8003088:	4618      	mov	r0, r3
 800308a:	371c      	adds	r7, #28
 800308c:	46bd      	mov	sp, r7
 800308e:	bc80      	pop	{r7}
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	40021000 	.word	0x40021000
 8003098:	007a1200 	.word	0x007a1200
 800309c:	08007eb0 	.word	0x08007eb0
 80030a0:	08007ec0 	.word	0x08007ec0
 80030a4:	003d0900 	.word	0x003d0900

080030a8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b085      	sub	sp, #20
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80030b0:	4b0a      	ldr	r3, [pc, #40]	; (80030dc <RCC_Delay+0x34>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a0a      	ldr	r2, [pc, #40]	; (80030e0 <RCC_Delay+0x38>)
 80030b6:	fba2 2303 	umull	r2, r3, r2, r3
 80030ba:	0a5b      	lsrs	r3, r3, #9
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	fb02 f303 	mul.w	r3, r2, r3
 80030c2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80030c4:	bf00      	nop
  }
  while (Delay --);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	1e5a      	subs	r2, r3, #1
 80030ca:	60fa      	str	r2, [r7, #12]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d1f9      	bne.n	80030c4 <RCC_Delay+0x1c>
}
 80030d0:	bf00      	nop
 80030d2:	bf00      	nop
 80030d4:	3714      	adds	r7, #20
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bc80      	pop	{r7}
 80030da:	4770      	bx	lr
 80030dc:	200001d0 	.word	0x200001d0
 80030e0:	10624dd3 	.word	0x10624dd3

080030e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b086      	sub	sp, #24
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80030ec:	2300      	movs	r3, #0
 80030ee:	613b      	str	r3, [r7, #16]
 80030f0:	2300      	movs	r3, #0
 80030f2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0301 	and.w	r3, r3, #1
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d07d      	beq.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003100:	2300      	movs	r3, #0
 8003102:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003104:	4b4f      	ldr	r3, [pc, #316]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003106:	69db      	ldr	r3, [r3, #28]
 8003108:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800310c:	2b00      	cmp	r3, #0
 800310e:	d10d      	bne.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003110:	4b4c      	ldr	r3, [pc, #304]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003112:	69db      	ldr	r3, [r3, #28]
 8003114:	4a4b      	ldr	r2, [pc, #300]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003116:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800311a:	61d3      	str	r3, [r2, #28]
 800311c:	4b49      	ldr	r3, [pc, #292]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800311e:	69db      	ldr	r3, [r3, #28]
 8003120:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003124:	60bb      	str	r3, [r7, #8]
 8003126:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003128:	2301      	movs	r3, #1
 800312a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800312c:	4b46      	ldr	r3, [pc, #280]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003134:	2b00      	cmp	r3, #0
 8003136:	d118      	bne.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003138:	4b43      	ldr	r3, [pc, #268]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a42      	ldr	r2, [pc, #264]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800313e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003142:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003144:	f7fd fbb4 	bl	80008b0 <HAL_GetTick>
 8003148:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800314a:	e008      	b.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800314c:	f7fd fbb0 	bl	80008b0 <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	2b64      	cmp	r3, #100	; 0x64
 8003158:	d901      	bls.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e06d      	b.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800315e:	4b3a      	ldr	r3, [pc, #232]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003166:	2b00      	cmp	r3, #0
 8003168:	d0f0      	beq.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800316a:	4b36      	ldr	r3, [pc, #216]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800316c:	6a1b      	ldr	r3, [r3, #32]
 800316e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003172:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d02e      	beq.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003182:	68fa      	ldr	r2, [r7, #12]
 8003184:	429a      	cmp	r2, r3
 8003186:	d027      	beq.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003188:	4b2e      	ldr	r3, [pc, #184]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800318a:	6a1b      	ldr	r3, [r3, #32]
 800318c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003190:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003192:	4b2e      	ldr	r3, [pc, #184]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003194:	2201      	movs	r2, #1
 8003196:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003198:	4b2c      	ldr	r3, [pc, #176]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800319a:	2200      	movs	r2, #0
 800319c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800319e:	4a29      	ldr	r2, [pc, #164]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f003 0301 	and.w	r3, r3, #1
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d014      	beq.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ae:	f7fd fb7f 	bl	80008b0 <HAL_GetTick>
 80031b2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031b4:	e00a      	b.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031b6:	f7fd fb7b 	bl	80008b0 <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d901      	bls.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80031c8:	2303      	movs	r3, #3
 80031ca:	e036      	b.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031cc:	4b1d      	ldr	r3, [pc, #116]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031ce:	6a1b      	ldr	r3, [r3, #32]
 80031d0:	f003 0302 	and.w	r3, r3, #2
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d0ee      	beq.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031d8:	4b1a      	ldr	r3, [pc, #104]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031da:	6a1b      	ldr	r3, [r3, #32]
 80031dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	4917      	ldr	r1, [pc, #92]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031e6:	4313      	orrs	r3, r2
 80031e8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80031ea:	7dfb      	ldrb	r3, [r7, #23]
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d105      	bne.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031f0:	4b14      	ldr	r3, [pc, #80]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031f2:	69db      	ldr	r3, [r3, #28]
 80031f4:	4a13      	ldr	r2, [pc, #76]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031fa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 0302 	and.w	r3, r3, #2
 8003204:	2b00      	cmp	r3, #0
 8003206:	d008      	beq.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003208:	4b0e      	ldr	r3, [pc, #56]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	490b      	ldr	r1, [pc, #44]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003216:	4313      	orrs	r3, r2
 8003218:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0310 	and.w	r3, r3, #16
 8003222:	2b00      	cmp	r3, #0
 8003224:	d008      	beq.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003226:	4b07      	ldr	r3, [pc, #28]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	4904      	ldr	r1, [pc, #16]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003234:	4313      	orrs	r3, r2
 8003236:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	3718      	adds	r7, #24
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	40021000 	.word	0x40021000
 8003248:	40007000 	.word	0x40007000
 800324c:	42420440 	.word	0x42420440

08003250 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d101      	bne.n	8003262 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e076      	b.n	8003350 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003266:	2b00      	cmp	r3, #0
 8003268:	d108      	bne.n	800327c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003272:	d009      	beq.n	8003288 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	61da      	str	r2, [r3, #28]
 800327a:	e005      	b.n	8003288 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003294:	b2db      	uxtb	r3, r3
 8003296:	2b00      	cmp	r3, #0
 8003298:	d106      	bne.n	80032a8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f7fd f9fa 	bl	800069c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2202      	movs	r2, #2
 80032ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032be:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80032d0:	431a      	orrs	r2, r3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032da:	431a      	orrs	r2, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	691b      	ldr	r3, [r3, #16]
 80032e0:	f003 0302 	and.w	r3, r3, #2
 80032e4:	431a      	orrs	r2, r3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	695b      	ldr	r3, [r3, #20]
 80032ea:	f003 0301 	and.w	r3, r3, #1
 80032ee:	431a      	orrs	r2, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	699b      	ldr	r3, [r3, #24]
 80032f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032f8:	431a      	orrs	r2, r3
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	69db      	ldr	r3, [r3, #28]
 80032fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003302:	431a      	orrs	r2, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6a1b      	ldr	r3, [r3, #32]
 8003308:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800330c:	ea42 0103 	orr.w	r1, r2, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003314:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	430a      	orrs	r2, r1
 800331e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	699b      	ldr	r3, [r3, #24]
 8003324:	0c1a      	lsrs	r2, r3, #16
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f002 0204 	and.w	r2, r2, #4
 800332e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	69da      	ldr	r2, [r3, #28]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800333e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2201      	movs	r2, #1
 800334a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800334e:	2300      	movs	r3, #0
}
 8003350:	4618      	mov	r0, r3
 8003352:	3708      	adds	r7, #8
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}

08003358 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b088      	sub	sp, #32
 800335c:	af00      	add	r7, sp, #0
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	60b9      	str	r1, [r7, #8]
 8003362:	603b      	str	r3, [r7, #0]
 8003364:	4613      	mov	r3, r2
 8003366:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003368:	2300      	movs	r3, #0
 800336a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003372:	2b01      	cmp	r3, #1
 8003374:	d101      	bne.n	800337a <HAL_SPI_Transmit+0x22>
 8003376:	2302      	movs	r3, #2
 8003378:	e12d      	b.n	80035d6 <HAL_SPI_Transmit+0x27e>
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2201      	movs	r2, #1
 800337e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003382:	f7fd fa95 	bl	80008b0 <HAL_GetTick>
 8003386:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003388:	88fb      	ldrh	r3, [r7, #6]
 800338a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003392:	b2db      	uxtb	r3, r3
 8003394:	2b01      	cmp	r3, #1
 8003396:	d002      	beq.n	800339e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003398:	2302      	movs	r3, #2
 800339a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800339c:	e116      	b.n	80035cc <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d002      	beq.n	80033aa <HAL_SPI_Transmit+0x52>
 80033a4:	88fb      	ldrh	r3, [r7, #6]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d102      	bne.n	80033b0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	77fb      	strb	r3, [r7, #31]
    goto error;
 80033ae:	e10d      	b.n	80035cc <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2203      	movs	r2, #3
 80033b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2200      	movs	r2, #0
 80033bc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	68ba      	ldr	r2, [r7, #8]
 80033c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	88fa      	ldrh	r2, [r7, #6]
 80033c8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	88fa      	ldrh	r2, [r7, #6]
 80033ce:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2200      	movs	r2, #0
 80033d4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2200      	movs	r2, #0
 80033da:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2200      	movs	r2, #0
 80033e0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2200      	movs	r2, #0
 80033e6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2200      	movs	r2, #0
 80033ec:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033f6:	d10f      	bne.n	8003418 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003406:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003416:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003422:	2b40      	cmp	r3, #64	; 0x40
 8003424:	d007      	beq.n	8003436 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003434:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800343e:	d14f      	bne.n	80034e0 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d002      	beq.n	800344e <HAL_SPI_Transmit+0xf6>
 8003448:	8afb      	ldrh	r3, [r7, #22]
 800344a:	2b01      	cmp	r3, #1
 800344c:	d142      	bne.n	80034d4 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003452:	881a      	ldrh	r2, [r3, #0]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345e:	1c9a      	adds	r2, r3, #2
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003468:	b29b      	uxth	r3, r3
 800346a:	3b01      	subs	r3, #1
 800346c:	b29a      	uxth	r2, r3
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003472:	e02f      	b.n	80034d4 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	f003 0302 	and.w	r3, r3, #2
 800347e:	2b02      	cmp	r3, #2
 8003480:	d112      	bne.n	80034a8 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003486:	881a      	ldrh	r2, [r3, #0]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003492:	1c9a      	adds	r2, r3, #2
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800349c:	b29b      	uxth	r3, r3
 800349e:	3b01      	subs	r3, #1
 80034a0:	b29a      	uxth	r2, r3
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	86da      	strh	r2, [r3, #54]	; 0x36
 80034a6:	e015      	b.n	80034d4 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80034a8:	f7fd fa02 	bl	80008b0 <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	69bb      	ldr	r3, [r7, #24]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	683a      	ldr	r2, [r7, #0]
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d803      	bhi.n	80034c0 <HAL_SPI_Transmit+0x168>
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034be:	d102      	bne.n	80034c6 <HAL_SPI_Transmit+0x16e>
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d106      	bne.n	80034d4 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2201      	movs	r2, #1
 80034ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80034d2:	e07b      	b.n	80035cc <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034d8:	b29b      	uxth	r3, r3
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d1ca      	bne.n	8003474 <HAL_SPI_Transmit+0x11c>
 80034de:	e050      	b.n	8003582 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d002      	beq.n	80034ee <HAL_SPI_Transmit+0x196>
 80034e8:	8afb      	ldrh	r3, [r7, #22]
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d144      	bne.n	8003578 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	330c      	adds	r3, #12
 80034f8:	7812      	ldrb	r2, [r2, #0]
 80034fa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003500:	1c5a      	adds	r2, r3, #1
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800350a:	b29b      	uxth	r3, r3
 800350c:	3b01      	subs	r3, #1
 800350e:	b29a      	uxth	r2, r3
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003514:	e030      	b.n	8003578 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	f003 0302 	and.w	r3, r3, #2
 8003520:	2b02      	cmp	r3, #2
 8003522:	d113      	bne.n	800354c <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	330c      	adds	r3, #12
 800352e:	7812      	ldrb	r2, [r2, #0]
 8003530:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003536:	1c5a      	adds	r2, r3, #1
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003540:	b29b      	uxth	r3, r3
 8003542:	3b01      	subs	r3, #1
 8003544:	b29a      	uxth	r2, r3
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	86da      	strh	r2, [r3, #54]	; 0x36
 800354a:	e015      	b.n	8003578 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800354c:	f7fd f9b0 	bl	80008b0 <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	69bb      	ldr	r3, [r7, #24]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	683a      	ldr	r2, [r7, #0]
 8003558:	429a      	cmp	r2, r3
 800355a:	d803      	bhi.n	8003564 <HAL_SPI_Transmit+0x20c>
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003562:	d102      	bne.n	800356a <HAL_SPI_Transmit+0x212>
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d106      	bne.n	8003578 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2201      	movs	r2, #1
 8003572:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003576:	e029      	b.n	80035cc <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800357c:	b29b      	uxth	r3, r3
 800357e:	2b00      	cmp	r3, #0
 8003580:	d1c9      	bne.n	8003516 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003582:	69ba      	ldr	r2, [r7, #24]
 8003584:	6839      	ldr	r1, [r7, #0]
 8003586:	68f8      	ldr	r0, [r7, #12]
 8003588:	f000 f8b2 	bl	80036f0 <SPI_EndRxTxTransaction>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d002      	beq.n	8003598 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2220      	movs	r2, #32
 8003596:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d10a      	bne.n	80035b6 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80035a0:	2300      	movs	r3, #0
 80035a2:	613b      	str	r3, [r7, #16]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	613b      	str	r3, [r7, #16]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	613b      	str	r3, [r7, #16]
 80035b4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d002      	beq.n	80035c4 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	77fb      	strb	r3, [r7, #31]
 80035c2:	e003      	b.n	80035cc <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2200      	movs	r2, #0
 80035d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80035d4:	7ffb      	ldrb	r3, [r7, #31]
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3720      	adds	r7, #32
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
	...

080035e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b088      	sub	sp, #32
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	603b      	str	r3, [r7, #0]
 80035ec:	4613      	mov	r3, r2
 80035ee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80035f0:	f7fd f95e 	bl	80008b0 <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035f8:	1a9b      	subs	r3, r3, r2
 80035fa:	683a      	ldr	r2, [r7, #0]
 80035fc:	4413      	add	r3, r2
 80035fe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003600:	f7fd f956 	bl	80008b0 <HAL_GetTick>
 8003604:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003606:	4b39      	ldr	r3, [pc, #228]	; (80036ec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	015b      	lsls	r3, r3, #5
 800360c:	0d1b      	lsrs	r3, r3, #20
 800360e:	69fa      	ldr	r2, [r7, #28]
 8003610:	fb02 f303 	mul.w	r3, r2, r3
 8003614:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003616:	e054      	b.n	80036c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800361e:	d050      	beq.n	80036c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003620:	f7fd f946 	bl	80008b0 <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	69fa      	ldr	r2, [r7, #28]
 800362c:	429a      	cmp	r2, r3
 800362e:	d902      	bls.n	8003636 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d13d      	bne.n	80036b2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	685a      	ldr	r2, [r3, #4]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003644:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800364e:	d111      	bne.n	8003674 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003658:	d004      	beq.n	8003664 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003662:	d107      	bne.n	8003674 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003672:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003678:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800367c:	d10f      	bne.n	800369e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800368c:	601a      	str	r2, [r3, #0]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800369c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2201      	movs	r2, #1
 80036a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e017      	b.n	80036e2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d101      	bne.n	80036bc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80036b8:	2300      	movs	r3, #0
 80036ba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	3b01      	subs	r3, #1
 80036c0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	689a      	ldr	r2, [r3, #8]
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	4013      	ands	r3, r2
 80036cc:	68ba      	ldr	r2, [r7, #8]
 80036ce:	429a      	cmp	r2, r3
 80036d0:	bf0c      	ite	eq
 80036d2:	2301      	moveq	r3, #1
 80036d4:	2300      	movne	r3, #0
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	461a      	mov	r2, r3
 80036da:	79fb      	ldrb	r3, [r7, #7]
 80036dc:	429a      	cmp	r2, r3
 80036de:	d19b      	bne.n	8003618 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80036e0:	2300      	movs	r3, #0
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3720      	adds	r7, #32
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	200001d0 	.word	0x200001d0

080036f0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b086      	sub	sp, #24
 80036f4:	af02      	add	r7, sp, #8
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	60b9      	str	r1, [r7, #8]
 80036fa:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	9300      	str	r3, [sp, #0]
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	2200      	movs	r2, #0
 8003704:	2180      	movs	r1, #128	; 0x80
 8003706:	68f8      	ldr	r0, [r7, #12]
 8003708:	f7ff ff6a 	bl	80035e0 <SPI_WaitFlagStateUntilTimeout>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d007      	beq.n	8003722 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003716:	f043 0220 	orr.w	r2, r3, #32
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e000      	b.n	8003724 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003722:	2300      	movs	r3, #0
}
 8003724:	4618      	mov	r0, r3
 8003726:	3710      	adds	r7, #16
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}

0800372c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800372c:	b084      	sub	sp, #16
 800372e:	b480      	push	{r7}
 8003730:	b083      	sub	sp, #12
 8003732:	af00      	add	r7, sp, #0
 8003734:	6078      	str	r0, [r7, #4]
 8003736:	f107 0014 	add.w	r0, r7, #20
 800373a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800373e:	2300      	movs	r3, #0
}
 8003740:	4618      	mov	r0, r3
 8003742:	370c      	adds	r7, #12
 8003744:	46bd      	mov	sp, r7
 8003746:	bc80      	pop	{r7}
 8003748:	b004      	add	sp, #16
 800374a:	4770      	bx	lr

0800374c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800374c:	b480      	push	{r7}
 800374e:	b085      	sub	sp, #20
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2200      	movs	r2, #0
 8003758:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800375c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003760:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	b29a      	uxth	r2, r3
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800376c:	2300      	movs	r3, #0
}
 800376e:	4618      	mov	r0, r3
 8003770:	3714      	adds	r7, #20
 8003772:	46bd      	mov	sp, r7
 8003774:	bc80      	pop	{r7}
 8003776:	4770      	bx	lr

08003778 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003778:	b480      	push	{r7}
 800377a:	b085      	sub	sp, #20
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003780:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003784:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800378c:	b29a      	uxth	r2, r3
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	b29b      	uxth	r3, r3
 8003792:	43db      	mvns	r3, r3
 8003794:	b29b      	uxth	r3, r3
 8003796:	4013      	ands	r3, r2
 8003798:	b29a      	uxth	r2, r3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80037a0:	2300      	movs	r3, #0
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3714      	adds	r7, #20
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bc80      	pop	{r7}
 80037aa:	4770      	bx	lr

080037ac <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	460b      	mov	r3, r1
 80037b6:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80037b8:	2300      	movs	r3, #0
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	370c      	adds	r7, #12
 80037be:	46bd      	mov	sp, r7
 80037c0:	bc80      	pop	{r7}
 80037c2:	4770      	bx	lr

080037c4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80037c4:	b084      	sub	sp, #16
 80037c6:	b480      	push	{r7}
 80037c8:	b083      	sub	sp, #12
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	6078      	str	r0, [r7, #4]
 80037ce:	f107 0014 	add.w	r0, r7, #20
 80037d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2201      	movs	r2, #1
 80037da:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80037f6:	2300      	movs	r3, #0
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	370c      	adds	r7, #12
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bc80      	pop	{r7}
 8003800:	b004      	add	sp, #16
 8003802:	4770      	bx	lr

08003804 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003804:	b480      	push	{r7}
 8003806:	b09d      	sub	sp, #116	; 0x74
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800380e:	2300      	movs	r3, #0
 8003810:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	781b      	ldrb	r3, [r3, #0]
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	4413      	add	r3, r2
 800381e:	881b      	ldrh	r3, [r3, #0]
 8003820:	b29b      	uxth	r3, r3
 8003822:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003826:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800382a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	78db      	ldrb	r3, [r3, #3]
 8003832:	2b03      	cmp	r3, #3
 8003834:	d81f      	bhi.n	8003876 <USB_ActivateEndpoint+0x72>
 8003836:	a201      	add	r2, pc, #4	; (adr r2, 800383c <USB_ActivateEndpoint+0x38>)
 8003838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800383c:	0800384d 	.word	0x0800384d
 8003840:	08003869 	.word	0x08003869
 8003844:	0800387f 	.word	0x0800387f
 8003848:	0800385b 	.word	0x0800385b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800384c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003850:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003854:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8003858:	e012      	b.n	8003880 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800385a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800385e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8003862:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8003866:	e00b      	b.n	8003880 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003868:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800386c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003870:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8003874:	e004      	b.n	8003880 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800387c:	e000      	b.n	8003880 <USB_ActivateEndpoint+0x7c>
      break;
 800387e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	441a      	add	r2, r3
 800388a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800388e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003892:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003896:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800389a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800389e:	b29b      	uxth	r3, r3
 80038a0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	781b      	ldrb	r3, [r3, #0]
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	4413      	add	r3, r2
 80038ac:	881b      	ldrh	r3, [r3, #0]
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038b8:	b29a      	uxth	r2, r3
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	b29b      	uxth	r3, r3
 80038c0:	4313      	orrs	r3, r2
 80038c2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	441a      	add	r2, r3
 80038d0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80038d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80038d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80038dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	7b1b      	ldrb	r3, [r3, #12]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	f040 8178 	bne.w	8003be2 <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	785b      	ldrb	r3, [r3, #1]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	f000 8084 	beq.w	8003a04 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	61bb      	str	r3, [r7, #24]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003906:	b29b      	uxth	r3, r3
 8003908:	461a      	mov	r2, r3
 800390a:	69bb      	ldr	r3, [r7, #24]
 800390c:	4413      	add	r3, r2
 800390e:	61bb      	str	r3, [r7, #24]
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	011a      	lsls	r2, r3, #4
 8003916:	69bb      	ldr	r3, [r7, #24]
 8003918:	4413      	add	r3, r2
 800391a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800391e:	617b      	str	r3, [r7, #20]
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	88db      	ldrh	r3, [r3, #6]
 8003924:	085b      	lsrs	r3, r3, #1
 8003926:	b29b      	uxth	r3, r3
 8003928:	005b      	lsls	r3, r3, #1
 800392a:	b29a      	uxth	r2, r3
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	781b      	ldrb	r3, [r3, #0]
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	4413      	add	r3, r2
 800393a:	881b      	ldrh	r3, [r3, #0]
 800393c:	827b      	strh	r3, [r7, #18]
 800393e:	8a7b      	ldrh	r3, [r7, #18]
 8003940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003944:	2b00      	cmp	r3, #0
 8003946:	d01b      	beq.n	8003980 <USB_ActivateEndpoint+0x17c>
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	781b      	ldrb	r3, [r3, #0]
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	4413      	add	r3, r2
 8003952:	881b      	ldrh	r3, [r3, #0]
 8003954:	b29b      	uxth	r3, r3
 8003956:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800395a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800395e:	823b      	strh	r3, [r7, #16]
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	441a      	add	r2, r3
 800396a:	8a3b      	ldrh	r3, [r7, #16]
 800396c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003970:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003974:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003978:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800397c:	b29b      	uxth	r3, r3
 800397e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	78db      	ldrb	r3, [r3, #3]
 8003984:	2b01      	cmp	r3, #1
 8003986:	d020      	beq.n	80039ca <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	4413      	add	r3, r2
 8003992:	881b      	ldrh	r3, [r3, #0]
 8003994:	b29b      	uxth	r3, r3
 8003996:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800399a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800399e:	81bb      	strh	r3, [r7, #12]
 80039a0:	89bb      	ldrh	r3, [r7, #12]
 80039a2:	f083 0320 	eor.w	r3, r3, #32
 80039a6:	81bb      	strh	r3, [r7, #12]
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	781b      	ldrb	r3, [r3, #0]
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	441a      	add	r2, r3
 80039b2:	89bb      	ldrh	r3, [r7, #12]
 80039b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80039b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	8013      	strh	r3, [r2, #0]
 80039c8:	e2d5      	b.n	8003f76 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	4413      	add	r3, r2
 80039d4:	881b      	ldrh	r3, [r3, #0]
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039e0:	81fb      	strh	r3, [r7, #14]
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	441a      	add	r2, r3
 80039ec:	89fb      	ldrh	r3, [r7, #14]
 80039ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80039f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	8013      	strh	r3, [r2, #0]
 8003a02:	e2b8      	b.n	8003f76 <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	633b      	str	r3, [r7, #48]	; 0x30
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	461a      	mov	r2, r3
 8003a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a14:	4413      	add	r3, r2
 8003a16:	633b      	str	r3, [r7, #48]	; 0x30
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	781b      	ldrb	r3, [r3, #0]
 8003a1c:	011a      	lsls	r2, r3, #4
 8003a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a20:	4413      	add	r3, r2
 8003a22:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003a26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	88db      	ldrh	r3, [r3, #6]
 8003a2c:	085b      	lsrs	r3, r3, #1
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	005b      	lsls	r3, r3, #1
 8003a32:	b29a      	uxth	r2, r3
 8003a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a36:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	461a      	mov	r2, r3
 8003a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a48:	4413      	add	r3, r2
 8003a4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	011a      	lsls	r2, r3, #4
 8003a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a54:	4413      	add	r3, r2
 8003a56:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003a5a:	627b      	str	r3, [r7, #36]	; 0x24
 8003a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5e:	881b      	ldrh	r3, [r3, #0]
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a66:	b29a      	uxth	r2, r3
 8003a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6a:	801a      	strh	r2, [r3, #0]
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	691b      	ldr	r3, [r3, #16]
 8003a70:	2b3e      	cmp	r3, #62	; 0x3e
 8003a72:	d91d      	bls.n	8003ab0 <USB_ActivateEndpoint+0x2ac>
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	691b      	ldr	r3, [r3, #16]
 8003a78:	095b      	lsrs	r3, r3, #5
 8003a7a:	66bb      	str	r3, [r7, #104]	; 0x68
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	691b      	ldr	r3, [r3, #16]
 8003a80:	f003 031f 	and.w	r3, r3, #31
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d102      	bne.n	8003a8e <USB_ActivateEndpoint+0x28a>
 8003a88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a8a:	3b01      	subs	r3, #1
 8003a8c:	66bb      	str	r3, [r7, #104]	; 0x68
 8003a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a90:	881b      	ldrh	r3, [r3, #0]
 8003a92:	b29a      	uxth	r2, r3
 8003a94:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	029b      	lsls	r3, r3, #10
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003aa4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003aa8:	b29a      	uxth	r2, r3
 8003aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aac:	801a      	strh	r2, [r3, #0]
 8003aae:	e026      	b.n	8003afe <USB_ActivateEndpoint+0x2fa>
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	691b      	ldr	r3, [r3, #16]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d10a      	bne.n	8003ace <USB_ActivateEndpoint+0x2ca>
 8003ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aba:	881b      	ldrh	r3, [r3, #0]
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ac2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ac6:	b29a      	uxth	r2, r3
 8003ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aca:	801a      	strh	r2, [r3, #0]
 8003acc:	e017      	b.n	8003afe <USB_ActivateEndpoint+0x2fa>
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	691b      	ldr	r3, [r3, #16]
 8003ad2:	085b      	lsrs	r3, r3, #1
 8003ad4:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	691b      	ldr	r3, [r3, #16]
 8003ada:	f003 0301 	and.w	r3, r3, #1
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d002      	beq.n	8003ae8 <USB_ActivateEndpoint+0x2e4>
 8003ae2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ae4:	3301      	adds	r3, #1
 8003ae6:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aea:	881b      	ldrh	r3, [r3, #0]
 8003aec:	b29a      	uxth	r2, r3
 8003aee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	029b      	lsls	r3, r3, #10
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	4313      	orrs	r3, r2
 8003af8:	b29a      	uxth	r2, r3
 8003afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	781b      	ldrb	r3, [r3, #0]
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	4413      	add	r3, r2
 8003b08:	881b      	ldrh	r3, [r3, #0]
 8003b0a:	847b      	strh	r3, [r7, #34]	; 0x22
 8003b0c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003b0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d01b      	beq.n	8003b4e <USB_ActivateEndpoint+0x34a>
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	781b      	ldrb	r3, [r3, #0]
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	4413      	add	r3, r2
 8003b20:	881b      	ldrh	r3, [r3, #0]
 8003b22:	b29b      	uxth	r3, r3
 8003b24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b2c:	843b      	strh	r3, [r7, #32]
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	781b      	ldrb	r3, [r3, #0]
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	441a      	add	r2, r3
 8003b38:	8c3b      	ldrh	r3, [r7, #32]
 8003b3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b42:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	781b      	ldrb	r3, [r3, #0]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d124      	bne.n	8003ba0 <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	781b      	ldrb	r3, [r3, #0]
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	4413      	add	r3, r2
 8003b60:	881b      	ldrh	r3, [r3, #0]
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b6c:	83bb      	strh	r3, [r7, #28]
 8003b6e:	8bbb      	ldrh	r3, [r7, #28]
 8003b70:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003b74:	83bb      	strh	r3, [r7, #28]
 8003b76:	8bbb      	ldrh	r3, [r7, #28]
 8003b78:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003b7c:	83bb      	strh	r3, [r7, #28]
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	441a      	add	r2, r3
 8003b88:	8bbb      	ldrh	r3, [r7, #28]
 8003b8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	8013      	strh	r3, [r2, #0]
 8003b9e:	e1ea      	b.n	8003f76 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	781b      	ldrb	r3, [r3, #0]
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	4413      	add	r3, r2
 8003baa:	881b      	ldrh	r3, [r3, #0]
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003bb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bb6:	83fb      	strh	r3, [r7, #30]
 8003bb8:	8bfb      	ldrh	r3, [r7, #30]
 8003bba:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003bbe:	83fb      	strh	r3, [r7, #30]
 8003bc0:	687a      	ldr	r2, [r7, #4]
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	441a      	add	r2, r3
 8003bca:	8bfb      	ldrh	r3, [r7, #30]
 8003bcc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003bd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003bd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	8013      	strh	r3, [r2, #0]
 8003be0:	e1c9      	b.n	8003f76 <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	78db      	ldrb	r3, [r3, #3]
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d11e      	bne.n	8003c28 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	009b      	lsls	r3, r3, #2
 8003bf2:	4413      	add	r3, r2
 8003bf4:	881b      	ldrh	r3, [r3, #0]
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c00:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	441a      	add	r2, r3
 8003c0e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8003c12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c1a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003c1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	8013      	strh	r3, [r2, #0]
 8003c26:	e01d      	b.n	8003c64 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	781b      	ldrb	r3, [r3, #0]
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	4413      	add	r3, r2
 8003c32:	881b      	ldrh	r3, [r3, #0]
 8003c34:	b29b      	uxth	r3, r3
 8003c36:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8003c3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c3e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	441a      	add	r2, r3
 8003c4c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003c50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	461a      	mov	r2, r3
 8003c72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c74:	4413      	add	r3, r2
 8003c76:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	781b      	ldrb	r3, [r3, #0]
 8003c7c:	011a      	lsls	r2, r3, #4
 8003c7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c80:	4413      	add	r3, r2
 8003c82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c86:	65bb      	str	r3, [r7, #88]	; 0x58
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	891b      	ldrh	r3, [r3, #8]
 8003c8c:	085b      	lsrs	r3, r3, #1
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	005b      	lsls	r3, r3, #1
 8003c92:	b29a      	uxth	r2, r3
 8003c94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c96:	801a      	strh	r2, [r3, #0]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	657b      	str	r3, [r7, #84]	; 0x54
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ca8:	4413      	add	r3, r2
 8003caa:	657b      	str	r3, [r7, #84]	; 0x54
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	011a      	lsls	r2, r3, #4
 8003cb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cb4:	4413      	add	r3, r2
 8003cb6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003cba:	653b      	str	r3, [r7, #80]	; 0x50
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	895b      	ldrh	r3, [r3, #10]
 8003cc0:	085b      	lsrs	r3, r3, #1
 8003cc2:	b29b      	uxth	r3, r3
 8003cc4:	005b      	lsls	r3, r3, #1
 8003cc6:	b29a      	uxth	r2, r3
 8003cc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cca:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	785b      	ldrb	r3, [r3, #1]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	f040 8093 	bne.w	8003dfc <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	781b      	ldrb	r3, [r3, #0]
 8003cdc:	009b      	lsls	r3, r3, #2
 8003cde:	4413      	add	r3, r2
 8003ce0:	881b      	ldrh	r3, [r3, #0]
 8003ce2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003ce6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003cea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d01b      	beq.n	8003d2a <USB_ActivateEndpoint+0x526>
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	781b      	ldrb	r3, [r3, #0]
 8003cf8:	009b      	lsls	r3, r3, #2
 8003cfa:	4413      	add	r3, r2
 8003cfc:	881b      	ldrh	r3, [r3, #0]
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d08:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	441a      	add	r2, r3
 8003d14:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003d16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d1e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	781b      	ldrb	r3, [r3, #0]
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	4413      	add	r3, r2
 8003d34:	881b      	ldrh	r3, [r3, #0]
 8003d36:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8003d38:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003d3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d01b      	beq.n	8003d7a <USB_ActivateEndpoint+0x576>
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	781b      	ldrb	r3, [r3, #0]
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	4413      	add	r3, r2
 8003d4c:	881b      	ldrh	r3, [r3, #0]
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d58:	877b      	strh	r3, [r7, #58]	; 0x3a
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	441a      	add	r2, r3
 8003d64:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003d66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d72:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	781b      	ldrb	r3, [r3, #0]
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	4413      	add	r3, r2
 8003d84:	881b      	ldrh	r3, [r3, #0]
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d90:	873b      	strh	r3, [r7, #56]	; 0x38
 8003d92:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003d94:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003d98:	873b      	strh	r3, [r7, #56]	; 0x38
 8003d9a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003d9c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003da0:	873b      	strh	r3, [r7, #56]	; 0x38
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	441a      	add	r2, r3
 8003dac:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003dae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003db2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003db6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	781b      	ldrb	r3, [r3, #0]
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	4413      	add	r3, r2
 8003dcc:	881b      	ldrh	r3, [r3, #0]
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003dd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003dd8:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	781b      	ldrb	r3, [r3, #0]
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	441a      	add	r2, r3
 8003de4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003de6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003dea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003dee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003df2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	8013      	strh	r3, [r2, #0]
 8003dfa:	e0bc      	b.n	8003f76 <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	781b      	ldrb	r3, [r3, #0]
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	4413      	add	r3, r2
 8003e06:	881b      	ldrh	r3, [r3, #0]
 8003e08:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8003e0c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003e10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d01d      	beq.n	8003e54 <USB_ActivateEndpoint+0x650>
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	781b      	ldrb	r3, [r3, #0]
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	4413      	add	r3, r2
 8003e22:	881b      	ldrh	r3, [r3, #0]
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e2e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	441a      	add	r2, r3
 8003e3c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003e40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e48:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003e54:	687a      	ldr	r2, [r7, #4]
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	781b      	ldrb	r3, [r3, #0]
 8003e5a:	009b      	lsls	r3, r3, #2
 8003e5c:	4413      	add	r3, r2
 8003e5e:	881b      	ldrh	r3, [r3, #0]
 8003e60:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8003e64:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d01d      	beq.n	8003eac <USB_ActivateEndpoint+0x6a8>
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	781b      	ldrb	r3, [r3, #0]
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	4413      	add	r3, r2
 8003e7a:	881b      	ldrh	r3, [r3, #0]
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e86:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	781b      	ldrb	r3, [r3, #0]
 8003e90:	009b      	lsls	r3, r3, #2
 8003e92:	441a      	add	r2, r3
 8003e94:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003e98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ea0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ea4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003ea8:	b29b      	uxth	r3, r3
 8003eaa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	78db      	ldrb	r3, [r3, #3]
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d024      	beq.n	8003efe <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	781b      	ldrb	r3, [r3, #0]
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	4413      	add	r3, r2
 8003ebe:	881b      	ldrh	r3, [r3, #0]
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ec6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003eca:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003ece:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003ed2:	f083 0320 	eor.w	r3, r3, #32
 8003ed6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	009b      	lsls	r3, r3, #2
 8003ee2:	441a      	add	r2, r3
 8003ee4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003ee8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003eec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ef0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ef4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	8013      	strh	r3, [r2, #0]
 8003efc:	e01d      	b.n	8003f3a <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	009b      	lsls	r3, r3, #2
 8003f06:	4413      	add	r3, r2
 8003f08:	881b      	ldrh	r3, [r3, #0]
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f14:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	781b      	ldrb	r3, [r3, #0]
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	441a      	add	r2, r3
 8003f22:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003f26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	781b      	ldrb	r3, [r3, #0]
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	4413      	add	r3, r2
 8003f44:	881b      	ldrh	r3, [r3, #0]
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f50:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003f54:	687a      	ldr	r2, [r7, #4]
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	781b      	ldrb	r3, [r3, #0]
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	441a      	add	r2, r3
 8003f5e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003f62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8003f76:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3774      	adds	r7, #116	; 0x74
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bc80      	pop	{r7}
 8003f82:	4770      	bx	lr

08003f84 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b08d      	sub	sp, #52	; 0x34
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	7b1b      	ldrb	r3, [r3, #12]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	f040 808e 	bne.w	80040b4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	785b      	ldrb	r3, [r3, #1]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d044      	beq.n	800402a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	781b      	ldrb	r3, [r3, #0]
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	4413      	add	r3, r2
 8003faa:	881b      	ldrh	r3, [r3, #0]
 8003fac:	81bb      	strh	r3, [r7, #12]
 8003fae:	89bb      	ldrh	r3, [r7, #12]
 8003fb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d01b      	beq.n	8003ff0 <USB_DeactivateEndpoint+0x6c>
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	4413      	add	r3, r2
 8003fc2:	881b      	ldrh	r3, [r3, #0]
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fce:	817b      	strh	r3, [r7, #10]
 8003fd0:	687a      	ldr	r2, [r7, #4]
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	781b      	ldrb	r3, [r3, #0]
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	441a      	add	r2, r3
 8003fda:	897b      	ldrh	r3, [r7, #10]
 8003fdc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fe0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fe4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fe8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	781b      	ldrb	r3, [r3, #0]
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	4413      	add	r3, r2
 8003ffa:	881b      	ldrh	r3, [r3, #0]
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004002:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004006:	813b      	strh	r3, [r7, #8]
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	781b      	ldrb	r3, [r3, #0]
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	441a      	add	r2, r3
 8004012:	893b      	ldrh	r3, [r7, #8]
 8004014:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004018:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800401c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004020:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004024:	b29b      	uxth	r3, r3
 8004026:	8013      	strh	r3, [r2, #0]
 8004028:	e192      	b.n	8004350 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	781b      	ldrb	r3, [r3, #0]
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	4413      	add	r3, r2
 8004034:	881b      	ldrh	r3, [r3, #0]
 8004036:	827b      	strh	r3, [r7, #18]
 8004038:	8a7b      	ldrh	r3, [r7, #18]
 800403a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d01b      	beq.n	800407a <USB_DeactivateEndpoint+0xf6>
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	781b      	ldrb	r3, [r3, #0]
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	4413      	add	r3, r2
 800404c:	881b      	ldrh	r3, [r3, #0]
 800404e:	b29b      	uxth	r3, r3
 8004050:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004054:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004058:	823b      	strh	r3, [r7, #16]
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	781b      	ldrb	r3, [r3, #0]
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	441a      	add	r2, r3
 8004064:	8a3b      	ldrh	r3, [r7, #16]
 8004066:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800406a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800406e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004072:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004076:	b29b      	uxth	r3, r3
 8004078:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	781b      	ldrb	r3, [r3, #0]
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	4413      	add	r3, r2
 8004084:	881b      	ldrh	r3, [r3, #0]
 8004086:	b29b      	uxth	r3, r3
 8004088:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800408c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004090:	81fb      	strh	r3, [r7, #14]
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	781b      	ldrb	r3, [r3, #0]
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	441a      	add	r2, r3
 800409c:	89fb      	ldrh	r3, [r7, #14]
 800409e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	8013      	strh	r3, [r2, #0]
 80040b2:	e14d      	b.n	8004350 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	785b      	ldrb	r3, [r3, #1]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	f040 80a5 	bne.w	8004208 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	781b      	ldrb	r3, [r3, #0]
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	4413      	add	r3, r2
 80040c8:	881b      	ldrh	r3, [r3, #0]
 80040ca:	843b      	strh	r3, [r7, #32]
 80040cc:	8c3b      	ldrh	r3, [r7, #32]
 80040ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d01b      	beq.n	800410e <USB_DeactivateEndpoint+0x18a>
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	009b      	lsls	r3, r3, #2
 80040de:	4413      	add	r3, r2
 80040e0:	881b      	ldrh	r3, [r3, #0]
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040ec:	83fb      	strh	r3, [r7, #30]
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	441a      	add	r2, r3
 80040f8:	8bfb      	ldrh	r3, [r7, #30]
 80040fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004102:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004106:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800410a:	b29b      	uxth	r3, r3
 800410c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	009b      	lsls	r3, r3, #2
 8004116:	4413      	add	r3, r2
 8004118:	881b      	ldrh	r3, [r3, #0]
 800411a:	83bb      	strh	r3, [r7, #28]
 800411c:	8bbb      	ldrh	r3, [r7, #28]
 800411e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004122:	2b00      	cmp	r3, #0
 8004124:	d01b      	beq.n	800415e <USB_DeactivateEndpoint+0x1da>
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	781b      	ldrb	r3, [r3, #0]
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	4413      	add	r3, r2
 8004130:	881b      	ldrh	r3, [r3, #0]
 8004132:	b29b      	uxth	r3, r3
 8004134:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004138:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800413c:	837b      	strh	r3, [r7, #26]
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	009b      	lsls	r3, r3, #2
 8004146:	441a      	add	r2, r3
 8004148:	8b7b      	ldrh	r3, [r7, #26]
 800414a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800414e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004152:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004156:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800415a:	b29b      	uxth	r3, r3
 800415c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	4413      	add	r3, r2
 8004168:	881b      	ldrh	r3, [r3, #0]
 800416a:	b29b      	uxth	r3, r3
 800416c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004170:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004174:	833b      	strh	r3, [r7, #24]
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	009b      	lsls	r3, r3, #2
 800417e:	441a      	add	r2, r3
 8004180:	8b3b      	ldrh	r3, [r7, #24]
 8004182:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004186:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800418a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800418e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004192:	b29b      	uxth	r3, r3
 8004194:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	4413      	add	r3, r2
 80041a0:	881b      	ldrh	r3, [r3, #0]
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80041a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041ac:	82fb      	strh	r3, [r7, #22]
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	781b      	ldrb	r3, [r3, #0]
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	441a      	add	r2, r3
 80041b8:	8afb      	ldrh	r3, [r7, #22]
 80041ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	781b      	ldrb	r3, [r3, #0]
 80041d4:	009b      	lsls	r3, r3, #2
 80041d6:	4413      	add	r3, r2
 80041d8:	881b      	ldrh	r3, [r3, #0]
 80041da:	b29b      	uxth	r3, r3
 80041dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041e4:	82bb      	strh	r3, [r7, #20]
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	781b      	ldrb	r3, [r3, #0]
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	441a      	add	r2, r3
 80041f0:	8abb      	ldrh	r3, [r7, #20]
 80041f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004202:	b29b      	uxth	r3, r3
 8004204:	8013      	strh	r3, [r2, #0]
 8004206:	e0a3      	b.n	8004350 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004208:	687a      	ldr	r2, [r7, #4]
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	781b      	ldrb	r3, [r3, #0]
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	4413      	add	r3, r2
 8004212:	881b      	ldrh	r3, [r3, #0]
 8004214:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004216:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004218:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800421c:	2b00      	cmp	r3, #0
 800421e:	d01b      	beq.n	8004258 <USB_DeactivateEndpoint+0x2d4>
 8004220:	687a      	ldr	r2, [r7, #4]
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	4413      	add	r3, r2
 800422a:	881b      	ldrh	r3, [r3, #0]
 800422c:	b29b      	uxth	r3, r3
 800422e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004232:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004236:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	781b      	ldrb	r3, [r3, #0]
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	441a      	add	r2, r3
 8004242:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004244:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004248:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800424c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004250:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004254:	b29b      	uxth	r3, r3
 8004256:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	781b      	ldrb	r3, [r3, #0]
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	4413      	add	r3, r2
 8004262:	881b      	ldrh	r3, [r3, #0]
 8004264:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004266:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004268:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800426c:	2b00      	cmp	r3, #0
 800426e:	d01b      	beq.n	80042a8 <USB_DeactivateEndpoint+0x324>
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	781b      	ldrb	r3, [r3, #0]
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	4413      	add	r3, r2
 800427a:	881b      	ldrh	r3, [r3, #0]
 800427c:	b29b      	uxth	r3, r3
 800427e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004286:	853b      	strh	r3, [r7, #40]	; 0x28
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	781b      	ldrb	r3, [r3, #0]
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	441a      	add	r2, r3
 8004292:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004294:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004298:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800429c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042a0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80042a4:	b29b      	uxth	r3, r3
 80042a6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	781b      	ldrb	r3, [r3, #0]
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	4413      	add	r3, r2
 80042b2:	881b      	ldrh	r3, [r3, #0]
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042be:	84fb      	strh	r3, [r7, #38]	; 0x26
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	441a      	add	r2, r3
 80042ca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80042cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80042d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042dc:	b29b      	uxth	r3, r3
 80042de:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	781b      	ldrb	r3, [r3, #0]
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	4413      	add	r3, r2
 80042ea:	881b      	ldrh	r3, [r3, #0]
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042f6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	781b      	ldrb	r3, [r3, #0]
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	441a      	add	r2, r3
 8004302:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004304:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004308:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800430c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004310:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004314:	b29b      	uxth	r3, r3
 8004316:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004318:	687a      	ldr	r2, [r7, #4]
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	781b      	ldrb	r3, [r3, #0]
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	4413      	add	r3, r2
 8004322:	881b      	ldrh	r3, [r3, #0]
 8004324:	b29b      	uxth	r3, r3
 8004326:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800432a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800432e:	847b      	strh	r3, [r7, #34]	; 0x22
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	441a      	add	r2, r3
 800433a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800433c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004340:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004344:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004348:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800434c:	b29b      	uxth	r3, r3
 800434e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004350:	2300      	movs	r3, #0
}
 8004352:	4618      	mov	r0, r3
 8004354:	3734      	adds	r7, #52	; 0x34
 8004356:	46bd      	mov	sp, r7
 8004358:	bc80      	pop	{r7}
 800435a:	4770      	bx	lr

0800435c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b0c2      	sub	sp, #264	; 0x108
 8004360:	af00      	add	r7, sp, #0
 8004362:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004366:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800436a:	6018      	str	r0, [r3, #0]
 800436c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004370:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004374:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004376:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800437a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	785b      	ldrb	r3, [r3, #1]
 8004382:	2b01      	cmp	r3, #1
 8004384:	f040 86b7 	bne.w	80050f6 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004388:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800438c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	699a      	ldr	r2, [r3, #24]
 8004394:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004398:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	691b      	ldr	r3, [r3, #16]
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d908      	bls.n	80043b6 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80043a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80043a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	691b      	ldr	r3, [r3, #16]
 80043b0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80043b4:	e007      	b.n	80043c6 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80043b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80043ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	699b      	ldr	r3, [r3, #24]
 80043c2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80043c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80043ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	7b1b      	ldrb	r3, [r3, #12]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d13a      	bne.n	800444c <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80043d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80043da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	6959      	ldr	r1, [r3, #20]
 80043e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80043e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	88da      	ldrh	r2, [r3, #6]
 80043ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80043f8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80043fc:	6800      	ldr	r0, [r0, #0]
 80043fe:	f001 fc9c 	bl	8005d3a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004402:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004406:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	613b      	str	r3, [r7, #16]
 800440e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004412:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800441c:	b29b      	uxth	r3, r3
 800441e:	461a      	mov	r2, r3
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	4413      	add	r3, r2
 8004424:	613b      	str	r3, [r7, #16]
 8004426:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800442a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	781b      	ldrb	r3, [r3, #0]
 8004432:	011a      	lsls	r2, r3, #4
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	4413      	add	r3, r2
 8004438:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800443c:	60fb      	str	r3, [r7, #12]
 800443e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004442:	b29a      	uxth	r2, r3
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	801a      	strh	r2, [r3, #0]
 8004448:	f000 be1f 	b.w	800508a <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800444c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004450:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	78db      	ldrb	r3, [r3, #3]
 8004458:	2b02      	cmp	r3, #2
 800445a:	f040 8462 	bne.w	8004d22 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800445e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004462:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	6a1a      	ldr	r2, [r3, #32]
 800446a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800446e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	429a      	cmp	r2, r3
 8004478:	f240 83df 	bls.w	8004c3a <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800447c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004480:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800448a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	781b      	ldrb	r3, [r3, #0]
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	4413      	add	r3, r2
 8004496:	881b      	ldrh	r3, [r3, #0]
 8004498:	b29b      	uxth	r3, r3
 800449a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800449e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044a2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80044a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80044aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80044b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	781b      	ldrb	r3, [r3, #0]
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	441a      	add	r2, r3
 80044c0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80044c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044cc:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80044d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80044d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80044dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	6a1a      	ldr	r2, [r3, #32]
 80044e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80044e8:	1ad2      	subs	r2, r2, r3
 80044ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80044ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80044f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80044fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004504:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	781b      	ldrb	r3, [r3, #0]
 800450c:	009b      	lsls	r3, r3, #2
 800450e:	4413      	add	r3, r2
 8004510:	881b      	ldrh	r3, [r3, #0]
 8004512:	b29b      	uxth	r3, r3
 8004514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004518:	2b00      	cmp	r3, #0
 800451a:	f000 81c7 	beq.w	80048ac <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800451e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004522:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	633b      	str	r3, [r7, #48]	; 0x30
 800452a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800452e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	785b      	ldrb	r3, [r3, #1]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d177      	bne.n	800462a <USB_EPStartXfer+0x2ce>
 800453a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800453e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	62bb      	str	r3, [r7, #40]	; 0x28
 8004546:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800454a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004554:	b29b      	uxth	r3, r3
 8004556:	461a      	mov	r2, r3
 8004558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800455a:	4413      	add	r3, r2
 800455c:	62bb      	str	r3, [r7, #40]	; 0x28
 800455e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004562:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	781b      	ldrb	r3, [r3, #0]
 800456a:	011a      	lsls	r2, r3, #4
 800456c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800456e:	4413      	add	r3, r2
 8004570:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004574:	627b      	str	r3, [r7, #36]	; 0x24
 8004576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004578:	881b      	ldrh	r3, [r3, #0]
 800457a:	b29b      	uxth	r3, r3
 800457c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004580:	b29a      	uxth	r2, r3
 8004582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004584:	801a      	strh	r2, [r3, #0]
 8004586:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800458a:	2b3e      	cmp	r3, #62	; 0x3e
 800458c:	d921      	bls.n	80045d2 <USB_EPStartXfer+0x276>
 800458e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004592:	095b      	lsrs	r3, r3, #5
 8004594:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004598:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800459c:	f003 031f 	and.w	r3, r3, #31
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d104      	bne.n	80045ae <USB_EPStartXfer+0x252>
 80045a4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80045a8:	3b01      	subs	r3, #1
 80045aa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80045ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b0:	881b      	ldrh	r3, [r3, #0]
 80045b2:	b29a      	uxth	r2, r3
 80045b4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	029b      	lsls	r3, r3, #10
 80045bc:	b29b      	uxth	r3, r3
 80045be:	4313      	orrs	r3, r2
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045ca:	b29a      	uxth	r2, r3
 80045cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ce:	801a      	strh	r2, [r3, #0]
 80045d0:	e050      	b.n	8004674 <USB_EPStartXfer+0x318>
 80045d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d10a      	bne.n	80045f0 <USB_EPStartXfer+0x294>
 80045da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045dc:	881b      	ldrh	r3, [r3, #0]
 80045de:	b29b      	uxth	r3, r3
 80045e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045e8:	b29a      	uxth	r2, r3
 80045ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ec:	801a      	strh	r2, [r3, #0]
 80045ee:	e041      	b.n	8004674 <USB_EPStartXfer+0x318>
 80045f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045f4:	085b      	lsrs	r3, r3, #1
 80045f6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80045fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045fe:	f003 0301 	and.w	r3, r3, #1
 8004602:	2b00      	cmp	r3, #0
 8004604:	d004      	beq.n	8004610 <USB_EPStartXfer+0x2b4>
 8004606:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800460a:	3301      	adds	r3, #1
 800460c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004612:	881b      	ldrh	r3, [r3, #0]
 8004614:	b29a      	uxth	r2, r3
 8004616:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800461a:	b29b      	uxth	r3, r3
 800461c:	029b      	lsls	r3, r3, #10
 800461e:	b29b      	uxth	r3, r3
 8004620:	4313      	orrs	r3, r2
 8004622:	b29a      	uxth	r2, r3
 8004624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004626:	801a      	strh	r2, [r3, #0]
 8004628:	e024      	b.n	8004674 <USB_EPStartXfer+0x318>
 800462a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800462e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	785b      	ldrb	r3, [r3, #1]
 8004636:	2b01      	cmp	r3, #1
 8004638:	d11c      	bne.n	8004674 <USB_EPStartXfer+0x318>
 800463a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800463e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004648:	b29b      	uxth	r3, r3
 800464a:	461a      	mov	r2, r3
 800464c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800464e:	4413      	add	r3, r2
 8004650:	633b      	str	r3, [r7, #48]	; 0x30
 8004652:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004656:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	011a      	lsls	r2, r3, #4
 8004660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004662:	4413      	add	r3, r2
 8004664:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004668:	62fb      	str	r3, [r7, #44]	; 0x2c
 800466a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800466e:	b29a      	uxth	r2, r3
 8004670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004672:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004674:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004678:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	895b      	ldrh	r3, [r3, #10]
 8004680:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004684:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004688:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	6959      	ldr	r1, [r3, #20]
 8004690:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004694:	b29b      	uxth	r3, r3
 8004696:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800469a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800469e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80046a2:	6800      	ldr	r0, [r0, #0]
 80046a4:	f001 fb49 	bl	8005d3a <USB_WritePMA>
            ep->xfer_buff += len;
 80046a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80046ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	695a      	ldr	r2, [r3, #20]
 80046b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80046b8:	441a      	add	r2, r3
 80046ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80046be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80046c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80046ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	6a1a      	ldr	r2, [r3, #32]
 80046d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80046d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	691b      	ldr	r3, [r3, #16]
 80046de:	429a      	cmp	r2, r3
 80046e0:	d90f      	bls.n	8004702 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80046e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80046e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	6a1a      	ldr	r2, [r3, #32]
 80046ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80046f2:	1ad2      	subs	r2, r2, r3
 80046f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80046f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	621a      	str	r2, [r3, #32]
 8004700:	e00e      	b.n	8004720 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8004702:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004706:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	6a1b      	ldr	r3, [r3, #32]
 800470e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8004712:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004716:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	2200      	movs	r2, #0
 800471e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004720:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004724:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	785b      	ldrb	r3, [r3, #1]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d177      	bne.n	8004820 <USB_EPStartXfer+0x4c4>
 8004730:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004734:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	61bb      	str	r3, [r7, #24]
 800473c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004740:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800474a:	b29b      	uxth	r3, r3
 800474c:	461a      	mov	r2, r3
 800474e:	69bb      	ldr	r3, [r7, #24]
 8004750:	4413      	add	r3, r2
 8004752:	61bb      	str	r3, [r7, #24]
 8004754:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004758:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	781b      	ldrb	r3, [r3, #0]
 8004760:	011a      	lsls	r2, r3, #4
 8004762:	69bb      	ldr	r3, [r7, #24]
 8004764:	4413      	add	r3, r2
 8004766:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800476a:	617b      	str	r3, [r7, #20]
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	881b      	ldrh	r3, [r3, #0]
 8004770:	b29b      	uxth	r3, r3
 8004772:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004776:	b29a      	uxth	r2, r3
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	801a      	strh	r2, [r3, #0]
 800477c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004780:	2b3e      	cmp	r3, #62	; 0x3e
 8004782:	d921      	bls.n	80047c8 <USB_EPStartXfer+0x46c>
 8004784:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004788:	095b      	lsrs	r3, r3, #5
 800478a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800478e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004792:	f003 031f 	and.w	r3, r3, #31
 8004796:	2b00      	cmp	r3, #0
 8004798:	d104      	bne.n	80047a4 <USB_EPStartXfer+0x448>
 800479a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800479e:	3b01      	subs	r3, #1
 80047a0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	881b      	ldrh	r3, [r3, #0]
 80047a8:	b29a      	uxth	r2, r3
 80047aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	029b      	lsls	r3, r3, #10
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	4313      	orrs	r3, r2
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047c0:	b29a      	uxth	r2, r3
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	801a      	strh	r2, [r3, #0]
 80047c6:	e056      	b.n	8004876 <USB_EPStartXfer+0x51a>
 80047c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d10a      	bne.n	80047e6 <USB_EPStartXfer+0x48a>
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	881b      	ldrh	r3, [r3, #0]
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047de:	b29a      	uxth	r2, r3
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	801a      	strh	r2, [r3, #0]
 80047e4:	e047      	b.n	8004876 <USB_EPStartXfer+0x51a>
 80047e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80047ea:	085b      	lsrs	r3, r3, #1
 80047ec:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80047f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80047f4:	f003 0301 	and.w	r3, r3, #1
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d004      	beq.n	8004806 <USB_EPStartXfer+0x4aa>
 80047fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004800:	3301      	adds	r3, #1
 8004802:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	881b      	ldrh	r3, [r3, #0]
 800480a:	b29a      	uxth	r2, r3
 800480c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004810:	b29b      	uxth	r3, r3
 8004812:	029b      	lsls	r3, r3, #10
 8004814:	b29b      	uxth	r3, r3
 8004816:	4313      	orrs	r3, r2
 8004818:	b29a      	uxth	r2, r3
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	801a      	strh	r2, [r3, #0]
 800481e:	e02a      	b.n	8004876 <USB_EPStartXfer+0x51a>
 8004820:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004824:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	785b      	ldrb	r3, [r3, #1]
 800482c:	2b01      	cmp	r3, #1
 800482e:	d122      	bne.n	8004876 <USB_EPStartXfer+0x51a>
 8004830:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004834:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	623b      	str	r3, [r7, #32]
 800483c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004840:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800484a:	b29b      	uxth	r3, r3
 800484c:	461a      	mov	r2, r3
 800484e:	6a3b      	ldr	r3, [r7, #32]
 8004850:	4413      	add	r3, r2
 8004852:	623b      	str	r3, [r7, #32]
 8004854:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004858:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	781b      	ldrb	r3, [r3, #0]
 8004860:	011a      	lsls	r2, r3, #4
 8004862:	6a3b      	ldr	r3, [r7, #32]
 8004864:	4413      	add	r3, r2
 8004866:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800486a:	61fb      	str	r3, [r7, #28]
 800486c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004870:	b29a      	uxth	r2, r3
 8004872:	69fb      	ldr	r3, [r7, #28]
 8004874:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004876:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800487a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	891b      	ldrh	r3, [r3, #8]
 8004882:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004886:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800488a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	6959      	ldr	r1, [r3, #20]
 8004892:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004896:	b29b      	uxth	r3, r3
 8004898:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800489c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80048a0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80048a4:	6800      	ldr	r0, [r0, #0]
 80048a6:	f001 fa48 	bl	8005d3a <USB_WritePMA>
 80048aa:	e3ee      	b.n	800508a <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80048ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	785b      	ldrb	r3, [r3, #1]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d177      	bne.n	80049ac <USB_EPStartXfer+0x650>
 80048bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80048c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	461a      	mov	r2, r3
 80048da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048dc:	4413      	add	r3, r2
 80048de:	64bb      	str	r3, [r7, #72]	; 0x48
 80048e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	011a      	lsls	r2, r3, #4
 80048ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048f0:	4413      	add	r3, r2
 80048f2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80048f6:	647b      	str	r3, [r7, #68]	; 0x44
 80048f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048fa:	881b      	ldrh	r3, [r3, #0]
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004902:	b29a      	uxth	r2, r3
 8004904:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004906:	801a      	strh	r2, [r3, #0]
 8004908:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800490c:	2b3e      	cmp	r3, #62	; 0x3e
 800490e:	d921      	bls.n	8004954 <USB_EPStartXfer+0x5f8>
 8004910:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004914:	095b      	lsrs	r3, r3, #5
 8004916:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800491a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800491e:	f003 031f 	and.w	r3, r3, #31
 8004922:	2b00      	cmp	r3, #0
 8004924:	d104      	bne.n	8004930 <USB_EPStartXfer+0x5d4>
 8004926:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800492a:	3b01      	subs	r3, #1
 800492c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004930:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004932:	881b      	ldrh	r3, [r3, #0]
 8004934:	b29a      	uxth	r2, r3
 8004936:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800493a:	b29b      	uxth	r3, r3
 800493c:	029b      	lsls	r3, r3, #10
 800493e:	b29b      	uxth	r3, r3
 8004940:	4313      	orrs	r3, r2
 8004942:	b29b      	uxth	r3, r3
 8004944:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004948:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800494c:	b29a      	uxth	r2, r3
 800494e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004950:	801a      	strh	r2, [r3, #0]
 8004952:	e056      	b.n	8004a02 <USB_EPStartXfer+0x6a6>
 8004954:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004958:	2b00      	cmp	r3, #0
 800495a:	d10a      	bne.n	8004972 <USB_EPStartXfer+0x616>
 800495c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800495e:	881b      	ldrh	r3, [r3, #0]
 8004960:	b29b      	uxth	r3, r3
 8004962:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004966:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800496a:	b29a      	uxth	r2, r3
 800496c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800496e:	801a      	strh	r2, [r3, #0]
 8004970:	e047      	b.n	8004a02 <USB_EPStartXfer+0x6a6>
 8004972:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004976:	085b      	lsrs	r3, r3, #1
 8004978:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800497c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004980:	f003 0301 	and.w	r3, r3, #1
 8004984:	2b00      	cmp	r3, #0
 8004986:	d004      	beq.n	8004992 <USB_EPStartXfer+0x636>
 8004988:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800498c:	3301      	adds	r3, #1
 800498e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004992:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004994:	881b      	ldrh	r3, [r3, #0]
 8004996:	b29a      	uxth	r2, r3
 8004998:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800499c:	b29b      	uxth	r3, r3
 800499e:	029b      	lsls	r3, r3, #10
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	4313      	orrs	r3, r2
 80049a4:	b29a      	uxth	r2, r3
 80049a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049a8:	801a      	strh	r2, [r3, #0]
 80049aa:	e02a      	b.n	8004a02 <USB_EPStartXfer+0x6a6>
 80049ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80049b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	785b      	ldrb	r3, [r3, #1]
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d122      	bne.n	8004a02 <USB_EPStartXfer+0x6a6>
 80049bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80049c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	653b      	str	r3, [r7, #80]	; 0x50
 80049c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80049cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	461a      	mov	r2, r3
 80049da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049dc:	4413      	add	r3, r2
 80049de:	653b      	str	r3, [r7, #80]	; 0x50
 80049e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80049e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	781b      	ldrb	r3, [r3, #0]
 80049ec:	011a      	lsls	r2, r3, #4
 80049ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049f0:	4413      	add	r3, r2
 80049f2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80049f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049fc:	b29a      	uxth	r2, r3
 80049fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a00:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004a02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	891b      	ldrh	r3, [r3, #8]
 8004a0e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004a12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	6959      	ldr	r1, [r3, #20]
 8004a1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a22:	b29b      	uxth	r3, r3
 8004a24:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004a28:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004a2c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004a30:	6800      	ldr	r0, [r0, #0]
 8004a32:	f001 f982 	bl	8005d3a <USB_WritePMA>
            ep->xfer_buff += len;
 8004a36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	695a      	ldr	r2, [r3, #20]
 8004a42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a46:	441a      	add	r2, r3
 8004a48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004a54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	6a1a      	ldr	r2, [r3, #32]
 8004a60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	691b      	ldr	r3, [r3, #16]
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d90f      	bls.n	8004a90 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8004a70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	6a1a      	ldr	r2, [r3, #32]
 8004a7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a80:	1ad2      	subs	r2, r2, r3
 8004a82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	621a      	str	r2, [r3, #32]
 8004a8e:	e00e      	b.n	8004aae <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8004a90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	6a1b      	ldr	r3, [r3, #32]
 8004a9c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8004aa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004aa4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004aae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ab2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	643b      	str	r3, [r7, #64]	; 0x40
 8004aba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004abe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	785b      	ldrb	r3, [r3, #1]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d177      	bne.n	8004bba <USB_EPStartXfer+0x85e>
 8004aca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ace:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ad6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ada:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ae4:	b29b      	uxth	r3, r3
 8004ae6:	461a      	mov	r2, r3
 8004ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aea:	4413      	add	r3, r2
 8004aec:	63bb      	str	r3, [r7, #56]	; 0x38
 8004aee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004af2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	781b      	ldrb	r3, [r3, #0]
 8004afa:	011a      	lsls	r2, r3, #4
 8004afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004afe:	4413      	add	r3, r2
 8004b00:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004b04:	637b      	str	r3, [r7, #52]	; 0x34
 8004b06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b08:	881b      	ldrh	r3, [r3, #0]
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b10:	b29a      	uxth	r2, r3
 8004b12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b14:	801a      	strh	r2, [r3, #0]
 8004b16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b1a:	2b3e      	cmp	r3, #62	; 0x3e
 8004b1c:	d921      	bls.n	8004b62 <USB_EPStartXfer+0x806>
 8004b1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b22:	095b      	lsrs	r3, r3, #5
 8004b24:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004b28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b2c:	f003 031f 	and.w	r3, r3, #31
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d104      	bne.n	8004b3e <USB_EPStartXfer+0x7e2>
 8004b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b38:	3b01      	subs	r3, #1
 8004b3a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004b3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b40:	881b      	ldrh	r3, [r3, #0]
 8004b42:	b29a      	uxth	r2, r3
 8004b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	029b      	lsls	r3, r3, #10
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b5a:	b29a      	uxth	r2, r3
 8004b5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b5e:	801a      	strh	r2, [r3, #0]
 8004b60:	e050      	b.n	8004c04 <USB_EPStartXfer+0x8a8>
 8004b62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d10a      	bne.n	8004b80 <USB_EPStartXfer+0x824>
 8004b6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b6c:	881b      	ldrh	r3, [r3, #0]
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b78:	b29a      	uxth	r2, r3
 8004b7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b7c:	801a      	strh	r2, [r3, #0]
 8004b7e:	e041      	b.n	8004c04 <USB_EPStartXfer+0x8a8>
 8004b80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b84:	085b      	lsrs	r3, r3, #1
 8004b86:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004b8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b8e:	f003 0301 	and.w	r3, r3, #1
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d004      	beq.n	8004ba0 <USB_EPStartXfer+0x844>
 8004b96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b9a:	3301      	adds	r3, #1
 8004b9c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004ba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ba2:	881b      	ldrh	r3, [r3, #0]
 8004ba4:	b29a      	uxth	r2, r3
 8004ba6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	029b      	lsls	r3, r3, #10
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	b29a      	uxth	r2, r3
 8004bb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bb6:	801a      	strh	r2, [r3, #0]
 8004bb8:	e024      	b.n	8004c04 <USB_EPStartXfer+0x8a8>
 8004bba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004bbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	785b      	ldrb	r3, [r3, #1]
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d11c      	bne.n	8004c04 <USB_EPStartXfer+0x8a8>
 8004bca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004bce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bd8:	b29b      	uxth	r3, r3
 8004bda:	461a      	mov	r2, r3
 8004bdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bde:	4413      	add	r3, r2
 8004be0:	643b      	str	r3, [r7, #64]	; 0x40
 8004be2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004be6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	781b      	ldrb	r3, [r3, #0]
 8004bee:	011a      	lsls	r2, r3, #4
 8004bf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bf2:	4413      	add	r3, r2
 8004bf4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004bf8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004bfe:	b29a      	uxth	r2, r3
 8004c00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c02:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004c04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	895b      	ldrh	r3, [r3, #10]
 8004c10:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004c14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	6959      	ldr	r1, [r3, #20]
 8004c20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004c2a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004c2e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004c32:	6800      	ldr	r0, [r0, #0]
 8004c34:	f001 f881 	bl	8005d3a <USB_WritePMA>
 8004c38:	e227      	b.n	800508a <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8004c3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	6a1b      	ldr	r3, [r3, #32]
 8004c46:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8004c4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c4e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	781b      	ldrb	r3, [r3, #0]
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	4413      	add	r3, r2
 8004c64:	881b      	ldrh	r3, [r3, #0]
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004c6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c70:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8004c74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c78:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	781b      	ldrb	r3, [r3, #0]
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	441a      	add	r2, r3
 8004c8e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8004c92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004ca6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004caa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004cb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004cb6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cc6:	4413      	add	r3, r2
 8004cc8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004cca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004cce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	781b      	ldrb	r3, [r3, #0]
 8004cd6:	011a      	lsls	r2, r3, #4
 8004cd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cda:	4413      	add	r3, r2
 8004cdc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004ce0:	65bb      	str	r3, [r7, #88]	; 0x58
 8004ce2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ce6:	b29a      	uxth	r2, r3
 8004ce8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004cea:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004cec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004cf0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	891b      	ldrh	r3, [r3, #8]
 8004cf8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004cfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	6959      	ldr	r1, [r3, #20]
 8004d08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004d12:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004d16:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004d1a:	6800      	ldr	r0, [r0, #0]
 8004d1c:	f001 f80d 	bl	8005d3a <USB_WritePMA>
 8004d20:	e1b3      	b.n	800508a <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8004d22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	6a1a      	ldr	r2, [r3, #32]
 8004d2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d32:	1ad2      	subs	r2, r2, r3
 8004d34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004d40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d44:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	781b      	ldrb	r3, [r3, #0]
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	4413      	add	r3, r2
 8004d5a:	881b      	ldrh	r3, [r3, #0]
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	f000 80c6 	beq.w	8004ef4 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004d68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d6c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	673b      	str	r3, [r7, #112]	; 0x70
 8004d74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	785b      	ldrb	r3, [r3, #1]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d177      	bne.n	8004e74 <USB_EPStartXfer+0xb18>
 8004d84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d88:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d94:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	461a      	mov	r2, r3
 8004da2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004da4:	4413      	add	r3, r2
 8004da6:	66bb      	str	r3, [r7, #104]	; 0x68
 8004da8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004dac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	781b      	ldrb	r3, [r3, #0]
 8004db4:	011a      	lsls	r2, r3, #4
 8004db6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004db8:	4413      	add	r3, r2
 8004dba:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004dbe:	667b      	str	r3, [r7, #100]	; 0x64
 8004dc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004dc2:	881b      	ldrh	r3, [r3, #0]
 8004dc4:	b29b      	uxth	r3, r3
 8004dc6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004dca:	b29a      	uxth	r2, r3
 8004dcc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004dce:	801a      	strh	r2, [r3, #0]
 8004dd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004dd4:	2b3e      	cmp	r3, #62	; 0x3e
 8004dd6:	d921      	bls.n	8004e1c <USB_EPStartXfer+0xac0>
 8004dd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ddc:	095b      	lsrs	r3, r3, #5
 8004dde:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004de2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004de6:	f003 031f 	and.w	r3, r3, #31
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d104      	bne.n	8004df8 <USB_EPStartXfer+0xa9c>
 8004dee:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004df2:	3b01      	subs	r3, #1
 8004df4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004df8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004dfa:	881b      	ldrh	r3, [r3, #0]
 8004dfc:	b29a      	uxth	r2, r3
 8004dfe:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	029b      	lsls	r3, r3, #10
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e14:	b29a      	uxth	r2, r3
 8004e16:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e18:	801a      	strh	r2, [r3, #0]
 8004e1a:	e050      	b.n	8004ebe <USB_EPStartXfer+0xb62>
 8004e1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d10a      	bne.n	8004e3a <USB_EPStartXfer+0xade>
 8004e24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e26:	881b      	ldrh	r3, [r3, #0]
 8004e28:	b29b      	uxth	r3, r3
 8004e2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e32:	b29a      	uxth	r2, r3
 8004e34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e36:	801a      	strh	r2, [r3, #0]
 8004e38:	e041      	b.n	8004ebe <USB_EPStartXfer+0xb62>
 8004e3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e3e:	085b      	lsrs	r3, r3, #1
 8004e40:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004e44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e48:	f003 0301 	and.w	r3, r3, #1
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d004      	beq.n	8004e5a <USB_EPStartXfer+0xafe>
 8004e50:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004e54:	3301      	adds	r3, #1
 8004e56:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004e5a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e5c:	881b      	ldrh	r3, [r3, #0]
 8004e5e:	b29a      	uxth	r2, r3
 8004e60:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004e64:	b29b      	uxth	r3, r3
 8004e66:	029b      	lsls	r3, r3, #10
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	b29a      	uxth	r2, r3
 8004e6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e70:	801a      	strh	r2, [r3, #0]
 8004e72:	e024      	b.n	8004ebe <USB_EPStartXfer+0xb62>
 8004e74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	785b      	ldrb	r3, [r3, #1]
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d11c      	bne.n	8004ebe <USB_EPStartXfer+0xb62>
 8004e84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e88:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	461a      	mov	r2, r3
 8004e96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e98:	4413      	add	r3, r2
 8004e9a:	673b      	str	r3, [r7, #112]	; 0x70
 8004e9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ea0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	011a      	lsls	r2, r3, #4
 8004eaa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004eac:	4413      	add	r3, r2
 8004eae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004eb2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004eb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004eb8:	b29a      	uxth	r2, r3
 8004eba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ebc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8004ebe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ec2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	895b      	ldrh	r3, [r3, #10]
 8004eca:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004ece:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ed2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	6959      	ldr	r1, [r3, #20]
 8004eda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004ee4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004ee8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004eec:	6800      	ldr	r0, [r0, #0]
 8004eee:	f000 ff24 	bl	8005d3a <USB_WritePMA>
 8004ef2:	e0ca      	b.n	800508a <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004ef4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ef8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	785b      	ldrb	r3, [r3, #1]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d177      	bne.n	8004ff4 <USB_EPStartXfer+0xc98>
 8004f04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f08:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004f10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f14:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	461a      	mov	r2, r3
 8004f22:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004f24:	4413      	add	r3, r2
 8004f26:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004f28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	781b      	ldrb	r3, [r3, #0]
 8004f34:	011a      	lsls	r2, r3, #4
 8004f36:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004f38:	4413      	add	r3, r2
 8004f3a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004f3e:	67bb      	str	r3, [r7, #120]	; 0x78
 8004f40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f42:	881b      	ldrh	r3, [r3, #0]
 8004f44:	b29b      	uxth	r3, r3
 8004f46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f4a:	b29a      	uxth	r2, r3
 8004f4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f4e:	801a      	strh	r2, [r3, #0]
 8004f50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f54:	2b3e      	cmp	r3, #62	; 0x3e
 8004f56:	d921      	bls.n	8004f9c <USB_EPStartXfer+0xc40>
 8004f58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f5c:	095b      	lsrs	r3, r3, #5
 8004f5e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004f62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f66:	f003 031f 	and.w	r3, r3, #31
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d104      	bne.n	8004f78 <USB_EPStartXfer+0xc1c>
 8004f6e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004f72:	3b01      	subs	r3, #1
 8004f74:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004f78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f7a:	881b      	ldrh	r3, [r3, #0]
 8004f7c:	b29a      	uxth	r2, r3
 8004f7e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	029b      	lsls	r3, r3, #10
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f94:	b29a      	uxth	r2, r3
 8004f96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f98:	801a      	strh	r2, [r3, #0]
 8004f9a:	e05c      	b.n	8005056 <USB_EPStartXfer+0xcfa>
 8004f9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d10a      	bne.n	8004fba <USB_EPStartXfer+0xc5e>
 8004fa4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fa6:	881b      	ldrh	r3, [r3, #0]
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fb2:	b29a      	uxth	r2, r3
 8004fb4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fb6:	801a      	strh	r2, [r3, #0]
 8004fb8:	e04d      	b.n	8005056 <USB_EPStartXfer+0xcfa>
 8004fba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fbe:	085b      	lsrs	r3, r3, #1
 8004fc0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004fc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fc8:	f003 0301 	and.w	r3, r3, #1
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d004      	beq.n	8004fda <USB_EPStartXfer+0xc7e>
 8004fd0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004fd4:	3301      	adds	r3, #1
 8004fd6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004fda:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fdc:	881b      	ldrh	r3, [r3, #0]
 8004fde:	b29a      	uxth	r2, r3
 8004fe0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004fe4:	b29b      	uxth	r3, r3
 8004fe6:	029b      	lsls	r3, r3, #10
 8004fe8:	b29b      	uxth	r3, r3
 8004fea:	4313      	orrs	r3, r2
 8004fec:	b29a      	uxth	r2, r3
 8004fee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ff0:	801a      	strh	r2, [r3, #0]
 8004ff2:	e030      	b.n	8005056 <USB_EPStartXfer+0xcfa>
 8004ff4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ff8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	785b      	ldrb	r3, [r3, #1]
 8005000:	2b01      	cmp	r3, #1
 8005002:	d128      	bne.n	8005056 <USB_EPStartXfer+0xcfa>
 8005004:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005008:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005012:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005016:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005020:	b29b      	uxth	r3, r3
 8005022:	461a      	mov	r2, r3
 8005024:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005028:	4413      	add	r3, r2
 800502a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800502e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005032:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	781b      	ldrb	r3, [r3, #0]
 800503a:	011a      	lsls	r2, r3, #4
 800503c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005040:	4413      	add	r3, r2
 8005042:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005046:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800504a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800504e:	b29a      	uxth	r2, r3
 8005050:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005054:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005056:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800505a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	891b      	ldrh	r3, [r3, #8]
 8005062:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005066:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800506a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	6959      	ldr	r1, [r3, #20]
 8005072:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005076:	b29b      	uxth	r3, r3
 8005078:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800507c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005080:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005084:	6800      	ldr	r0, [r0, #0]
 8005086:	f000 fe58 	bl	8005d3a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800508a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800508e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005098:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	009b      	lsls	r3, r3, #2
 80050a2:	4413      	add	r3, r2
 80050a4:	881b      	ldrh	r3, [r3, #0]
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050b0:	817b      	strh	r3, [r7, #10]
 80050b2:	897b      	ldrh	r3, [r7, #10]
 80050b4:	f083 0310 	eor.w	r3, r3, #16
 80050b8:	817b      	strh	r3, [r7, #10]
 80050ba:	897b      	ldrh	r3, [r7, #10]
 80050bc:	f083 0320 	eor.w	r3, r3, #32
 80050c0:	817b      	strh	r3, [r7, #10]
 80050c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	781b      	ldrb	r3, [r3, #0]
 80050d8:	009b      	lsls	r3, r3, #2
 80050da:	441a      	add	r2, r3
 80050dc:	897b      	ldrh	r3, [r7, #10]
 80050de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050ee:	b29b      	uxth	r3, r3
 80050f0:	8013      	strh	r3, [r2, #0]
 80050f2:	f000 bcde 	b.w	8005ab2 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80050f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	7b1b      	ldrb	r3, [r3, #12]
 8005102:	2b00      	cmp	r3, #0
 8005104:	f040 80bb 	bne.w	800527e <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005108:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800510c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	699a      	ldr	r2, [r3, #24]
 8005114:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005118:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	691b      	ldr	r3, [r3, #16]
 8005120:	429a      	cmp	r2, r3
 8005122:	d917      	bls.n	8005154 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8005124:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005128:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	691b      	ldr	r3, [r3, #16]
 8005130:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8005134:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005138:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	699a      	ldr	r2, [r3, #24]
 8005140:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005144:	1ad2      	subs	r2, r2, r3
 8005146:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800514a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	619a      	str	r2, [r3, #24]
 8005152:	e00e      	b.n	8005172 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8005154:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005158:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	699b      	ldr	r3, [r3, #24]
 8005160:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8005164:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005168:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	2200      	movs	r2, #0
 8005170:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005172:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005176:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005180:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005184:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800518e:	b29b      	uxth	r3, r3
 8005190:	461a      	mov	r2, r3
 8005192:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005196:	4413      	add	r3, r2
 8005198:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800519c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	781b      	ldrb	r3, [r3, #0]
 80051a8:	011a      	lsls	r2, r3, #4
 80051aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80051ae:	4413      	add	r3, r2
 80051b0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80051b4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80051b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80051bc:	881b      	ldrh	r3, [r3, #0]
 80051be:	b29b      	uxth	r3, r3
 80051c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051c4:	b29a      	uxth	r2, r3
 80051c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80051ca:	801a      	strh	r2, [r3, #0]
 80051cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051d0:	2b3e      	cmp	r3, #62	; 0x3e
 80051d2:	d924      	bls.n	800521e <USB_EPStartXfer+0xec2>
 80051d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051d8:	095b      	lsrs	r3, r3, #5
 80051da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80051de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051e2:	f003 031f 	and.w	r3, r3, #31
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d104      	bne.n	80051f4 <USB_EPStartXfer+0xe98>
 80051ea:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80051ee:	3b01      	subs	r3, #1
 80051f0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80051f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80051f8:	881b      	ldrh	r3, [r3, #0]
 80051fa:	b29a      	uxth	r2, r3
 80051fc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005200:	b29b      	uxth	r3, r3
 8005202:	029b      	lsls	r3, r3, #10
 8005204:	b29b      	uxth	r3, r3
 8005206:	4313      	orrs	r3, r2
 8005208:	b29b      	uxth	r3, r3
 800520a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800520e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005212:	b29a      	uxth	r2, r3
 8005214:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005218:	801a      	strh	r2, [r3, #0]
 800521a:	f000 bc10 	b.w	8005a3e <USB_EPStartXfer+0x16e2>
 800521e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005222:	2b00      	cmp	r3, #0
 8005224:	d10c      	bne.n	8005240 <USB_EPStartXfer+0xee4>
 8005226:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800522a:	881b      	ldrh	r3, [r3, #0]
 800522c:	b29b      	uxth	r3, r3
 800522e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005232:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005236:	b29a      	uxth	r2, r3
 8005238:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800523c:	801a      	strh	r2, [r3, #0]
 800523e:	e3fe      	b.n	8005a3e <USB_EPStartXfer+0x16e2>
 8005240:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005244:	085b      	lsrs	r3, r3, #1
 8005246:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800524a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800524e:	f003 0301 	and.w	r3, r3, #1
 8005252:	2b00      	cmp	r3, #0
 8005254:	d004      	beq.n	8005260 <USB_EPStartXfer+0xf04>
 8005256:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800525a:	3301      	adds	r3, #1
 800525c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005260:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005264:	881b      	ldrh	r3, [r3, #0]
 8005266:	b29a      	uxth	r2, r3
 8005268:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800526c:	b29b      	uxth	r3, r3
 800526e:	029b      	lsls	r3, r3, #10
 8005270:	b29b      	uxth	r3, r3
 8005272:	4313      	orrs	r3, r2
 8005274:	b29a      	uxth	r2, r3
 8005276:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800527a:	801a      	strh	r2, [r3, #0]
 800527c:	e3df      	b.n	8005a3e <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800527e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005282:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	78db      	ldrb	r3, [r3, #3]
 800528a:	2b02      	cmp	r3, #2
 800528c:	f040 8218 	bne.w	80056c0 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005290:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005294:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	785b      	ldrb	r3, [r3, #1]
 800529c:	2b00      	cmp	r3, #0
 800529e:	f040 809d 	bne.w	80053dc <USB_EPStartXfer+0x1080>
 80052a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80052b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052be:	b29b      	uxth	r3, r3
 80052c0:	461a      	mov	r2, r3
 80052c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80052c6:	4413      	add	r3, r2
 80052c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80052cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	781b      	ldrb	r3, [r3, #0]
 80052d8:	011a      	lsls	r2, r3, #4
 80052da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80052de:	4413      	add	r3, r2
 80052e0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80052e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80052e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80052ec:	881b      	ldrh	r3, [r3, #0]
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80052f4:	b29a      	uxth	r2, r3
 80052f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80052fa:	801a      	strh	r2, [r3, #0]
 80052fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005300:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	691b      	ldr	r3, [r3, #16]
 8005308:	2b3e      	cmp	r3, #62	; 0x3e
 800530a:	d92b      	bls.n	8005364 <USB_EPStartXfer+0x1008>
 800530c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005310:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	691b      	ldr	r3, [r3, #16]
 8005318:	095b      	lsrs	r3, r3, #5
 800531a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800531e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005322:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	691b      	ldr	r3, [r3, #16]
 800532a:	f003 031f 	and.w	r3, r3, #31
 800532e:	2b00      	cmp	r3, #0
 8005330:	d104      	bne.n	800533c <USB_EPStartXfer+0xfe0>
 8005332:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005336:	3b01      	subs	r3, #1
 8005338:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800533c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005340:	881b      	ldrh	r3, [r3, #0]
 8005342:	b29a      	uxth	r2, r3
 8005344:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005348:	b29b      	uxth	r3, r3
 800534a:	029b      	lsls	r3, r3, #10
 800534c:	b29b      	uxth	r3, r3
 800534e:	4313      	orrs	r3, r2
 8005350:	b29b      	uxth	r3, r3
 8005352:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005356:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800535a:	b29a      	uxth	r2, r3
 800535c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005360:	801a      	strh	r2, [r3, #0]
 8005362:	e070      	b.n	8005446 <USB_EPStartXfer+0x10ea>
 8005364:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005368:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	691b      	ldr	r3, [r3, #16]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d10c      	bne.n	800538e <USB_EPStartXfer+0x1032>
 8005374:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005378:	881b      	ldrh	r3, [r3, #0]
 800537a:	b29b      	uxth	r3, r3
 800537c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005380:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005384:	b29a      	uxth	r2, r3
 8005386:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800538a:	801a      	strh	r2, [r3, #0]
 800538c:	e05b      	b.n	8005446 <USB_EPStartXfer+0x10ea>
 800538e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005392:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	691b      	ldr	r3, [r3, #16]
 800539a:	085b      	lsrs	r3, r3, #1
 800539c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80053a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	691b      	ldr	r3, [r3, #16]
 80053ac:	f003 0301 	and.w	r3, r3, #1
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d004      	beq.n	80053be <USB_EPStartXfer+0x1062>
 80053b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053b8:	3301      	adds	r3, #1
 80053ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80053be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80053c2:	881b      	ldrh	r3, [r3, #0]
 80053c4:	b29a      	uxth	r2, r3
 80053c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	029b      	lsls	r3, r3, #10
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	4313      	orrs	r3, r2
 80053d2:	b29a      	uxth	r2, r3
 80053d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80053d8:	801a      	strh	r2, [r3, #0]
 80053da:	e034      	b.n	8005446 <USB_EPStartXfer+0x10ea>
 80053dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	785b      	ldrb	r3, [r3, #1]
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d12c      	bne.n	8005446 <USB_EPStartXfer+0x10ea>
 80053ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80053fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005408:	b29b      	uxth	r3, r3
 800540a:	461a      	mov	r2, r3
 800540c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005410:	4413      	add	r3, r2
 8005412:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005416:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800541a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	781b      	ldrb	r3, [r3, #0]
 8005422:	011a      	lsls	r2, r3, #4
 8005424:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005428:	4413      	add	r3, r2
 800542a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800542e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005432:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005436:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	691b      	ldr	r3, [r3, #16]
 800543e:	b29a      	uxth	r2, r3
 8005440:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005444:	801a      	strh	r2, [r3, #0]
 8005446:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800544a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005454:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005458:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	785b      	ldrb	r3, [r3, #1]
 8005460:	2b00      	cmp	r3, #0
 8005462:	f040 809d 	bne.w	80055a0 <USB_EPStartXfer+0x1244>
 8005466:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800546a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005474:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005478:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005482:	b29b      	uxth	r3, r3
 8005484:	461a      	mov	r2, r3
 8005486:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800548a:	4413      	add	r3, r2
 800548c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005490:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005494:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	781b      	ldrb	r3, [r3, #0]
 800549c:	011a      	lsls	r2, r3, #4
 800549e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80054a2:	4413      	add	r3, r2
 80054a4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80054a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80054ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80054b0:	881b      	ldrh	r3, [r3, #0]
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054b8:	b29a      	uxth	r2, r3
 80054ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80054be:	801a      	strh	r2, [r3, #0]
 80054c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	691b      	ldr	r3, [r3, #16]
 80054cc:	2b3e      	cmp	r3, #62	; 0x3e
 80054ce:	d92b      	bls.n	8005528 <USB_EPStartXfer+0x11cc>
 80054d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	691b      	ldr	r3, [r3, #16]
 80054dc:	095b      	lsrs	r3, r3, #5
 80054de:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80054e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	691b      	ldr	r3, [r3, #16]
 80054ee:	f003 031f 	and.w	r3, r3, #31
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d104      	bne.n	8005500 <USB_EPStartXfer+0x11a4>
 80054f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054fa:	3b01      	subs	r3, #1
 80054fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005500:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005504:	881b      	ldrh	r3, [r3, #0]
 8005506:	b29a      	uxth	r2, r3
 8005508:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800550c:	b29b      	uxth	r3, r3
 800550e:	029b      	lsls	r3, r3, #10
 8005510:	b29b      	uxth	r3, r3
 8005512:	4313      	orrs	r3, r2
 8005514:	b29b      	uxth	r3, r3
 8005516:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800551a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800551e:	b29a      	uxth	r2, r3
 8005520:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005524:	801a      	strh	r2, [r3, #0]
 8005526:	e069      	b.n	80055fc <USB_EPStartXfer+0x12a0>
 8005528:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800552c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	691b      	ldr	r3, [r3, #16]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d10c      	bne.n	8005552 <USB_EPStartXfer+0x11f6>
 8005538:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800553c:	881b      	ldrh	r3, [r3, #0]
 800553e:	b29b      	uxth	r3, r3
 8005540:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005544:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005548:	b29a      	uxth	r2, r3
 800554a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800554e:	801a      	strh	r2, [r3, #0]
 8005550:	e054      	b.n	80055fc <USB_EPStartXfer+0x12a0>
 8005552:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005556:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	691b      	ldr	r3, [r3, #16]
 800555e:	085b      	lsrs	r3, r3, #1
 8005560:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005564:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005568:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	691b      	ldr	r3, [r3, #16]
 8005570:	f003 0301 	and.w	r3, r3, #1
 8005574:	2b00      	cmp	r3, #0
 8005576:	d004      	beq.n	8005582 <USB_EPStartXfer+0x1226>
 8005578:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800557c:	3301      	adds	r3, #1
 800557e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005582:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005586:	881b      	ldrh	r3, [r3, #0]
 8005588:	b29a      	uxth	r2, r3
 800558a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800558e:	b29b      	uxth	r3, r3
 8005590:	029b      	lsls	r3, r3, #10
 8005592:	b29b      	uxth	r3, r3
 8005594:	4313      	orrs	r3, r2
 8005596:	b29a      	uxth	r2, r3
 8005598:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800559c:	801a      	strh	r2, [r3, #0]
 800559e:	e02d      	b.n	80055fc <USB_EPStartXfer+0x12a0>
 80055a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	785b      	ldrb	r3, [r3, #1]
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d125      	bne.n	80055fc <USB_EPStartXfer+0x12a0>
 80055b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055be:	b29b      	uxth	r3, r3
 80055c0:	461a      	mov	r2, r3
 80055c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80055c6:	4413      	add	r3, r2
 80055c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80055cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	781b      	ldrb	r3, [r3, #0]
 80055d8:	011a      	lsls	r2, r3, #4
 80055da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80055de:	4413      	add	r3, r2
 80055e0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80055e4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80055e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	691b      	ldr	r3, [r3, #16]
 80055f4:	b29a      	uxth	r2, r3
 80055f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80055fa:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80055fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005600:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	69db      	ldr	r3, [r3, #28]
 8005608:	2b00      	cmp	r3, #0
 800560a:	f000 8218 	beq.w	8005a3e <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800560e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005612:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800561c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	781b      	ldrb	r3, [r3, #0]
 8005624:	009b      	lsls	r3, r3, #2
 8005626:	4413      	add	r3, r2
 8005628:	881b      	ldrh	r3, [r3, #0]
 800562a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800562e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005632:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005636:	2b00      	cmp	r3, #0
 8005638:	d005      	beq.n	8005646 <USB_EPStartXfer+0x12ea>
 800563a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800563e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005642:	2b00      	cmp	r3, #0
 8005644:	d10d      	bne.n	8005662 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005646:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800564a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800564e:	2b00      	cmp	r3, #0
 8005650:	f040 81f5 	bne.w	8005a3e <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005654:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800565c:	2b00      	cmp	r3, #0
 800565e:	f040 81ee 	bne.w	8005a3e <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8005662:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005666:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800566a:	681a      	ldr	r2, [r3, #0]
 800566c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005670:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	781b      	ldrb	r3, [r3, #0]
 8005678:	009b      	lsls	r3, r3, #2
 800567a:	4413      	add	r3, r2
 800567c:	881b      	ldrh	r3, [r3, #0]
 800567e:	b29b      	uxth	r3, r3
 8005680:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005684:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005688:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800568c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005690:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800569a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	781b      	ldrb	r3, [r3, #0]
 80056a2:	009b      	lsls	r3, r3, #2
 80056a4:	441a      	add	r2, r3
 80056a6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80056aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056b6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	8013      	strh	r3, [r2, #0]
 80056be:	e1be      	b.n	8005a3e <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80056c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	78db      	ldrb	r3, [r3, #3]
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	f040 81b4 	bne.w	8005a3a <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80056d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	699a      	ldr	r2, [r3, #24]
 80056de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	691b      	ldr	r3, [r3, #16]
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d917      	bls.n	800571e <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80056ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	691b      	ldr	r3, [r3, #16]
 80056fa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 80056fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005702:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	699a      	ldr	r2, [r3, #24]
 800570a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800570e:	1ad2      	subs	r2, r2, r3
 8005710:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005714:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	619a      	str	r2, [r3, #24]
 800571c:	e00e      	b.n	800573c <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800571e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005722:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	699b      	ldr	r3, [r3, #24]
 800572a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800572e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005732:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	2200      	movs	r2, #0
 800573a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800573c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005740:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	785b      	ldrb	r3, [r3, #1]
 8005748:	2b00      	cmp	r3, #0
 800574a:	f040 8085 	bne.w	8005858 <USB_EPStartXfer+0x14fc>
 800574e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005752:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800575c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005760:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800576a:	b29b      	uxth	r3, r3
 800576c:	461a      	mov	r2, r3
 800576e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005772:	4413      	add	r3, r2
 8005774:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005778:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800577c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	781b      	ldrb	r3, [r3, #0]
 8005784:	011a      	lsls	r2, r3, #4
 8005786:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800578a:	4413      	add	r3, r2
 800578c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005790:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005794:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005798:	881b      	ldrh	r3, [r3, #0]
 800579a:	b29b      	uxth	r3, r3
 800579c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80057a0:	b29a      	uxth	r2, r3
 80057a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80057a6:	801a      	strh	r2, [r3, #0]
 80057a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057ac:	2b3e      	cmp	r3, #62	; 0x3e
 80057ae:	d923      	bls.n	80057f8 <USB_EPStartXfer+0x149c>
 80057b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057b4:	095b      	lsrs	r3, r3, #5
 80057b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80057ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057be:	f003 031f 	and.w	r3, r3, #31
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d104      	bne.n	80057d0 <USB_EPStartXfer+0x1474>
 80057c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80057ca:	3b01      	subs	r3, #1
 80057cc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80057d0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80057d4:	881b      	ldrh	r3, [r3, #0]
 80057d6:	b29a      	uxth	r2, r3
 80057d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80057dc:	b29b      	uxth	r3, r3
 80057de:	029b      	lsls	r3, r3, #10
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	4313      	orrs	r3, r2
 80057e4:	b29b      	uxth	r3, r3
 80057e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057ee:	b29a      	uxth	r2, r3
 80057f0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80057f4:	801a      	strh	r2, [r3, #0]
 80057f6:	e060      	b.n	80058ba <USB_EPStartXfer+0x155e>
 80057f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d10c      	bne.n	800581a <USB_EPStartXfer+0x14be>
 8005800:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005804:	881b      	ldrh	r3, [r3, #0]
 8005806:	b29b      	uxth	r3, r3
 8005808:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800580c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005810:	b29a      	uxth	r2, r3
 8005812:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005816:	801a      	strh	r2, [r3, #0]
 8005818:	e04f      	b.n	80058ba <USB_EPStartXfer+0x155e>
 800581a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800581e:	085b      	lsrs	r3, r3, #1
 8005820:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005824:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005828:	f003 0301 	and.w	r3, r3, #1
 800582c:	2b00      	cmp	r3, #0
 800582e:	d004      	beq.n	800583a <USB_EPStartXfer+0x14de>
 8005830:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005834:	3301      	adds	r3, #1
 8005836:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800583a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800583e:	881b      	ldrh	r3, [r3, #0]
 8005840:	b29a      	uxth	r2, r3
 8005842:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005846:	b29b      	uxth	r3, r3
 8005848:	029b      	lsls	r3, r3, #10
 800584a:	b29b      	uxth	r3, r3
 800584c:	4313      	orrs	r3, r2
 800584e:	b29a      	uxth	r2, r3
 8005850:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005854:	801a      	strh	r2, [r3, #0]
 8005856:	e030      	b.n	80058ba <USB_EPStartXfer+0x155e>
 8005858:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800585c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	785b      	ldrb	r3, [r3, #1]
 8005864:	2b01      	cmp	r3, #1
 8005866:	d128      	bne.n	80058ba <USB_EPStartXfer+0x155e>
 8005868:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800586c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005876:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800587a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005884:	b29b      	uxth	r3, r3
 8005886:	461a      	mov	r2, r3
 8005888:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800588c:	4413      	add	r3, r2
 800588e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005892:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005896:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	781b      	ldrb	r3, [r3, #0]
 800589e:	011a      	lsls	r2, r3, #4
 80058a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80058a4:	4413      	add	r3, r2
 80058a6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80058aa:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80058ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058b2:	b29a      	uxth	r2, r3
 80058b4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80058b8:	801a      	strh	r2, [r3, #0]
 80058ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80058c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	785b      	ldrb	r3, [r3, #1]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	f040 8085 	bne.w	80059e4 <USB_EPStartXfer+0x1688>
 80058da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80058e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058f6:	b29b      	uxth	r3, r3
 80058f8:	461a      	mov	r2, r3
 80058fa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80058fe:	4413      	add	r3, r2
 8005900:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005904:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005908:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	781b      	ldrb	r3, [r3, #0]
 8005910:	011a      	lsls	r2, r3, #4
 8005912:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005916:	4413      	add	r3, r2
 8005918:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800591c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005920:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005924:	881b      	ldrh	r3, [r3, #0]
 8005926:	b29b      	uxth	r3, r3
 8005928:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800592c:	b29a      	uxth	r2, r3
 800592e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005932:	801a      	strh	r2, [r3, #0]
 8005934:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005938:	2b3e      	cmp	r3, #62	; 0x3e
 800593a:	d923      	bls.n	8005984 <USB_EPStartXfer+0x1628>
 800593c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005940:	095b      	lsrs	r3, r3, #5
 8005942:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005946:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800594a:	f003 031f 	and.w	r3, r3, #31
 800594e:	2b00      	cmp	r3, #0
 8005950:	d104      	bne.n	800595c <USB_EPStartXfer+0x1600>
 8005952:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005956:	3b01      	subs	r3, #1
 8005958:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800595c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005960:	881b      	ldrh	r3, [r3, #0]
 8005962:	b29a      	uxth	r2, r3
 8005964:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005968:	b29b      	uxth	r3, r3
 800596a:	029b      	lsls	r3, r3, #10
 800596c:	b29b      	uxth	r3, r3
 800596e:	4313      	orrs	r3, r2
 8005970:	b29b      	uxth	r3, r3
 8005972:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005976:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800597a:	b29a      	uxth	r2, r3
 800597c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005980:	801a      	strh	r2, [r3, #0]
 8005982:	e05c      	b.n	8005a3e <USB_EPStartXfer+0x16e2>
 8005984:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005988:	2b00      	cmp	r3, #0
 800598a:	d10c      	bne.n	80059a6 <USB_EPStartXfer+0x164a>
 800598c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005990:	881b      	ldrh	r3, [r3, #0]
 8005992:	b29b      	uxth	r3, r3
 8005994:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005998:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800599c:	b29a      	uxth	r2, r3
 800599e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80059a2:	801a      	strh	r2, [r3, #0]
 80059a4:	e04b      	b.n	8005a3e <USB_EPStartXfer+0x16e2>
 80059a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059aa:	085b      	lsrs	r3, r3, #1
 80059ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80059b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059b4:	f003 0301 	and.w	r3, r3, #1
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d004      	beq.n	80059c6 <USB_EPStartXfer+0x166a>
 80059bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80059c0:	3301      	adds	r3, #1
 80059c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80059c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80059ca:	881b      	ldrh	r3, [r3, #0]
 80059cc:	b29a      	uxth	r2, r3
 80059ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	029b      	lsls	r3, r3, #10
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	4313      	orrs	r3, r2
 80059da:	b29a      	uxth	r2, r3
 80059dc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80059e0:	801a      	strh	r2, [r3, #0]
 80059e2:	e02c      	b.n	8005a3e <USB_EPStartXfer+0x16e2>
 80059e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	785b      	ldrb	r3, [r3, #1]
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	d124      	bne.n	8005a3e <USB_EPStartXfer+0x16e2>
 80059f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	461a      	mov	r2, r3
 8005a06:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005a0a:	4413      	add	r3, r2
 8005a0c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005a10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	781b      	ldrb	r3, [r3, #0]
 8005a1c:	011a      	lsls	r2, r3, #4
 8005a1e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005a22:	4413      	add	r3, r2
 8005a24:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a28:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005a2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a30:	b29a      	uxth	r2, r3
 8005a32:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005a36:	801a      	strh	r2, [r3, #0]
 8005a38:	e001      	b.n	8005a3e <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	e03a      	b.n	8005ab4 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005a3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a42:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	781b      	ldrb	r3, [r3, #0]
 8005a54:	009b      	lsls	r3, r3, #2
 8005a56:	4413      	add	r3, r2
 8005a58:	881b      	ldrh	r3, [r3, #0]
 8005a5a:	b29b      	uxth	r3, r3
 8005a5c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a64:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8005a68:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005a6c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005a70:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8005a74:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005a78:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005a7c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8005a80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a84:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a88:	681a      	ldr	r2, [r3, #0]
 8005a8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	781b      	ldrb	r3, [r3, #0]
 8005a96:	009b      	lsls	r3, r3, #2
 8005a98:	441a      	add	r2, r3
 8005a9a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005a9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005aa2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005aa6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005aaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005ab2:	2300      	movs	r3, #0
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}

08005abe <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005abe:	b480      	push	{r7}
 8005ac0:	b085      	sub	sp, #20
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	6078      	str	r0, [r7, #4]
 8005ac6:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	785b      	ldrb	r3, [r3, #1]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d020      	beq.n	8005b12 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005ad0:	687a      	ldr	r2, [r7, #4]
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	781b      	ldrb	r3, [r3, #0]
 8005ad6:	009b      	lsls	r3, r3, #2
 8005ad8:	4413      	add	r3, r2
 8005ada:	881b      	ldrh	r3, [r3, #0]
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ae2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ae6:	81bb      	strh	r3, [r7, #12]
 8005ae8:	89bb      	ldrh	r3, [r7, #12]
 8005aea:	f083 0310 	eor.w	r3, r3, #16
 8005aee:	81bb      	strh	r3, [r7, #12]
 8005af0:	687a      	ldr	r2, [r7, #4]
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	781b      	ldrb	r3, [r3, #0]
 8005af6:	009b      	lsls	r3, r3, #2
 8005af8:	441a      	add	r2, r3
 8005afa:	89bb      	ldrh	r3, [r7, #12]
 8005afc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	8013      	strh	r3, [r2, #0]
 8005b10:	e01f      	b.n	8005b52 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005b12:	687a      	ldr	r2, [r7, #4]
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	781b      	ldrb	r3, [r3, #0]
 8005b18:	009b      	lsls	r3, r3, #2
 8005b1a:	4413      	add	r3, r2
 8005b1c:	881b      	ldrh	r3, [r3, #0]
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b28:	81fb      	strh	r3, [r7, #14]
 8005b2a:	89fb      	ldrh	r3, [r7, #14]
 8005b2c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005b30:	81fb      	strh	r3, [r7, #14]
 8005b32:	687a      	ldr	r2, [r7, #4]
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	781b      	ldrb	r3, [r3, #0]
 8005b38:	009b      	lsls	r3, r3, #2
 8005b3a:	441a      	add	r2, r3
 8005b3c:	89fb      	ldrh	r3, [r7, #14]
 8005b3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005b52:	2300      	movs	r3, #0
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3714      	adds	r7, #20
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bc80      	pop	{r7}
 8005b5c:	4770      	bx	lr

08005b5e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005b5e:	b480      	push	{r7}
 8005b60:	b087      	sub	sp, #28
 8005b62:	af00      	add	r7, sp, #0
 8005b64:	6078      	str	r0, [r7, #4]
 8005b66:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	7b1b      	ldrb	r3, [r3, #12]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	f040 809d 	bne.w	8005cac <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	785b      	ldrb	r3, [r3, #1]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d04c      	beq.n	8005c14 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005b7a:	687a      	ldr	r2, [r7, #4]
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	781b      	ldrb	r3, [r3, #0]
 8005b80:	009b      	lsls	r3, r3, #2
 8005b82:	4413      	add	r3, r2
 8005b84:	881b      	ldrh	r3, [r3, #0]
 8005b86:	823b      	strh	r3, [r7, #16]
 8005b88:	8a3b      	ldrh	r3, [r7, #16]
 8005b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d01b      	beq.n	8005bca <USB_EPClearStall+0x6c>
 8005b92:	687a      	ldr	r2, [r7, #4]
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	781b      	ldrb	r3, [r3, #0]
 8005b98:	009b      	lsls	r3, r3, #2
 8005b9a:	4413      	add	r3, r2
 8005b9c:	881b      	ldrh	r3, [r3, #0]
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ba4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ba8:	81fb      	strh	r3, [r7, #14]
 8005baa:	687a      	ldr	r2, [r7, #4]
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	781b      	ldrb	r3, [r3, #0]
 8005bb0:	009b      	lsls	r3, r3, #2
 8005bb2:	441a      	add	r2, r3
 8005bb4:	89fb      	ldrh	r3, [r7, #14]
 8005bb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bc2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	78db      	ldrb	r3, [r3, #3]
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	d06c      	beq.n	8005cac <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005bd2:	687a      	ldr	r2, [r7, #4]
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	781b      	ldrb	r3, [r3, #0]
 8005bd8:	009b      	lsls	r3, r3, #2
 8005bda:	4413      	add	r3, r2
 8005bdc:	881b      	ldrh	r3, [r3, #0]
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005be4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005be8:	81bb      	strh	r3, [r7, #12]
 8005bea:	89bb      	ldrh	r3, [r7, #12]
 8005bec:	f083 0320 	eor.w	r3, r3, #32
 8005bf0:	81bb      	strh	r3, [r7, #12]
 8005bf2:	687a      	ldr	r2, [r7, #4]
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	781b      	ldrb	r3, [r3, #0]
 8005bf8:	009b      	lsls	r3, r3, #2
 8005bfa:	441a      	add	r2, r3
 8005bfc:	89bb      	ldrh	r3, [r7, #12]
 8005bfe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c0e:	b29b      	uxth	r3, r3
 8005c10:	8013      	strh	r3, [r2, #0]
 8005c12:	e04b      	b.n	8005cac <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005c14:	687a      	ldr	r2, [r7, #4]
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	781b      	ldrb	r3, [r3, #0]
 8005c1a:	009b      	lsls	r3, r3, #2
 8005c1c:	4413      	add	r3, r2
 8005c1e:	881b      	ldrh	r3, [r3, #0]
 8005c20:	82fb      	strh	r3, [r7, #22]
 8005c22:	8afb      	ldrh	r3, [r7, #22]
 8005c24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d01b      	beq.n	8005c64 <USB_EPClearStall+0x106>
 8005c2c:	687a      	ldr	r2, [r7, #4]
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	781b      	ldrb	r3, [r3, #0]
 8005c32:	009b      	lsls	r3, r3, #2
 8005c34:	4413      	add	r3, r2
 8005c36:	881b      	ldrh	r3, [r3, #0]
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c42:	82bb      	strh	r3, [r7, #20]
 8005c44:	687a      	ldr	r2, [r7, #4]
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	781b      	ldrb	r3, [r3, #0]
 8005c4a:	009b      	lsls	r3, r3, #2
 8005c4c:	441a      	add	r2, r3
 8005c4e:	8abb      	ldrh	r3, [r7, #20]
 8005c50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005c64:	687a      	ldr	r2, [r7, #4]
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	781b      	ldrb	r3, [r3, #0]
 8005c6a:	009b      	lsls	r3, r3, #2
 8005c6c:	4413      	add	r3, r2
 8005c6e:	881b      	ldrh	r3, [r3, #0]
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c7a:	827b      	strh	r3, [r7, #18]
 8005c7c:	8a7b      	ldrh	r3, [r7, #18]
 8005c7e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005c82:	827b      	strh	r3, [r7, #18]
 8005c84:	8a7b      	ldrh	r3, [r7, #18]
 8005c86:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005c8a:	827b      	strh	r3, [r7, #18]
 8005c8c:	687a      	ldr	r2, [r7, #4]
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	781b      	ldrb	r3, [r3, #0]
 8005c92:	009b      	lsls	r3, r3, #2
 8005c94:	441a      	add	r2, r3
 8005c96:	8a7b      	ldrh	r3, [r7, #18]
 8005c98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ca0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ca4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005cac:	2300      	movs	r3, #0
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	371c      	adds	r7, #28
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bc80      	pop	{r7}
 8005cb6:	4770      	bx	lr

08005cb8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b083      	sub	sp, #12
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	460b      	mov	r3, r1
 8005cc2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8005cc4:	78fb      	ldrb	r3, [r7, #3]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d103      	bne.n	8005cd2 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2280      	movs	r2, #128	; 0x80
 8005cce:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005cd2:	2300      	movs	r3, #0
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	370c      	adds	r7, #12
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bc80      	pop	{r7}
 8005cdc:	4770      	bx	lr

08005cde <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005cde:	b480      	push	{r7}
 8005ce0:	b083      	sub	sp, #12
 8005ce2:	af00      	add	r7, sp, #0
 8005ce4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005ce6:	2300      	movs	r3, #0
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	370c      	adds	r7, #12
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bc80      	pop	{r7}
 8005cf0:	4770      	bx	lr

08005cf2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8005cf2:	b480      	push	{r7}
 8005cf4:	b083      	sub	sp, #12
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005cfa:	2300      	movs	r3, #0
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	370c      	adds	r7, #12
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bc80      	pop	{r7}
 8005d04:	4770      	bx	lr

08005d06 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8005d06:	b480      	push	{r7}
 8005d08:	b085      	sub	sp, #20
 8005d0a:	af00      	add	r7, sp, #0
 8005d0c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005d14:	b29b      	uxth	r3, r3
 8005d16:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005d18:	68fb      	ldr	r3, [r7, #12]
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3714      	adds	r7, #20
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bc80      	pop	{r7}
 8005d22:	4770      	bx	lr

08005d24 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b083      	sub	sp, #12
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005d2e:	2300      	movs	r3, #0
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	370c      	adds	r7, #12
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bc80      	pop	{r7}
 8005d38:	4770      	bx	lr

08005d3a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005d3a:	b480      	push	{r7}
 8005d3c:	b08b      	sub	sp, #44	; 0x2c
 8005d3e:	af00      	add	r7, sp, #0
 8005d40:	60f8      	str	r0, [r7, #12]
 8005d42:	60b9      	str	r1, [r7, #8]
 8005d44:	4611      	mov	r1, r2
 8005d46:	461a      	mov	r2, r3
 8005d48:	460b      	mov	r3, r1
 8005d4a:	80fb      	strh	r3, [r7, #6]
 8005d4c:	4613      	mov	r3, r2
 8005d4e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005d50:	88bb      	ldrh	r3, [r7, #4]
 8005d52:	3301      	adds	r3, #1
 8005d54:	085b      	lsrs	r3, r3, #1
 8005d56:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005d60:	88fb      	ldrh	r3, [r7, #6]
 8005d62:	005a      	lsls	r2, r3, #1
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	4413      	add	r3, r2
 8005d68:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d6c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8005d6e:	69bb      	ldr	r3, [r7, #24]
 8005d70:	627b      	str	r3, [r7, #36]	; 0x24
 8005d72:	e01e      	b.n	8005db2 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8005d74:	69fb      	ldr	r3, [r7, #28]
 8005d76:	781b      	ldrb	r3, [r3, #0]
 8005d78:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8005d7a:	69fb      	ldr	r3, [r7, #28]
 8005d7c:	3301      	adds	r3, #1
 8005d7e:	781b      	ldrb	r3, [r3, #0]
 8005d80:	021b      	lsls	r3, r3, #8
 8005d82:	b21a      	sxth	r2, r3
 8005d84:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	b21b      	sxth	r3, r3
 8005d8c:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8005d8e:	6a3b      	ldr	r3, [r7, #32]
 8005d90:	8a7a      	ldrh	r2, [r7, #18]
 8005d92:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005d94:	6a3b      	ldr	r3, [r7, #32]
 8005d96:	3302      	adds	r3, #2
 8005d98:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8005d9a:	6a3b      	ldr	r3, [r7, #32]
 8005d9c:	3302      	adds	r3, #2
 8005d9e:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8005da0:	69fb      	ldr	r3, [r7, #28]
 8005da2:	3301      	adds	r3, #1
 8005da4:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8005da6:	69fb      	ldr	r3, [r7, #28]
 8005da8:	3301      	adds	r3, #1
 8005daa:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8005dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dae:	3b01      	subs	r3, #1
 8005db0:	627b      	str	r3, [r7, #36]	; 0x24
 8005db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d1dd      	bne.n	8005d74 <USB_WritePMA+0x3a>
  }
}
 8005db8:	bf00      	nop
 8005dba:	bf00      	nop
 8005dbc:	372c      	adds	r7, #44	; 0x2c
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bc80      	pop	{r7}
 8005dc2:	4770      	bx	lr

08005dc4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b08b      	sub	sp, #44	; 0x2c
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	60f8      	str	r0, [r7, #12]
 8005dcc:	60b9      	str	r1, [r7, #8]
 8005dce:	4611      	mov	r1, r2
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	460b      	mov	r3, r1
 8005dd4:	80fb      	strh	r3, [r7, #6]
 8005dd6:	4613      	mov	r3, r2
 8005dd8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005dda:	88bb      	ldrh	r3, [r7, #4]
 8005ddc:	085b      	lsrs	r3, r3, #1
 8005dde:	b29b      	uxth	r3, r3
 8005de0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005dea:	88fb      	ldrh	r3, [r7, #6]
 8005dec:	005a      	lsls	r2, r3, #1
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	4413      	add	r3, r2
 8005df2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005df6:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8005df8:	69bb      	ldr	r3, [r7, #24]
 8005dfa:	627b      	str	r3, [r7, #36]	; 0x24
 8005dfc:	e01b      	b.n	8005e36 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8005dfe:	6a3b      	ldr	r3, [r7, #32]
 8005e00:	881b      	ldrh	r3, [r3, #0]
 8005e02:	b29b      	uxth	r3, r3
 8005e04:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8005e06:	6a3b      	ldr	r3, [r7, #32]
 8005e08:	3302      	adds	r3, #2
 8005e0a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	b2da      	uxtb	r2, r3
 8005e10:	69fb      	ldr	r3, [r7, #28]
 8005e12:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005e14:	69fb      	ldr	r3, [r7, #28]
 8005e16:	3301      	adds	r3, #1
 8005e18:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	0a1b      	lsrs	r3, r3, #8
 8005e1e:	b2da      	uxtb	r2, r3
 8005e20:	69fb      	ldr	r3, [r7, #28]
 8005e22:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005e24:	69fb      	ldr	r3, [r7, #28]
 8005e26:	3301      	adds	r3, #1
 8005e28:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8005e2a:	6a3b      	ldr	r3, [r7, #32]
 8005e2c:	3302      	adds	r3, #2
 8005e2e:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8005e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e32:	3b01      	subs	r3, #1
 8005e34:	627b      	str	r3, [r7, #36]	; 0x24
 8005e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d1e0      	bne.n	8005dfe <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8005e3c:	88bb      	ldrh	r3, [r7, #4]
 8005e3e:	f003 0301 	and.w	r3, r3, #1
 8005e42:	b29b      	uxth	r3, r3
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d007      	beq.n	8005e58 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8005e48:	6a3b      	ldr	r3, [r7, #32]
 8005e4a:	881b      	ldrh	r3, [r3, #0]
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	b2da      	uxtb	r2, r3
 8005e54:	69fb      	ldr	r3, [r7, #28]
 8005e56:	701a      	strb	r2, [r3, #0]
  }
}
 8005e58:	bf00      	nop
 8005e5a:	372c      	adds	r7, #44	; 0x2c
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bc80      	pop	{r7}
 8005e60:	4770      	bx	lr

08005e62 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005e62:	b580      	push	{r7, lr}
 8005e64:	b084      	sub	sp, #16
 8005e66:	af00      	add	r7, sp, #0
 8005e68:	6078      	str	r0, [r7, #4]
 8005e6a:	460b      	mov	r3, r1
 8005e6c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	7c1b      	ldrb	r3, [r3, #16]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d115      	bne.n	8005ea6 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005e7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e7e:	2202      	movs	r2, #2
 8005e80:	2181      	movs	r1, #129	; 0x81
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f001 fe3d 	bl	8007b02 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005e8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e92:	2202      	movs	r2, #2
 8005e94:	2101      	movs	r1, #1
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f001 fe33 	bl	8007b02 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8005ea4:	e012      	b.n	8005ecc <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005ea6:	2340      	movs	r3, #64	; 0x40
 8005ea8:	2202      	movs	r2, #2
 8005eaa:	2181      	movs	r1, #129	; 0x81
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f001 fe28 	bl	8007b02 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005eb8:	2340      	movs	r3, #64	; 0x40
 8005eba:	2202      	movs	r2, #2
 8005ebc:	2101      	movs	r1, #1
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f001 fe1f 	bl	8007b02 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005ecc:	2308      	movs	r3, #8
 8005ece:	2203      	movs	r2, #3
 8005ed0:	2182      	movs	r1, #130	; 0x82
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f001 fe15 	bl	8007b02 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2201      	movs	r2, #1
 8005edc:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005ede:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005ee2:	f001 ff35 	bl	8007d50 <USBD_static_malloc>
 8005ee6:	4602      	mov	r2, r0
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d102      	bne.n	8005efe <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	73fb      	strb	r3, [r7, #15]
 8005efc:	e026      	b.n	8005f4c <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f04:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	2200      	movs	r2, #0
 8005f14:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	7c1b      	ldrb	r3, [r3, #16]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d109      	bne.n	8005f3c <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005f2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f32:	2101      	movs	r1, #1
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f001 fed5 	bl	8007ce4 <USBD_LL_PrepareReceive>
 8005f3a:	e007      	b.n	8005f4c <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005f42:	2340      	movs	r3, #64	; 0x40
 8005f44:	2101      	movs	r1, #1
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f001 fecc 	bl	8007ce4 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8005f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3710      	adds	r7, #16
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}

08005f56 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005f56:	b580      	push	{r7, lr}
 8005f58:	b084      	sub	sp, #16
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	6078      	str	r0, [r7, #4]
 8005f5e:	460b      	mov	r3, r1
 8005f60:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005f62:	2300      	movs	r3, #0
 8005f64:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005f66:	2181      	movs	r1, #129	; 0x81
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f001 fdf0 	bl	8007b4e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2200      	movs	r2, #0
 8005f72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005f74:	2101      	movs	r1, #1
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f001 fde9 	bl	8007b4e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005f84:	2182      	movs	r1, #130	; 0x82
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f001 fde1 	bl	8007b4e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d00e      	beq.n	8005fba <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fac:	4618      	mov	r0, r3
 8005fae:	f001 fedb 	bl	8007d68 <USBD_static_free>
    pdev->pClassData = NULL;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8005fba:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	3710      	adds	r7, #16
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}

08005fc4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b086      	sub	sp, #24
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
 8005fcc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fd4:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	781b      	ldrb	r3, [r3, #0]
 8005fe6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d039      	beq.n	8006062 <USBD_CDC_Setup+0x9e>
 8005fee:	2b20      	cmp	r3, #32
 8005ff0:	d17f      	bne.n	80060f2 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	88db      	ldrh	r3, [r3, #6]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d029      	beq.n	800604e <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	781b      	ldrb	r3, [r3, #0]
 8005ffe:	b25b      	sxtb	r3, r3
 8006000:	2b00      	cmp	r3, #0
 8006002:	da11      	bge.n	8006028 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	683a      	ldr	r2, [r7, #0]
 800600e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006010:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006012:	683a      	ldr	r2, [r7, #0]
 8006014:	88d2      	ldrh	r2, [r2, #6]
 8006016:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006018:	6939      	ldr	r1, [r7, #16]
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	88db      	ldrh	r3, [r3, #6]
 800601e:	461a      	mov	r2, r3
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f001 f9da 	bl	80073da <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006026:	e06b      	b.n	8006100 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	785a      	ldrb	r2, [r3, #1]
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	88db      	ldrh	r3, [r3, #6]
 8006036:	b2da      	uxtb	r2, r3
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800603e:	6939      	ldr	r1, [r7, #16]
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	88db      	ldrh	r3, [r3, #6]
 8006044:	461a      	mov	r2, r3
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f001 f9f5 	bl	8007436 <USBD_CtlPrepareRx>
      break;
 800604c:	e058      	b.n	8006100 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006054:	689b      	ldr	r3, [r3, #8]
 8006056:	683a      	ldr	r2, [r7, #0]
 8006058:	7850      	ldrb	r0, [r2, #1]
 800605a:	2200      	movs	r2, #0
 800605c:	6839      	ldr	r1, [r7, #0]
 800605e:	4798      	blx	r3
      break;
 8006060:	e04e      	b.n	8006100 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	785b      	ldrb	r3, [r3, #1]
 8006066:	2b0b      	cmp	r3, #11
 8006068:	d02e      	beq.n	80060c8 <USBD_CDC_Setup+0x104>
 800606a:	2b0b      	cmp	r3, #11
 800606c:	dc38      	bgt.n	80060e0 <USBD_CDC_Setup+0x11c>
 800606e:	2b00      	cmp	r3, #0
 8006070:	d002      	beq.n	8006078 <USBD_CDC_Setup+0xb4>
 8006072:	2b0a      	cmp	r3, #10
 8006074:	d014      	beq.n	80060a0 <USBD_CDC_Setup+0xdc>
 8006076:	e033      	b.n	80060e0 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800607e:	2b03      	cmp	r3, #3
 8006080:	d107      	bne.n	8006092 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006082:	f107 030c 	add.w	r3, r7, #12
 8006086:	2202      	movs	r2, #2
 8006088:	4619      	mov	r1, r3
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f001 f9a5 	bl	80073da <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006090:	e02e      	b.n	80060f0 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006092:	6839      	ldr	r1, [r7, #0]
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f001 f936 	bl	8007306 <USBD_CtlError>
            ret = USBD_FAIL;
 800609a:	2302      	movs	r3, #2
 800609c:	75fb      	strb	r3, [r7, #23]
          break;
 800609e:	e027      	b.n	80060f0 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060a6:	2b03      	cmp	r3, #3
 80060a8:	d107      	bne.n	80060ba <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80060aa:	f107 030f 	add.w	r3, r7, #15
 80060ae:	2201      	movs	r2, #1
 80060b0:	4619      	mov	r1, r3
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f001 f991 	bl	80073da <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80060b8:	e01a      	b.n	80060f0 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80060ba:	6839      	ldr	r1, [r7, #0]
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f001 f922 	bl	8007306 <USBD_CtlError>
            ret = USBD_FAIL;
 80060c2:	2302      	movs	r3, #2
 80060c4:	75fb      	strb	r3, [r7, #23]
          break;
 80060c6:	e013      	b.n	80060f0 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060ce:	2b03      	cmp	r3, #3
 80060d0:	d00d      	beq.n	80060ee <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80060d2:	6839      	ldr	r1, [r7, #0]
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f001 f916 	bl	8007306 <USBD_CtlError>
            ret = USBD_FAIL;
 80060da:	2302      	movs	r3, #2
 80060dc:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80060de:	e006      	b.n	80060ee <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80060e0:	6839      	ldr	r1, [r7, #0]
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f001 f90f 	bl	8007306 <USBD_CtlError>
          ret = USBD_FAIL;
 80060e8:	2302      	movs	r3, #2
 80060ea:	75fb      	strb	r3, [r7, #23]
          break;
 80060ec:	e000      	b.n	80060f0 <USBD_CDC_Setup+0x12c>
          break;
 80060ee:	bf00      	nop
      }
      break;
 80060f0:	e006      	b.n	8006100 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80060f2:	6839      	ldr	r1, [r7, #0]
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f001 f906 	bl	8007306 <USBD_CtlError>
      ret = USBD_FAIL;
 80060fa:	2302      	movs	r3, #2
 80060fc:	75fb      	strb	r3, [r7, #23]
      break;
 80060fe:	bf00      	nop
  }

  return ret;
 8006100:	7dfb      	ldrb	r3, [r7, #23]
}
 8006102:	4618      	mov	r0, r3
 8006104:	3718      	adds	r7, #24
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}

0800610a <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800610a:	b580      	push	{r7, lr}
 800610c:	b084      	sub	sp, #16
 800610e:	af00      	add	r7, sp, #0
 8006110:	6078      	str	r0, [r7, #4]
 8006112:	460b      	mov	r3, r1
 8006114:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800611c:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006124:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800612c:	2b00      	cmp	r3, #0
 800612e:	d03a      	beq.n	80061a6 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006130:	78fa      	ldrb	r2, [r7, #3]
 8006132:	6879      	ldr	r1, [r7, #4]
 8006134:	4613      	mov	r3, r2
 8006136:	009b      	lsls	r3, r3, #2
 8006138:	4413      	add	r3, r2
 800613a:	009b      	lsls	r3, r3, #2
 800613c:	440b      	add	r3, r1
 800613e:	331c      	adds	r3, #28
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d029      	beq.n	800619a <USBD_CDC_DataIn+0x90>
 8006146:	78fa      	ldrb	r2, [r7, #3]
 8006148:	6879      	ldr	r1, [r7, #4]
 800614a:	4613      	mov	r3, r2
 800614c:	009b      	lsls	r3, r3, #2
 800614e:	4413      	add	r3, r2
 8006150:	009b      	lsls	r3, r3, #2
 8006152:	440b      	add	r3, r1
 8006154:	331c      	adds	r3, #28
 8006156:	681a      	ldr	r2, [r3, #0]
 8006158:	78f9      	ldrb	r1, [r7, #3]
 800615a:	68b8      	ldr	r0, [r7, #8]
 800615c:	460b      	mov	r3, r1
 800615e:	009b      	lsls	r3, r3, #2
 8006160:	440b      	add	r3, r1
 8006162:	00db      	lsls	r3, r3, #3
 8006164:	4403      	add	r3, r0
 8006166:	3338      	adds	r3, #56	; 0x38
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	fbb2 f1f3 	udiv	r1, r2, r3
 800616e:	fb01 f303 	mul.w	r3, r1, r3
 8006172:	1ad3      	subs	r3, r2, r3
 8006174:	2b00      	cmp	r3, #0
 8006176:	d110      	bne.n	800619a <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006178:	78fa      	ldrb	r2, [r7, #3]
 800617a:	6879      	ldr	r1, [r7, #4]
 800617c:	4613      	mov	r3, r2
 800617e:	009b      	lsls	r3, r3, #2
 8006180:	4413      	add	r3, r2
 8006182:	009b      	lsls	r3, r3, #2
 8006184:	440b      	add	r3, r1
 8006186:	331c      	adds	r3, #28
 8006188:	2200      	movs	r2, #0
 800618a:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800618c:	78f9      	ldrb	r1, [r7, #3]
 800618e:	2300      	movs	r3, #0
 8006190:	2200      	movs	r2, #0
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f001 fd83 	bl	8007c9e <USBD_LL_Transmit>
 8006198:	e003      	b.n	80061a2 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2200      	movs	r2, #0
 800619e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80061a2:	2300      	movs	r3, #0
 80061a4:	e000      	b.n	80061a8 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80061a6:	2302      	movs	r3, #2
  }
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3710      	adds	r7, #16
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}

080061b0 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b084      	sub	sp, #16
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
 80061b8:	460b      	mov	r3, r1
 80061ba:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061c2:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80061c4:	78fb      	ldrb	r3, [r7, #3]
 80061c6:	4619      	mov	r1, r3
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f001 fdae 	bl	8007d2a <USBD_LL_GetRxDataSize>
 80061ce:	4602      	mov	r2, r0
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d00d      	beq.n	80061fc <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80061e6:	68db      	ldr	r3, [r3, #12]
 80061e8:	68fa      	ldr	r2, [r7, #12]
 80061ea:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80061ee:	68fa      	ldr	r2, [r7, #12]
 80061f0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80061f4:	4611      	mov	r1, r2
 80061f6:	4798      	blx	r3

    return USBD_OK;
 80061f8:	2300      	movs	r3, #0
 80061fa:	e000      	b.n	80061fe <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80061fc:	2302      	movs	r3, #2
  }
}
 80061fe:	4618      	mov	r0, r3
 8006200:	3710      	adds	r7, #16
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}

08006206 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006206:	b580      	push	{r7, lr}
 8006208:	b084      	sub	sp, #16
 800620a:	af00      	add	r7, sp, #0
 800620c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006214:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800621c:	2b00      	cmp	r3, #0
 800621e:	d015      	beq.n	800624c <USBD_CDC_EP0_RxReady+0x46>
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006226:	2bff      	cmp	r3, #255	; 0xff
 8006228:	d010      	beq.n	800624c <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006230:	689b      	ldr	r3, [r3, #8]
 8006232:	68fa      	ldr	r2, [r7, #12]
 8006234:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006238:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800623a:	68fa      	ldr	r2, [r7, #12]
 800623c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006240:	b292      	uxth	r2, r2
 8006242:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	22ff      	movs	r2, #255	; 0xff
 8006248:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800624c:	2300      	movs	r3, #0
}
 800624e:	4618      	mov	r0, r3
 8006250:	3710      	adds	r7, #16
 8006252:	46bd      	mov	sp, r7
 8006254:	bd80      	pop	{r7, pc}
	...

08006258 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006258:	b480      	push	{r7}
 800625a:	b083      	sub	sp, #12
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2243      	movs	r2, #67	; 0x43
 8006264:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006266:	4b03      	ldr	r3, [pc, #12]	; (8006274 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006268:	4618      	mov	r0, r3
 800626a:	370c      	adds	r7, #12
 800626c:	46bd      	mov	sp, r7
 800626e:	bc80      	pop	{r7}
 8006270:	4770      	bx	lr
 8006272:	bf00      	nop
 8006274:	20000264 	.word	0x20000264

08006278 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006278:	b480      	push	{r7}
 800627a:	b083      	sub	sp, #12
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2243      	movs	r2, #67	; 0x43
 8006284:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006286:	4b03      	ldr	r3, [pc, #12]	; (8006294 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006288:	4618      	mov	r0, r3
 800628a:	370c      	adds	r7, #12
 800628c:	46bd      	mov	sp, r7
 800628e:	bc80      	pop	{r7}
 8006290:	4770      	bx	lr
 8006292:	bf00      	nop
 8006294:	20000220 	.word	0x20000220

08006298 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006298:	b480      	push	{r7}
 800629a:	b083      	sub	sp, #12
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2243      	movs	r2, #67	; 0x43
 80062a4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80062a6:	4b03      	ldr	r3, [pc, #12]	; (80062b4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	370c      	adds	r7, #12
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bc80      	pop	{r7}
 80062b0:	4770      	bx	lr
 80062b2:	bf00      	nop
 80062b4:	200002a8 	.word	0x200002a8

080062b8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b083      	sub	sp, #12
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	220a      	movs	r2, #10
 80062c4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80062c6:	4b03      	ldr	r3, [pc, #12]	; (80062d4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	370c      	adds	r7, #12
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bc80      	pop	{r7}
 80062d0:	4770      	bx	lr
 80062d2:	bf00      	nop
 80062d4:	200001dc 	.word	0x200001dc

080062d8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80062d8:	b480      	push	{r7}
 80062da:	b085      	sub	sp, #20
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
 80062e0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80062e2:	2302      	movs	r3, #2
 80062e4:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d005      	beq.n	80062f8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	683a      	ldr	r2, [r7, #0]
 80062f0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80062f4:	2300      	movs	r3, #0
 80062f6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80062f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3714      	adds	r7, #20
 80062fe:	46bd      	mov	sp, r7
 8006300:	bc80      	pop	{r7}
 8006302:	4770      	bx	lr

08006304 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8006304:	b480      	push	{r7}
 8006306:	b087      	sub	sp, #28
 8006308:	af00      	add	r7, sp, #0
 800630a:	60f8      	str	r0, [r7, #12]
 800630c:	60b9      	str	r1, [r7, #8]
 800630e:	4613      	mov	r3, r2
 8006310:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006318:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	68ba      	ldr	r2, [r7, #8]
 800631e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006322:	88fa      	ldrh	r2, [r7, #6]
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800632a:	2300      	movs	r3, #0
}
 800632c:	4618      	mov	r0, r3
 800632e:	371c      	adds	r7, #28
 8006330:	46bd      	mov	sp, r7
 8006332:	bc80      	pop	{r7}
 8006334:	4770      	bx	lr

08006336 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8006336:	b480      	push	{r7}
 8006338:	b085      	sub	sp, #20
 800633a:	af00      	add	r7, sp, #0
 800633c:	6078      	str	r0, [r7, #4]
 800633e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006346:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	683a      	ldr	r2, [r7, #0]
 800634c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006350:	2300      	movs	r3, #0
}
 8006352:	4618      	mov	r0, r3
 8006354:	3714      	adds	r7, #20
 8006356:	46bd      	mov	sp, r7
 8006358:	bc80      	pop	{r7}
 800635a:	4770      	bx	lr

0800635c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b084      	sub	sp, #16
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800636a:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006372:	2b00      	cmp	r3, #0
 8006374:	d017      	beq.n	80063a6 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	7c1b      	ldrb	r3, [r3, #16]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d109      	bne.n	8006392 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006384:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006388:	2101      	movs	r1, #1
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f001 fcaa 	bl	8007ce4 <USBD_LL_PrepareReceive>
 8006390:	e007      	b.n	80063a2 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006398:	2340      	movs	r3, #64	; 0x40
 800639a:	2101      	movs	r1, #1
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f001 fca1 	bl	8007ce4 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80063a2:	2300      	movs	r3, #0
 80063a4:	e000      	b.n	80063a8 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80063a6:	2302      	movs	r3, #2
  }
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	3710      	adds	r7, #16
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}

080063b0 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b084      	sub	sp, #16
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	60f8      	str	r0, [r7, #12]
 80063b8:	60b9      	str	r1, [r7, #8]
 80063ba:	4613      	mov	r3, r2
 80063bc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d101      	bne.n	80063c8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80063c4:	2302      	movs	r3, #2
 80063c6:	e01a      	b.n	80063fe <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d003      	beq.n	80063da <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2200      	movs	r2, #0
 80063d6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d003      	beq.n	80063e8 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	68ba      	ldr	r2, [r7, #8]
 80063e4:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2201      	movs	r2, #1
 80063ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	79fa      	ldrb	r2, [r7, #7]
 80063f4:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80063f6:	68f8      	ldr	r0, [r7, #12]
 80063f8:	f001 fb0e 	bl	8007a18 <USBD_LL_Init>

  return USBD_OK;
 80063fc:	2300      	movs	r3, #0
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3710      	adds	r7, #16
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}

08006406 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006406:	b480      	push	{r7}
 8006408:	b085      	sub	sp, #20
 800640a:	af00      	add	r7, sp, #0
 800640c:	6078      	str	r0, [r7, #4]
 800640e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006410:	2300      	movs	r3, #0
 8006412:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d006      	beq.n	8006428 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	683a      	ldr	r2, [r7, #0]
 800641e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8006422:	2300      	movs	r3, #0
 8006424:	73fb      	strb	r3, [r7, #15]
 8006426:	e001      	b.n	800642c <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006428:	2302      	movs	r3, #2
 800642a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800642c:	7bfb      	ldrb	r3, [r7, #15]
}
 800642e:	4618      	mov	r0, r3
 8006430:	3714      	adds	r7, #20
 8006432:	46bd      	mov	sp, r7
 8006434:	bc80      	pop	{r7}
 8006436:	4770      	bx	lr

08006438 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b082      	sub	sp, #8
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f001 fb43 	bl	8007acc <USBD_LL_Start>

  return USBD_OK;
 8006446:	2300      	movs	r3, #0
}
 8006448:	4618      	mov	r0, r3
 800644a:	3708      	adds	r7, #8
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}

08006450 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006450:	b480      	push	{r7}
 8006452:	b083      	sub	sp, #12
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006458:	2300      	movs	r3, #0
}
 800645a:	4618      	mov	r0, r3
 800645c:	370c      	adds	r7, #12
 800645e:	46bd      	mov	sp, r7
 8006460:	bc80      	pop	{r7}
 8006462:	4770      	bx	lr

08006464 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b084      	sub	sp, #16
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
 800646c:	460b      	mov	r3, r1
 800646e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006470:	2302      	movs	r3, #2
 8006472:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800647a:	2b00      	cmp	r3, #0
 800647c:	d00c      	beq.n	8006498 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	78fa      	ldrb	r2, [r7, #3]
 8006488:	4611      	mov	r1, r2
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	4798      	blx	r3
 800648e:	4603      	mov	r3, r0
 8006490:	2b00      	cmp	r3, #0
 8006492:	d101      	bne.n	8006498 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006494:	2300      	movs	r3, #0
 8006496:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006498:	7bfb      	ldrb	r3, [r7, #15]
}
 800649a:	4618      	mov	r0, r3
 800649c:	3710      	adds	r7, #16
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}

080064a2 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80064a2:	b580      	push	{r7, lr}
 80064a4:	b082      	sub	sp, #8
 80064a6:	af00      	add	r7, sp, #0
 80064a8:	6078      	str	r0, [r7, #4]
 80064aa:	460b      	mov	r3, r1
 80064ac:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	78fa      	ldrb	r2, [r7, #3]
 80064b8:	4611      	mov	r1, r2
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	4798      	blx	r3

  return USBD_OK;
 80064be:	2300      	movs	r3, #0
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	3708      	adds	r7, #8
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}

080064c8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b082      	sub	sp, #8
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
 80064d0:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80064d8:	6839      	ldr	r1, [r7, #0]
 80064da:	4618      	mov	r0, r3
 80064dc:	f000 fed7 	bl	800728e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2201      	movs	r2, #1
 80064e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80064ee:	461a      	mov	r2, r3
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80064fc:	f003 031f 	and.w	r3, r3, #31
 8006500:	2b02      	cmp	r3, #2
 8006502:	d016      	beq.n	8006532 <USBD_LL_SetupStage+0x6a>
 8006504:	2b02      	cmp	r3, #2
 8006506:	d81c      	bhi.n	8006542 <USBD_LL_SetupStage+0x7a>
 8006508:	2b00      	cmp	r3, #0
 800650a:	d002      	beq.n	8006512 <USBD_LL_SetupStage+0x4a>
 800650c:	2b01      	cmp	r3, #1
 800650e:	d008      	beq.n	8006522 <USBD_LL_SetupStage+0x5a>
 8006510:	e017      	b.n	8006542 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006518:	4619      	mov	r1, r3
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f000 f9ca 	bl	80068b4 <USBD_StdDevReq>
      break;
 8006520:	e01a      	b.n	8006558 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006528:	4619      	mov	r1, r3
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f000 fa2c 	bl	8006988 <USBD_StdItfReq>
      break;
 8006530:	e012      	b.n	8006558 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006538:	4619      	mov	r1, r3
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f000 fa6c 	bl	8006a18 <USBD_StdEPReq>
      break;
 8006540:	e00a      	b.n	8006558 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006548:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800654c:	b2db      	uxtb	r3, r3
 800654e:	4619      	mov	r1, r3
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f001 fb1b 	bl	8007b8c <USBD_LL_StallEP>
      break;
 8006556:	bf00      	nop
  }

  return USBD_OK;
 8006558:	2300      	movs	r3, #0
}
 800655a:	4618      	mov	r0, r3
 800655c:	3708      	adds	r7, #8
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}

08006562 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006562:	b580      	push	{r7, lr}
 8006564:	b086      	sub	sp, #24
 8006566:	af00      	add	r7, sp, #0
 8006568:	60f8      	str	r0, [r7, #12]
 800656a:	460b      	mov	r3, r1
 800656c:	607a      	str	r2, [r7, #4]
 800656e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006570:	7afb      	ldrb	r3, [r7, #11]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d14b      	bne.n	800660e <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800657c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006584:	2b03      	cmp	r3, #3
 8006586:	d134      	bne.n	80065f2 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	68da      	ldr	r2, [r3, #12]
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	691b      	ldr	r3, [r3, #16]
 8006590:	429a      	cmp	r2, r3
 8006592:	d919      	bls.n	80065c8 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	68da      	ldr	r2, [r3, #12]
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	691b      	ldr	r3, [r3, #16]
 800659c:	1ad2      	subs	r2, r2, r3
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	68da      	ldr	r2, [r3, #12]
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80065aa:	429a      	cmp	r2, r3
 80065ac:	d203      	bcs.n	80065b6 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80065b2:	b29b      	uxth	r3, r3
 80065b4:	e002      	b.n	80065bc <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80065ba:	b29b      	uxth	r3, r3
 80065bc:	461a      	mov	r2, r3
 80065be:	6879      	ldr	r1, [r7, #4]
 80065c0:	68f8      	ldr	r0, [r7, #12]
 80065c2:	f000 ff56 	bl	8007472 <USBD_CtlContinueRx>
 80065c6:	e038      	b.n	800663a <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065ce:	691b      	ldr	r3, [r3, #16]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d00a      	beq.n	80065ea <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80065da:	2b03      	cmp	r3, #3
 80065dc:	d105      	bne.n	80065ea <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065e4:	691b      	ldr	r3, [r3, #16]
 80065e6:	68f8      	ldr	r0, [r7, #12]
 80065e8:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80065ea:	68f8      	ldr	r0, [r7, #12]
 80065ec:	f000 ff53 	bl	8007496 <USBD_CtlSendStatus>
 80065f0:	e023      	b.n	800663a <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80065f8:	2b05      	cmp	r3, #5
 80065fa:	d11e      	bne.n	800663a <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	2200      	movs	r2, #0
 8006600:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006604:	2100      	movs	r1, #0
 8006606:	68f8      	ldr	r0, [r7, #12]
 8006608:	f001 fac0 	bl	8007b8c <USBD_LL_StallEP>
 800660c:	e015      	b.n	800663a <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006614:	699b      	ldr	r3, [r3, #24]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d00d      	beq.n	8006636 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006620:	2b03      	cmp	r3, #3
 8006622:	d108      	bne.n	8006636 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800662a:	699b      	ldr	r3, [r3, #24]
 800662c:	7afa      	ldrb	r2, [r7, #11]
 800662e:	4611      	mov	r1, r2
 8006630:	68f8      	ldr	r0, [r7, #12]
 8006632:	4798      	blx	r3
 8006634:	e001      	b.n	800663a <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006636:	2302      	movs	r3, #2
 8006638:	e000      	b.n	800663c <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800663a:	2300      	movs	r3, #0
}
 800663c:	4618      	mov	r0, r3
 800663e:	3718      	adds	r7, #24
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}

08006644 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b086      	sub	sp, #24
 8006648:	af00      	add	r7, sp, #0
 800664a:	60f8      	str	r0, [r7, #12]
 800664c:	460b      	mov	r3, r1
 800664e:	607a      	str	r2, [r7, #4]
 8006650:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006652:	7afb      	ldrb	r3, [r7, #11]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d17f      	bne.n	8006758 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	3314      	adds	r3, #20
 800665c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006664:	2b02      	cmp	r3, #2
 8006666:	d15c      	bne.n	8006722 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	68da      	ldr	r2, [r3, #12]
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	691b      	ldr	r3, [r3, #16]
 8006670:	429a      	cmp	r2, r3
 8006672:	d915      	bls.n	80066a0 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	68da      	ldr	r2, [r3, #12]
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	691b      	ldr	r3, [r3, #16]
 800667c:	1ad2      	subs	r2, r2, r3
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	68db      	ldr	r3, [r3, #12]
 8006686:	b29b      	uxth	r3, r3
 8006688:	461a      	mov	r2, r3
 800668a:	6879      	ldr	r1, [r7, #4]
 800668c:	68f8      	ldr	r0, [r7, #12]
 800668e:	f000 fec0 	bl	8007412 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006692:	2300      	movs	r3, #0
 8006694:	2200      	movs	r2, #0
 8006696:	2100      	movs	r1, #0
 8006698:	68f8      	ldr	r0, [r7, #12]
 800669a:	f001 fb23 	bl	8007ce4 <USBD_LL_PrepareReceive>
 800669e:	e04e      	b.n	800673e <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	689b      	ldr	r3, [r3, #8]
 80066a4:	697a      	ldr	r2, [r7, #20]
 80066a6:	6912      	ldr	r2, [r2, #16]
 80066a8:	fbb3 f1f2 	udiv	r1, r3, r2
 80066ac:	fb01 f202 	mul.w	r2, r1, r2
 80066b0:	1a9b      	subs	r3, r3, r2
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d11c      	bne.n	80066f0 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	689a      	ldr	r2, [r3, #8]
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80066be:	429a      	cmp	r2, r3
 80066c0:	d316      	bcc.n	80066f0 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	689a      	ldr	r2, [r3, #8]
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d20f      	bcs.n	80066f0 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80066d0:	2200      	movs	r2, #0
 80066d2:	2100      	movs	r1, #0
 80066d4:	68f8      	ldr	r0, [r7, #12]
 80066d6:	f000 fe9c 	bl	8007412 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2200      	movs	r2, #0
 80066de:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80066e2:	2300      	movs	r3, #0
 80066e4:	2200      	movs	r2, #0
 80066e6:	2100      	movs	r1, #0
 80066e8:	68f8      	ldr	r0, [r7, #12]
 80066ea:	f001 fafb 	bl	8007ce4 <USBD_LL_PrepareReceive>
 80066ee:	e026      	b.n	800673e <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066f6:	68db      	ldr	r3, [r3, #12]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d00a      	beq.n	8006712 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006702:	2b03      	cmp	r3, #3
 8006704:	d105      	bne.n	8006712 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800670c:	68db      	ldr	r3, [r3, #12]
 800670e:	68f8      	ldr	r0, [r7, #12]
 8006710:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006712:	2180      	movs	r1, #128	; 0x80
 8006714:	68f8      	ldr	r0, [r7, #12]
 8006716:	f001 fa39 	bl	8007b8c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800671a:	68f8      	ldr	r0, [r7, #12]
 800671c:	f000 fece 	bl	80074bc <USBD_CtlReceiveStatus>
 8006720:	e00d      	b.n	800673e <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006728:	2b04      	cmp	r3, #4
 800672a:	d004      	beq.n	8006736 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006732:	2b00      	cmp	r3, #0
 8006734:	d103      	bne.n	800673e <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006736:	2180      	movs	r1, #128	; 0x80
 8006738:	68f8      	ldr	r0, [r7, #12]
 800673a:	f001 fa27 	bl	8007b8c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006744:	2b01      	cmp	r3, #1
 8006746:	d11d      	bne.n	8006784 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006748:	68f8      	ldr	r0, [r7, #12]
 800674a:	f7ff fe81 	bl	8006450 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	2200      	movs	r2, #0
 8006752:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006756:	e015      	b.n	8006784 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800675e:	695b      	ldr	r3, [r3, #20]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d00d      	beq.n	8006780 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800676a:	2b03      	cmp	r3, #3
 800676c:	d108      	bne.n	8006780 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006774:	695b      	ldr	r3, [r3, #20]
 8006776:	7afa      	ldrb	r2, [r7, #11]
 8006778:	4611      	mov	r1, r2
 800677a:	68f8      	ldr	r0, [r7, #12]
 800677c:	4798      	blx	r3
 800677e:	e001      	b.n	8006784 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006780:	2302      	movs	r3, #2
 8006782:	e000      	b.n	8006786 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006784:	2300      	movs	r3, #0
}
 8006786:	4618      	mov	r0, r3
 8006788:	3718      	adds	r7, #24
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}

0800678e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800678e:	b580      	push	{r7, lr}
 8006790:	b082      	sub	sp, #8
 8006792:	af00      	add	r7, sp, #0
 8006794:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006796:	2340      	movs	r3, #64	; 0x40
 8006798:	2200      	movs	r2, #0
 800679a:	2100      	movs	r1, #0
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f001 f9b0 	bl	8007b02 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2201      	movs	r2, #1
 80067a6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2240      	movs	r2, #64	; 0x40
 80067ae:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80067b2:	2340      	movs	r3, #64	; 0x40
 80067b4:	2200      	movs	r2, #0
 80067b6:	2180      	movs	r1, #128	; 0x80
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	f001 f9a2 	bl	8007b02 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2201      	movs	r2, #1
 80067c2:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2240      	movs	r2, #64	; 0x40
 80067c8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2201      	movs	r2, #1
 80067ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2200      	movs	r2, #0
 80067d6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2200      	movs	r2, #0
 80067de:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2200      	movs	r2, #0
 80067e4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d009      	beq.n	8006806 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	687a      	ldr	r2, [r7, #4]
 80067fc:	6852      	ldr	r2, [r2, #4]
 80067fe:	b2d2      	uxtb	r2, r2
 8006800:	4611      	mov	r1, r2
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	4798      	blx	r3
  }

  return USBD_OK;
 8006806:	2300      	movs	r3, #0
}
 8006808:	4618      	mov	r0, r3
 800680a:	3708      	adds	r7, #8
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}

08006810 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006810:	b480      	push	{r7}
 8006812:	b083      	sub	sp, #12
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
 8006818:	460b      	mov	r3, r1
 800681a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	78fa      	ldrb	r2, [r7, #3]
 8006820:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006822:	2300      	movs	r3, #0
}
 8006824:	4618      	mov	r0, r3
 8006826:	370c      	adds	r7, #12
 8006828:	46bd      	mov	sp, r7
 800682a:	bc80      	pop	{r7}
 800682c:	4770      	bx	lr

0800682e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800682e:	b480      	push	{r7}
 8006830:	b083      	sub	sp, #12
 8006832:	af00      	add	r7, sp, #0
 8006834:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2204      	movs	r2, #4
 8006846:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800684a:	2300      	movs	r3, #0
}
 800684c:	4618      	mov	r0, r3
 800684e:	370c      	adds	r7, #12
 8006850:	46bd      	mov	sp, r7
 8006852:	bc80      	pop	{r7}
 8006854:	4770      	bx	lr

08006856 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006856:	b480      	push	{r7}
 8006858:	b083      	sub	sp, #12
 800685a:	af00      	add	r7, sp, #0
 800685c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006864:	2b04      	cmp	r3, #4
 8006866:	d105      	bne.n	8006874 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006874:	2300      	movs	r3, #0
}
 8006876:	4618      	mov	r0, r3
 8006878:	370c      	adds	r7, #12
 800687a:	46bd      	mov	sp, r7
 800687c:	bc80      	pop	{r7}
 800687e:	4770      	bx	lr

08006880 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b082      	sub	sp, #8
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800688e:	2b03      	cmp	r3, #3
 8006890:	d10b      	bne.n	80068aa <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006898:	69db      	ldr	r3, [r3, #28]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d005      	beq.n	80068aa <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068a4:	69db      	ldr	r3, [r3, #28]
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80068aa:	2300      	movs	r3, #0
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	3708      	adds	r7, #8
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}

080068b4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b084      	sub	sp, #16
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80068be:	2300      	movs	r3, #0
 80068c0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	781b      	ldrb	r3, [r3, #0]
 80068c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80068ca:	2b40      	cmp	r3, #64	; 0x40
 80068cc:	d005      	beq.n	80068da <USBD_StdDevReq+0x26>
 80068ce:	2b40      	cmp	r3, #64	; 0x40
 80068d0:	d84f      	bhi.n	8006972 <USBD_StdDevReq+0xbe>
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d009      	beq.n	80068ea <USBD_StdDevReq+0x36>
 80068d6:	2b20      	cmp	r3, #32
 80068d8:	d14b      	bne.n	8006972 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068e0:	689b      	ldr	r3, [r3, #8]
 80068e2:	6839      	ldr	r1, [r7, #0]
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	4798      	blx	r3
      break;
 80068e8:	e048      	b.n	800697c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	785b      	ldrb	r3, [r3, #1]
 80068ee:	2b09      	cmp	r3, #9
 80068f0:	d839      	bhi.n	8006966 <USBD_StdDevReq+0xb2>
 80068f2:	a201      	add	r2, pc, #4	; (adr r2, 80068f8 <USBD_StdDevReq+0x44>)
 80068f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068f8:	08006949 	.word	0x08006949
 80068fc:	0800695d 	.word	0x0800695d
 8006900:	08006967 	.word	0x08006967
 8006904:	08006953 	.word	0x08006953
 8006908:	08006967 	.word	0x08006967
 800690c:	0800692b 	.word	0x0800692b
 8006910:	08006921 	.word	0x08006921
 8006914:	08006967 	.word	0x08006967
 8006918:	0800693f 	.word	0x0800693f
 800691c:	08006935 	.word	0x08006935
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006920:	6839      	ldr	r1, [r7, #0]
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f000 f9dc 	bl	8006ce0 <USBD_GetDescriptor>
          break;
 8006928:	e022      	b.n	8006970 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800692a:	6839      	ldr	r1, [r7, #0]
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f000 fb3f 	bl	8006fb0 <USBD_SetAddress>
          break;
 8006932:	e01d      	b.n	8006970 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006934:	6839      	ldr	r1, [r7, #0]
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f000 fb7e 	bl	8007038 <USBD_SetConfig>
          break;
 800693c:	e018      	b.n	8006970 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800693e:	6839      	ldr	r1, [r7, #0]
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f000 fc07 	bl	8007154 <USBD_GetConfig>
          break;
 8006946:	e013      	b.n	8006970 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006948:	6839      	ldr	r1, [r7, #0]
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f000 fc37 	bl	80071be <USBD_GetStatus>
          break;
 8006950:	e00e      	b.n	8006970 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006952:	6839      	ldr	r1, [r7, #0]
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f000 fc65 	bl	8007224 <USBD_SetFeature>
          break;
 800695a:	e009      	b.n	8006970 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800695c:	6839      	ldr	r1, [r7, #0]
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f000 fc74 	bl	800724c <USBD_ClrFeature>
          break;
 8006964:	e004      	b.n	8006970 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006966:	6839      	ldr	r1, [r7, #0]
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f000 fccc 	bl	8007306 <USBD_CtlError>
          break;
 800696e:	bf00      	nop
      }
      break;
 8006970:	e004      	b.n	800697c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8006972:	6839      	ldr	r1, [r7, #0]
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f000 fcc6 	bl	8007306 <USBD_CtlError>
      break;
 800697a:	bf00      	nop
  }

  return ret;
 800697c:	7bfb      	ldrb	r3, [r7, #15]
}
 800697e:	4618      	mov	r0, r3
 8006980:	3710      	adds	r7, #16
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}
 8006986:	bf00      	nop

08006988 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b084      	sub	sp, #16
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
 8006990:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006992:	2300      	movs	r3, #0
 8006994:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	781b      	ldrb	r3, [r3, #0]
 800699a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800699e:	2b40      	cmp	r3, #64	; 0x40
 80069a0:	d005      	beq.n	80069ae <USBD_StdItfReq+0x26>
 80069a2:	2b40      	cmp	r3, #64	; 0x40
 80069a4:	d82e      	bhi.n	8006a04 <USBD_StdItfReq+0x7c>
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d001      	beq.n	80069ae <USBD_StdItfReq+0x26>
 80069aa:	2b20      	cmp	r3, #32
 80069ac:	d12a      	bne.n	8006a04 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069b4:	3b01      	subs	r3, #1
 80069b6:	2b02      	cmp	r3, #2
 80069b8:	d81d      	bhi.n	80069f6 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	889b      	ldrh	r3, [r3, #4]
 80069be:	b2db      	uxtb	r3, r3
 80069c0:	2b01      	cmp	r3, #1
 80069c2:	d813      	bhi.n	80069ec <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069ca:	689b      	ldr	r3, [r3, #8]
 80069cc:	6839      	ldr	r1, [r7, #0]
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	4798      	blx	r3
 80069d2:	4603      	mov	r3, r0
 80069d4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	88db      	ldrh	r3, [r3, #6]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d110      	bne.n	8006a00 <USBD_StdItfReq+0x78>
 80069de:	7bfb      	ldrb	r3, [r7, #15]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d10d      	bne.n	8006a00 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f000 fd56 	bl	8007496 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80069ea:	e009      	b.n	8006a00 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80069ec:	6839      	ldr	r1, [r7, #0]
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f000 fc89 	bl	8007306 <USBD_CtlError>
          break;
 80069f4:	e004      	b.n	8006a00 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80069f6:	6839      	ldr	r1, [r7, #0]
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f000 fc84 	bl	8007306 <USBD_CtlError>
          break;
 80069fe:	e000      	b.n	8006a02 <USBD_StdItfReq+0x7a>
          break;
 8006a00:	bf00      	nop
      }
      break;
 8006a02:	e004      	b.n	8006a0e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8006a04:	6839      	ldr	r1, [r7, #0]
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f000 fc7d 	bl	8007306 <USBD_CtlError>
      break;
 8006a0c:	bf00      	nop
  }

  return USBD_OK;
 8006a0e:	2300      	movs	r3, #0
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3710      	adds	r7, #16
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}

08006a18 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b084      	sub	sp, #16
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
 8006a20:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006a22:	2300      	movs	r3, #0
 8006a24:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	889b      	ldrh	r3, [r3, #4]
 8006a2a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	781b      	ldrb	r3, [r3, #0]
 8006a30:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006a34:	2b40      	cmp	r3, #64	; 0x40
 8006a36:	d007      	beq.n	8006a48 <USBD_StdEPReq+0x30>
 8006a38:	2b40      	cmp	r3, #64	; 0x40
 8006a3a:	f200 8146 	bhi.w	8006cca <USBD_StdEPReq+0x2b2>
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d00a      	beq.n	8006a58 <USBD_StdEPReq+0x40>
 8006a42:	2b20      	cmp	r3, #32
 8006a44:	f040 8141 	bne.w	8006cca <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a4e:	689b      	ldr	r3, [r3, #8]
 8006a50:	6839      	ldr	r1, [r7, #0]
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	4798      	blx	r3
      break;
 8006a56:	e13d      	b.n	8006cd4 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	781b      	ldrb	r3, [r3, #0]
 8006a5c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006a60:	2b20      	cmp	r3, #32
 8006a62:	d10a      	bne.n	8006a7a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a6a:	689b      	ldr	r3, [r3, #8]
 8006a6c:	6839      	ldr	r1, [r7, #0]
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	4798      	blx	r3
 8006a72:	4603      	mov	r3, r0
 8006a74:	73fb      	strb	r3, [r7, #15]

        return ret;
 8006a76:	7bfb      	ldrb	r3, [r7, #15]
 8006a78:	e12d      	b.n	8006cd6 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	785b      	ldrb	r3, [r3, #1]
 8006a7e:	2b03      	cmp	r3, #3
 8006a80:	d007      	beq.n	8006a92 <USBD_StdEPReq+0x7a>
 8006a82:	2b03      	cmp	r3, #3
 8006a84:	f300 811b 	bgt.w	8006cbe <USBD_StdEPReq+0x2a6>
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d072      	beq.n	8006b72 <USBD_StdEPReq+0x15a>
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	d03a      	beq.n	8006b06 <USBD_StdEPReq+0xee>
 8006a90:	e115      	b.n	8006cbe <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a98:	2b02      	cmp	r3, #2
 8006a9a:	d002      	beq.n	8006aa2 <USBD_StdEPReq+0x8a>
 8006a9c:	2b03      	cmp	r3, #3
 8006a9e:	d015      	beq.n	8006acc <USBD_StdEPReq+0xb4>
 8006aa0:	e02b      	b.n	8006afa <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006aa2:	7bbb      	ldrb	r3, [r7, #14]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d00c      	beq.n	8006ac2 <USBD_StdEPReq+0xaa>
 8006aa8:	7bbb      	ldrb	r3, [r7, #14]
 8006aaa:	2b80      	cmp	r3, #128	; 0x80
 8006aac:	d009      	beq.n	8006ac2 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006aae:	7bbb      	ldrb	r3, [r7, #14]
 8006ab0:	4619      	mov	r1, r3
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f001 f86a 	bl	8007b8c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006ab8:	2180      	movs	r1, #128	; 0x80
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f001 f866 	bl	8007b8c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006ac0:	e020      	b.n	8006b04 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8006ac2:	6839      	ldr	r1, [r7, #0]
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f000 fc1e 	bl	8007306 <USBD_CtlError>
              break;
 8006aca:	e01b      	b.n	8006b04 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	885b      	ldrh	r3, [r3, #2]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d10e      	bne.n	8006af2 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8006ad4:	7bbb      	ldrb	r3, [r7, #14]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d00b      	beq.n	8006af2 <USBD_StdEPReq+0xda>
 8006ada:	7bbb      	ldrb	r3, [r7, #14]
 8006adc:	2b80      	cmp	r3, #128	; 0x80
 8006ade:	d008      	beq.n	8006af2 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	88db      	ldrh	r3, [r3, #6]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d104      	bne.n	8006af2 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006ae8:	7bbb      	ldrb	r3, [r7, #14]
 8006aea:	4619      	mov	r1, r3
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f001 f84d 	bl	8007b8c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f000 fccf 	bl	8007496 <USBD_CtlSendStatus>

              break;
 8006af8:	e004      	b.n	8006b04 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8006afa:	6839      	ldr	r1, [r7, #0]
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f000 fc02 	bl	8007306 <USBD_CtlError>
              break;
 8006b02:	bf00      	nop
          }
          break;
 8006b04:	e0e0      	b.n	8006cc8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b0c:	2b02      	cmp	r3, #2
 8006b0e:	d002      	beq.n	8006b16 <USBD_StdEPReq+0xfe>
 8006b10:	2b03      	cmp	r3, #3
 8006b12:	d015      	beq.n	8006b40 <USBD_StdEPReq+0x128>
 8006b14:	e026      	b.n	8006b64 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006b16:	7bbb      	ldrb	r3, [r7, #14]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d00c      	beq.n	8006b36 <USBD_StdEPReq+0x11e>
 8006b1c:	7bbb      	ldrb	r3, [r7, #14]
 8006b1e:	2b80      	cmp	r3, #128	; 0x80
 8006b20:	d009      	beq.n	8006b36 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006b22:	7bbb      	ldrb	r3, [r7, #14]
 8006b24:	4619      	mov	r1, r3
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f001 f830 	bl	8007b8c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006b2c:	2180      	movs	r1, #128	; 0x80
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f001 f82c 	bl	8007b8c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006b34:	e01c      	b.n	8006b70 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8006b36:	6839      	ldr	r1, [r7, #0]
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f000 fbe4 	bl	8007306 <USBD_CtlError>
              break;
 8006b3e:	e017      	b.n	8006b70 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	885b      	ldrh	r3, [r3, #2]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d112      	bne.n	8006b6e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006b48:	7bbb      	ldrb	r3, [r7, #14]
 8006b4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d004      	beq.n	8006b5c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006b52:	7bbb      	ldrb	r3, [r7, #14]
 8006b54:	4619      	mov	r1, r3
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f001 f837 	bl	8007bca <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f000 fc9a 	bl	8007496 <USBD_CtlSendStatus>
              }
              break;
 8006b62:	e004      	b.n	8006b6e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8006b64:	6839      	ldr	r1, [r7, #0]
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f000 fbcd 	bl	8007306 <USBD_CtlError>
              break;
 8006b6c:	e000      	b.n	8006b70 <USBD_StdEPReq+0x158>
              break;
 8006b6e:	bf00      	nop
          }
          break;
 8006b70:	e0aa      	b.n	8006cc8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b78:	2b02      	cmp	r3, #2
 8006b7a:	d002      	beq.n	8006b82 <USBD_StdEPReq+0x16a>
 8006b7c:	2b03      	cmp	r3, #3
 8006b7e:	d032      	beq.n	8006be6 <USBD_StdEPReq+0x1ce>
 8006b80:	e097      	b.n	8006cb2 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006b82:	7bbb      	ldrb	r3, [r7, #14]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d007      	beq.n	8006b98 <USBD_StdEPReq+0x180>
 8006b88:	7bbb      	ldrb	r3, [r7, #14]
 8006b8a:	2b80      	cmp	r3, #128	; 0x80
 8006b8c:	d004      	beq.n	8006b98 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8006b8e:	6839      	ldr	r1, [r7, #0]
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f000 fbb8 	bl	8007306 <USBD_CtlError>
                break;
 8006b96:	e091      	b.n	8006cbc <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	da0b      	bge.n	8006bb8 <USBD_StdEPReq+0x1a0>
 8006ba0:	7bbb      	ldrb	r3, [r7, #14]
 8006ba2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006ba6:	4613      	mov	r3, r2
 8006ba8:	009b      	lsls	r3, r3, #2
 8006baa:	4413      	add	r3, r2
 8006bac:	009b      	lsls	r3, r3, #2
 8006bae:	3310      	adds	r3, #16
 8006bb0:	687a      	ldr	r2, [r7, #4]
 8006bb2:	4413      	add	r3, r2
 8006bb4:	3304      	adds	r3, #4
 8006bb6:	e00b      	b.n	8006bd0 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006bb8:	7bbb      	ldrb	r3, [r7, #14]
 8006bba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006bbe:	4613      	mov	r3, r2
 8006bc0:	009b      	lsls	r3, r3, #2
 8006bc2:	4413      	add	r3, r2
 8006bc4:	009b      	lsls	r3, r3, #2
 8006bc6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006bca:	687a      	ldr	r2, [r7, #4]
 8006bcc:	4413      	add	r3, r2
 8006bce:	3304      	adds	r3, #4
 8006bd0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	2202      	movs	r2, #2
 8006bdc:	4619      	mov	r1, r3
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f000 fbfb 	bl	80073da <USBD_CtlSendData>
              break;
 8006be4:	e06a      	b.n	8006cbc <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006be6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	da11      	bge.n	8006c12 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006bee:	7bbb      	ldrb	r3, [r7, #14]
 8006bf0:	f003 020f 	and.w	r2, r3, #15
 8006bf4:	6879      	ldr	r1, [r7, #4]
 8006bf6:	4613      	mov	r3, r2
 8006bf8:	009b      	lsls	r3, r3, #2
 8006bfa:	4413      	add	r3, r2
 8006bfc:	009b      	lsls	r3, r3, #2
 8006bfe:	440b      	add	r3, r1
 8006c00:	3318      	adds	r3, #24
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d117      	bne.n	8006c38 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8006c08:	6839      	ldr	r1, [r7, #0]
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f000 fb7b 	bl	8007306 <USBD_CtlError>
                  break;
 8006c10:	e054      	b.n	8006cbc <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006c12:	7bbb      	ldrb	r3, [r7, #14]
 8006c14:	f003 020f 	and.w	r2, r3, #15
 8006c18:	6879      	ldr	r1, [r7, #4]
 8006c1a:	4613      	mov	r3, r2
 8006c1c:	009b      	lsls	r3, r3, #2
 8006c1e:	4413      	add	r3, r2
 8006c20:	009b      	lsls	r3, r3, #2
 8006c22:	440b      	add	r3, r1
 8006c24:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d104      	bne.n	8006c38 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8006c2e:	6839      	ldr	r1, [r7, #0]
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f000 fb68 	bl	8007306 <USBD_CtlError>
                  break;
 8006c36:	e041      	b.n	8006cbc <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	da0b      	bge.n	8006c58 <USBD_StdEPReq+0x240>
 8006c40:	7bbb      	ldrb	r3, [r7, #14]
 8006c42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006c46:	4613      	mov	r3, r2
 8006c48:	009b      	lsls	r3, r3, #2
 8006c4a:	4413      	add	r3, r2
 8006c4c:	009b      	lsls	r3, r3, #2
 8006c4e:	3310      	adds	r3, #16
 8006c50:	687a      	ldr	r2, [r7, #4]
 8006c52:	4413      	add	r3, r2
 8006c54:	3304      	adds	r3, #4
 8006c56:	e00b      	b.n	8006c70 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006c58:	7bbb      	ldrb	r3, [r7, #14]
 8006c5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c5e:	4613      	mov	r3, r2
 8006c60:	009b      	lsls	r3, r3, #2
 8006c62:	4413      	add	r3, r2
 8006c64:	009b      	lsls	r3, r3, #2
 8006c66:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006c6a:	687a      	ldr	r2, [r7, #4]
 8006c6c:	4413      	add	r3, r2
 8006c6e:	3304      	adds	r3, #4
 8006c70:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006c72:	7bbb      	ldrb	r3, [r7, #14]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d002      	beq.n	8006c7e <USBD_StdEPReq+0x266>
 8006c78:	7bbb      	ldrb	r3, [r7, #14]
 8006c7a:	2b80      	cmp	r3, #128	; 0x80
 8006c7c:	d103      	bne.n	8006c86 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	2200      	movs	r2, #0
 8006c82:	601a      	str	r2, [r3, #0]
 8006c84:	e00e      	b.n	8006ca4 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006c86:	7bbb      	ldrb	r3, [r7, #14]
 8006c88:	4619      	mov	r1, r3
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f000 ffbc 	bl	8007c08 <USBD_LL_IsStallEP>
 8006c90:	4603      	mov	r3, r0
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d003      	beq.n	8006c9e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	2201      	movs	r2, #1
 8006c9a:	601a      	str	r2, [r3, #0]
 8006c9c:	e002      	b.n	8006ca4 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	2202      	movs	r2, #2
 8006ca8:	4619      	mov	r1, r3
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f000 fb95 	bl	80073da <USBD_CtlSendData>
              break;
 8006cb0:	e004      	b.n	8006cbc <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8006cb2:	6839      	ldr	r1, [r7, #0]
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f000 fb26 	bl	8007306 <USBD_CtlError>
              break;
 8006cba:	bf00      	nop
          }
          break;
 8006cbc:	e004      	b.n	8006cc8 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8006cbe:	6839      	ldr	r1, [r7, #0]
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f000 fb20 	bl	8007306 <USBD_CtlError>
          break;
 8006cc6:	bf00      	nop
      }
      break;
 8006cc8:	e004      	b.n	8006cd4 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8006cca:	6839      	ldr	r1, [r7, #0]
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f000 fb1a 	bl	8007306 <USBD_CtlError>
      break;
 8006cd2:	bf00      	nop
  }

  return ret;
 8006cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	3710      	adds	r7, #16
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bd80      	pop	{r7, pc}
	...

08006ce0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b084      	sub	sp, #16
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
 8006ce8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006cea:	2300      	movs	r3, #0
 8006cec:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	885b      	ldrh	r3, [r3, #2]
 8006cfa:	0a1b      	lsrs	r3, r3, #8
 8006cfc:	b29b      	uxth	r3, r3
 8006cfe:	3b01      	subs	r3, #1
 8006d00:	2b06      	cmp	r3, #6
 8006d02:	f200 8128 	bhi.w	8006f56 <USBD_GetDescriptor+0x276>
 8006d06:	a201      	add	r2, pc, #4	; (adr r2, 8006d0c <USBD_GetDescriptor+0x2c>)
 8006d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d0c:	08006d29 	.word	0x08006d29
 8006d10:	08006d41 	.word	0x08006d41
 8006d14:	08006d81 	.word	0x08006d81
 8006d18:	08006f57 	.word	0x08006f57
 8006d1c:	08006f57 	.word	0x08006f57
 8006d20:	08006ef7 	.word	0x08006ef7
 8006d24:	08006f23 	.word	0x08006f23
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	687a      	ldr	r2, [r7, #4]
 8006d32:	7c12      	ldrb	r2, [r2, #16]
 8006d34:	f107 0108 	add.w	r1, r7, #8
 8006d38:	4610      	mov	r0, r2
 8006d3a:	4798      	blx	r3
 8006d3c:	60f8      	str	r0, [r7, #12]
      break;
 8006d3e:	e112      	b.n	8006f66 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	7c1b      	ldrb	r3, [r3, #16]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d10d      	bne.n	8006d64 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d50:	f107 0208 	add.w	r2, r7, #8
 8006d54:	4610      	mov	r0, r2
 8006d56:	4798      	blx	r3
 8006d58:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	3301      	adds	r3, #1
 8006d5e:	2202      	movs	r2, #2
 8006d60:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006d62:	e100      	b.n	8006f66 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d6c:	f107 0208 	add.w	r2, r7, #8
 8006d70:	4610      	mov	r0, r2
 8006d72:	4798      	blx	r3
 8006d74:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	3301      	adds	r3, #1
 8006d7a:	2202      	movs	r2, #2
 8006d7c:	701a      	strb	r2, [r3, #0]
      break;
 8006d7e:	e0f2      	b.n	8006f66 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	885b      	ldrh	r3, [r3, #2]
 8006d84:	b2db      	uxtb	r3, r3
 8006d86:	2b05      	cmp	r3, #5
 8006d88:	f200 80ac 	bhi.w	8006ee4 <USBD_GetDescriptor+0x204>
 8006d8c:	a201      	add	r2, pc, #4	; (adr r2, 8006d94 <USBD_GetDescriptor+0xb4>)
 8006d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d92:	bf00      	nop
 8006d94:	08006dad 	.word	0x08006dad
 8006d98:	08006de1 	.word	0x08006de1
 8006d9c:	08006e15 	.word	0x08006e15
 8006da0:	08006e49 	.word	0x08006e49
 8006da4:	08006e7d 	.word	0x08006e7d
 8006da8:	08006eb1 	.word	0x08006eb1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d00b      	beq.n	8006dd0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006dbe:	685b      	ldr	r3, [r3, #4]
 8006dc0:	687a      	ldr	r2, [r7, #4]
 8006dc2:	7c12      	ldrb	r2, [r2, #16]
 8006dc4:	f107 0108 	add.w	r1, r7, #8
 8006dc8:	4610      	mov	r0, r2
 8006dca:	4798      	blx	r3
 8006dcc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006dce:	e091      	b.n	8006ef4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006dd0:	6839      	ldr	r1, [r7, #0]
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f000 fa97 	bl	8007306 <USBD_CtlError>
            err++;
 8006dd8:	7afb      	ldrb	r3, [r7, #11]
 8006dda:	3301      	adds	r3, #1
 8006ddc:	72fb      	strb	r3, [r7, #11]
          break;
 8006dde:	e089      	b.n	8006ef4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006de6:	689b      	ldr	r3, [r3, #8]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d00b      	beq.n	8006e04 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006df2:	689b      	ldr	r3, [r3, #8]
 8006df4:	687a      	ldr	r2, [r7, #4]
 8006df6:	7c12      	ldrb	r2, [r2, #16]
 8006df8:	f107 0108 	add.w	r1, r7, #8
 8006dfc:	4610      	mov	r0, r2
 8006dfe:	4798      	blx	r3
 8006e00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e02:	e077      	b.n	8006ef4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e04:	6839      	ldr	r1, [r7, #0]
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f000 fa7d 	bl	8007306 <USBD_CtlError>
            err++;
 8006e0c:	7afb      	ldrb	r3, [r7, #11]
 8006e0e:	3301      	adds	r3, #1
 8006e10:	72fb      	strb	r3, [r7, #11]
          break;
 8006e12:	e06f      	b.n	8006ef4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006e1a:	68db      	ldr	r3, [r3, #12]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d00b      	beq.n	8006e38 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006e26:	68db      	ldr	r3, [r3, #12]
 8006e28:	687a      	ldr	r2, [r7, #4]
 8006e2a:	7c12      	ldrb	r2, [r2, #16]
 8006e2c:	f107 0108 	add.w	r1, r7, #8
 8006e30:	4610      	mov	r0, r2
 8006e32:	4798      	blx	r3
 8006e34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e36:	e05d      	b.n	8006ef4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e38:	6839      	ldr	r1, [r7, #0]
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f000 fa63 	bl	8007306 <USBD_CtlError>
            err++;
 8006e40:	7afb      	ldrb	r3, [r7, #11]
 8006e42:	3301      	adds	r3, #1
 8006e44:	72fb      	strb	r3, [r7, #11]
          break;
 8006e46:	e055      	b.n	8006ef4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006e4e:	691b      	ldr	r3, [r3, #16]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d00b      	beq.n	8006e6c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006e5a:	691b      	ldr	r3, [r3, #16]
 8006e5c:	687a      	ldr	r2, [r7, #4]
 8006e5e:	7c12      	ldrb	r2, [r2, #16]
 8006e60:	f107 0108 	add.w	r1, r7, #8
 8006e64:	4610      	mov	r0, r2
 8006e66:	4798      	blx	r3
 8006e68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e6a:	e043      	b.n	8006ef4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e6c:	6839      	ldr	r1, [r7, #0]
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f000 fa49 	bl	8007306 <USBD_CtlError>
            err++;
 8006e74:	7afb      	ldrb	r3, [r7, #11]
 8006e76:	3301      	adds	r3, #1
 8006e78:	72fb      	strb	r3, [r7, #11]
          break;
 8006e7a:	e03b      	b.n	8006ef4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006e82:	695b      	ldr	r3, [r3, #20]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d00b      	beq.n	8006ea0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006e8e:	695b      	ldr	r3, [r3, #20]
 8006e90:	687a      	ldr	r2, [r7, #4]
 8006e92:	7c12      	ldrb	r2, [r2, #16]
 8006e94:	f107 0108 	add.w	r1, r7, #8
 8006e98:	4610      	mov	r0, r2
 8006e9a:	4798      	blx	r3
 8006e9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e9e:	e029      	b.n	8006ef4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ea0:	6839      	ldr	r1, [r7, #0]
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f000 fa2f 	bl	8007306 <USBD_CtlError>
            err++;
 8006ea8:	7afb      	ldrb	r3, [r7, #11]
 8006eaa:	3301      	adds	r3, #1
 8006eac:	72fb      	strb	r3, [r7, #11]
          break;
 8006eae:	e021      	b.n	8006ef4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006eb6:	699b      	ldr	r3, [r3, #24]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d00b      	beq.n	8006ed4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006ec2:	699b      	ldr	r3, [r3, #24]
 8006ec4:	687a      	ldr	r2, [r7, #4]
 8006ec6:	7c12      	ldrb	r2, [r2, #16]
 8006ec8:	f107 0108 	add.w	r1, r7, #8
 8006ecc:	4610      	mov	r0, r2
 8006ece:	4798      	blx	r3
 8006ed0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ed2:	e00f      	b.n	8006ef4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ed4:	6839      	ldr	r1, [r7, #0]
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f000 fa15 	bl	8007306 <USBD_CtlError>
            err++;
 8006edc:	7afb      	ldrb	r3, [r7, #11]
 8006ede:	3301      	adds	r3, #1
 8006ee0:	72fb      	strb	r3, [r7, #11]
          break;
 8006ee2:	e007      	b.n	8006ef4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8006ee4:	6839      	ldr	r1, [r7, #0]
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f000 fa0d 	bl	8007306 <USBD_CtlError>
          err++;
 8006eec:	7afb      	ldrb	r3, [r7, #11]
 8006eee:	3301      	adds	r3, #1
 8006ef0:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8006ef2:	e038      	b.n	8006f66 <USBD_GetDescriptor+0x286>
 8006ef4:	e037      	b.n	8006f66 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	7c1b      	ldrb	r3, [r3, #16]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d109      	bne.n	8006f12 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f06:	f107 0208 	add.w	r2, r7, #8
 8006f0a:	4610      	mov	r0, r2
 8006f0c:	4798      	blx	r3
 8006f0e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006f10:	e029      	b.n	8006f66 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006f12:	6839      	ldr	r1, [r7, #0]
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f000 f9f6 	bl	8007306 <USBD_CtlError>
        err++;
 8006f1a:	7afb      	ldrb	r3, [r7, #11]
 8006f1c:	3301      	adds	r3, #1
 8006f1e:	72fb      	strb	r3, [r7, #11]
      break;
 8006f20:	e021      	b.n	8006f66 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	7c1b      	ldrb	r3, [r3, #16]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d10d      	bne.n	8006f46 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f32:	f107 0208 	add.w	r2, r7, #8
 8006f36:	4610      	mov	r0, r2
 8006f38:	4798      	blx	r3
 8006f3a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	3301      	adds	r3, #1
 8006f40:	2207      	movs	r2, #7
 8006f42:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006f44:	e00f      	b.n	8006f66 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006f46:	6839      	ldr	r1, [r7, #0]
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f000 f9dc 	bl	8007306 <USBD_CtlError>
        err++;
 8006f4e:	7afb      	ldrb	r3, [r7, #11]
 8006f50:	3301      	adds	r3, #1
 8006f52:	72fb      	strb	r3, [r7, #11]
      break;
 8006f54:	e007      	b.n	8006f66 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006f56:	6839      	ldr	r1, [r7, #0]
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	f000 f9d4 	bl	8007306 <USBD_CtlError>
      err++;
 8006f5e:	7afb      	ldrb	r3, [r7, #11]
 8006f60:	3301      	adds	r3, #1
 8006f62:	72fb      	strb	r3, [r7, #11]
      break;
 8006f64:	bf00      	nop
  }

  if (err != 0U)
 8006f66:	7afb      	ldrb	r3, [r7, #11]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d11c      	bne.n	8006fa6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8006f6c:	893b      	ldrh	r3, [r7, #8]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d011      	beq.n	8006f96 <USBD_GetDescriptor+0x2b6>
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	88db      	ldrh	r3, [r3, #6]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d00d      	beq.n	8006f96 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	88da      	ldrh	r2, [r3, #6]
 8006f7e:	893b      	ldrh	r3, [r7, #8]
 8006f80:	4293      	cmp	r3, r2
 8006f82:	bf28      	it	cs
 8006f84:	4613      	movcs	r3, r2
 8006f86:	b29b      	uxth	r3, r3
 8006f88:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006f8a:	893b      	ldrh	r3, [r7, #8]
 8006f8c:	461a      	mov	r2, r3
 8006f8e:	68f9      	ldr	r1, [r7, #12]
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f000 fa22 	bl	80073da <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	88db      	ldrh	r3, [r3, #6]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d104      	bne.n	8006fa8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f000 fa79 	bl	8007496 <USBD_CtlSendStatus>
 8006fa4:	e000      	b.n	8006fa8 <USBD_GetDescriptor+0x2c8>
    return;
 8006fa6:	bf00      	nop
    }
  }
}
 8006fa8:	3710      	adds	r7, #16
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}
 8006fae:	bf00      	nop

08006fb0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b084      	sub	sp, #16
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
 8006fb8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	889b      	ldrh	r3, [r3, #4]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d130      	bne.n	8007024 <USBD_SetAddress+0x74>
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	88db      	ldrh	r3, [r3, #6]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d12c      	bne.n	8007024 <USBD_SetAddress+0x74>
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	885b      	ldrh	r3, [r3, #2]
 8006fce:	2b7f      	cmp	r3, #127	; 0x7f
 8006fd0:	d828      	bhi.n	8007024 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	885b      	ldrh	r3, [r3, #2]
 8006fd6:	b2db      	uxtb	r3, r3
 8006fd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fdc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fe4:	2b03      	cmp	r3, #3
 8006fe6:	d104      	bne.n	8006ff2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006fe8:	6839      	ldr	r1, [r7, #0]
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f000 f98b 	bl	8007306 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ff0:	e01d      	b.n	800702e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	7bfa      	ldrb	r2, [r7, #15]
 8006ff6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006ffa:	7bfb      	ldrb	r3, [r7, #15]
 8006ffc:	4619      	mov	r1, r3
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f000 fe2e 	bl	8007c60 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f000 fa46 	bl	8007496 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800700a:	7bfb      	ldrb	r3, [r7, #15]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d004      	beq.n	800701a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2202      	movs	r2, #2
 8007014:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007018:	e009      	b.n	800702e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2201      	movs	r2, #1
 800701e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007022:	e004      	b.n	800702e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007024:	6839      	ldr	r1, [r7, #0]
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f000 f96d 	bl	8007306 <USBD_CtlError>
  }
}
 800702c:	bf00      	nop
 800702e:	bf00      	nop
 8007030:	3710      	adds	r7, #16
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}
	...

08007038 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b082      	sub	sp, #8
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	885b      	ldrh	r3, [r3, #2]
 8007046:	b2da      	uxtb	r2, r3
 8007048:	4b41      	ldr	r3, [pc, #260]	; (8007150 <USBD_SetConfig+0x118>)
 800704a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800704c:	4b40      	ldr	r3, [pc, #256]	; (8007150 <USBD_SetConfig+0x118>)
 800704e:	781b      	ldrb	r3, [r3, #0]
 8007050:	2b01      	cmp	r3, #1
 8007052:	d904      	bls.n	800705e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007054:	6839      	ldr	r1, [r7, #0]
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f000 f955 	bl	8007306 <USBD_CtlError>
 800705c:	e075      	b.n	800714a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007064:	2b02      	cmp	r3, #2
 8007066:	d002      	beq.n	800706e <USBD_SetConfig+0x36>
 8007068:	2b03      	cmp	r3, #3
 800706a:	d023      	beq.n	80070b4 <USBD_SetConfig+0x7c>
 800706c:	e062      	b.n	8007134 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800706e:	4b38      	ldr	r3, [pc, #224]	; (8007150 <USBD_SetConfig+0x118>)
 8007070:	781b      	ldrb	r3, [r3, #0]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d01a      	beq.n	80070ac <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007076:	4b36      	ldr	r3, [pc, #216]	; (8007150 <USBD_SetConfig+0x118>)
 8007078:	781b      	ldrb	r3, [r3, #0]
 800707a:	461a      	mov	r2, r3
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2203      	movs	r2, #3
 8007084:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007088:	4b31      	ldr	r3, [pc, #196]	; (8007150 <USBD_SetConfig+0x118>)
 800708a:	781b      	ldrb	r3, [r3, #0]
 800708c:	4619      	mov	r1, r3
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f7ff f9e8 	bl	8006464 <USBD_SetClassConfig>
 8007094:	4603      	mov	r3, r0
 8007096:	2b02      	cmp	r3, #2
 8007098:	d104      	bne.n	80070a4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800709a:	6839      	ldr	r1, [r7, #0]
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f000 f932 	bl	8007306 <USBD_CtlError>
            return;
 80070a2:	e052      	b.n	800714a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f000 f9f6 	bl	8007496 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80070aa:	e04e      	b.n	800714a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f000 f9f2 	bl	8007496 <USBD_CtlSendStatus>
        break;
 80070b2:	e04a      	b.n	800714a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80070b4:	4b26      	ldr	r3, [pc, #152]	; (8007150 <USBD_SetConfig+0x118>)
 80070b6:	781b      	ldrb	r3, [r3, #0]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d112      	bne.n	80070e2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2202      	movs	r2, #2
 80070c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80070c4:	4b22      	ldr	r3, [pc, #136]	; (8007150 <USBD_SetConfig+0x118>)
 80070c6:	781b      	ldrb	r3, [r3, #0]
 80070c8:	461a      	mov	r2, r3
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80070ce:	4b20      	ldr	r3, [pc, #128]	; (8007150 <USBD_SetConfig+0x118>)
 80070d0:	781b      	ldrb	r3, [r3, #0]
 80070d2:	4619      	mov	r1, r3
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f7ff f9e4 	bl	80064a2 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f000 f9db 	bl	8007496 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80070e0:	e033      	b.n	800714a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80070e2:	4b1b      	ldr	r3, [pc, #108]	; (8007150 <USBD_SetConfig+0x118>)
 80070e4:	781b      	ldrb	r3, [r3, #0]
 80070e6:	461a      	mov	r2, r3
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	429a      	cmp	r2, r3
 80070ee:	d01d      	beq.n	800712c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	685b      	ldr	r3, [r3, #4]
 80070f4:	b2db      	uxtb	r3, r3
 80070f6:	4619      	mov	r1, r3
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f7ff f9d2 	bl	80064a2 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80070fe:	4b14      	ldr	r3, [pc, #80]	; (8007150 <USBD_SetConfig+0x118>)
 8007100:	781b      	ldrb	r3, [r3, #0]
 8007102:	461a      	mov	r2, r3
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007108:	4b11      	ldr	r3, [pc, #68]	; (8007150 <USBD_SetConfig+0x118>)
 800710a:	781b      	ldrb	r3, [r3, #0]
 800710c:	4619      	mov	r1, r3
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f7ff f9a8 	bl	8006464 <USBD_SetClassConfig>
 8007114:	4603      	mov	r3, r0
 8007116:	2b02      	cmp	r3, #2
 8007118:	d104      	bne.n	8007124 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800711a:	6839      	ldr	r1, [r7, #0]
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f000 f8f2 	bl	8007306 <USBD_CtlError>
            return;
 8007122:	e012      	b.n	800714a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f000 f9b6 	bl	8007496 <USBD_CtlSendStatus>
        break;
 800712a:	e00e      	b.n	800714a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f000 f9b2 	bl	8007496 <USBD_CtlSendStatus>
        break;
 8007132:	e00a      	b.n	800714a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007134:	6839      	ldr	r1, [r7, #0]
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f000 f8e5 	bl	8007306 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800713c:	4b04      	ldr	r3, [pc, #16]	; (8007150 <USBD_SetConfig+0x118>)
 800713e:	781b      	ldrb	r3, [r3, #0]
 8007140:	4619      	mov	r1, r3
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f7ff f9ad 	bl	80064a2 <USBD_ClrClassConfig>
        break;
 8007148:	bf00      	nop
    }
  }
}
 800714a:	3708      	adds	r7, #8
 800714c:	46bd      	mov	sp, r7
 800714e:	bd80      	pop	{r7, pc}
 8007150:	200003c8 	.word	0x200003c8

08007154 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b082      	sub	sp, #8
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
 800715c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	88db      	ldrh	r3, [r3, #6]
 8007162:	2b01      	cmp	r3, #1
 8007164:	d004      	beq.n	8007170 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007166:	6839      	ldr	r1, [r7, #0]
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f000 f8cc 	bl	8007306 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800716e:	e022      	b.n	80071b6 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007176:	2b02      	cmp	r3, #2
 8007178:	dc02      	bgt.n	8007180 <USBD_GetConfig+0x2c>
 800717a:	2b00      	cmp	r3, #0
 800717c:	dc03      	bgt.n	8007186 <USBD_GetConfig+0x32>
 800717e:	e015      	b.n	80071ac <USBD_GetConfig+0x58>
 8007180:	2b03      	cmp	r3, #3
 8007182:	d00b      	beq.n	800719c <USBD_GetConfig+0x48>
 8007184:	e012      	b.n	80071ac <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2200      	movs	r2, #0
 800718a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	3308      	adds	r3, #8
 8007190:	2201      	movs	r2, #1
 8007192:	4619      	mov	r1, r3
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f000 f920 	bl	80073da <USBD_CtlSendData>
        break;
 800719a:	e00c      	b.n	80071b6 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	3304      	adds	r3, #4
 80071a0:	2201      	movs	r2, #1
 80071a2:	4619      	mov	r1, r3
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f000 f918 	bl	80073da <USBD_CtlSendData>
        break;
 80071aa:	e004      	b.n	80071b6 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80071ac:	6839      	ldr	r1, [r7, #0]
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f000 f8a9 	bl	8007306 <USBD_CtlError>
        break;
 80071b4:	bf00      	nop
}
 80071b6:	bf00      	nop
 80071b8:	3708      	adds	r7, #8
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}

080071be <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071be:	b580      	push	{r7, lr}
 80071c0:	b082      	sub	sp, #8
 80071c2:	af00      	add	r7, sp, #0
 80071c4:	6078      	str	r0, [r7, #4]
 80071c6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071ce:	3b01      	subs	r3, #1
 80071d0:	2b02      	cmp	r3, #2
 80071d2:	d81e      	bhi.n	8007212 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	88db      	ldrh	r3, [r3, #6]
 80071d8:	2b02      	cmp	r3, #2
 80071da:	d004      	beq.n	80071e6 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80071dc:	6839      	ldr	r1, [r7, #0]
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f000 f891 	bl	8007306 <USBD_CtlError>
        break;
 80071e4:	e01a      	b.n	800721c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2201      	movs	r2, #1
 80071ea:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d005      	beq.n	8007202 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	68db      	ldr	r3, [r3, #12]
 80071fa:	f043 0202 	orr.w	r2, r3, #2
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	330c      	adds	r3, #12
 8007206:	2202      	movs	r2, #2
 8007208:	4619      	mov	r1, r3
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f000 f8e5 	bl	80073da <USBD_CtlSendData>
      break;
 8007210:	e004      	b.n	800721c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007212:	6839      	ldr	r1, [r7, #0]
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f000 f876 	bl	8007306 <USBD_CtlError>
      break;
 800721a:	bf00      	nop
  }
}
 800721c:	bf00      	nop
 800721e:	3708      	adds	r7, #8
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}

08007224 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b082      	sub	sp, #8
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
 800722c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	885b      	ldrh	r3, [r3, #2]
 8007232:	2b01      	cmp	r3, #1
 8007234:	d106      	bne.n	8007244 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2201      	movs	r2, #1
 800723a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f000 f929 	bl	8007496 <USBD_CtlSendStatus>
  }
}
 8007244:	bf00      	nop
 8007246:	3708      	adds	r7, #8
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}

0800724c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b082      	sub	sp, #8
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
 8007254:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800725c:	3b01      	subs	r3, #1
 800725e:	2b02      	cmp	r3, #2
 8007260:	d80b      	bhi.n	800727a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	885b      	ldrh	r3, [r3, #2]
 8007266:	2b01      	cmp	r3, #1
 8007268:	d10c      	bne.n	8007284 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2200      	movs	r2, #0
 800726e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f000 f90f 	bl	8007496 <USBD_CtlSendStatus>
      }
      break;
 8007278:	e004      	b.n	8007284 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800727a:	6839      	ldr	r1, [r7, #0]
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f000 f842 	bl	8007306 <USBD_CtlError>
      break;
 8007282:	e000      	b.n	8007286 <USBD_ClrFeature+0x3a>
      break;
 8007284:	bf00      	nop
  }
}
 8007286:	bf00      	nop
 8007288:	3708      	adds	r7, #8
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}

0800728e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800728e:	b480      	push	{r7}
 8007290:	b083      	sub	sp, #12
 8007292:	af00      	add	r7, sp, #0
 8007294:	6078      	str	r0, [r7, #4]
 8007296:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	781a      	ldrb	r2, [r3, #0]
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	785a      	ldrb	r2, [r3, #1]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	3302      	adds	r3, #2
 80072ac:	781b      	ldrb	r3, [r3, #0]
 80072ae:	b29a      	uxth	r2, r3
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	3303      	adds	r3, #3
 80072b4:	781b      	ldrb	r3, [r3, #0]
 80072b6:	b29b      	uxth	r3, r3
 80072b8:	021b      	lsls	r3, r3, #8
 80072ba:	b29b      	uxth	r3, r3
 80072bc:	4413      	add	r3, r2
 80072be:	b29a      	uxth	r2, r3
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	3304      	adds	r3, #4
 80072c8:	781b      	ldrb	r3, [r3, #0]
 80072ca:	b29a      	uxth	r2, r3
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	3305      	adds	r3, #5
 80072d0:	781b      	ldrb	r3, [r3, #0]
 80072d2:	b29b      	uxth	r3, r3
 80072d4:	021b      	lsls	r3, r3, #8
 80072d6:	b29b      	uxth	r3, r3
 80072d8:	4413      	add	r3, r2
 80072da:	b29a      	uxth	r2, r3
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	3306      	adds	r3, #6
 80072e4:	781b      	ldrb	r3, [r3, #0]
 80072e6:	b29a      	uxth	r2, r3
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	3307      	adds	r3, #7
 80072ec:	781b      	ldrb	r3, [r3, #0]
 80072ee:	b29b      	uxth	r3, r3
 80072f0:	021b      	lsls	r3, r3, #8
 80072f2:	b29b      	uxth	r3, r3
 80072f4:	4413      	add	r3, r2
 80072f6:	b29a      	uxth	r2, r3
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	80da      	strh	r2, [r3, #6]

}
 80072fc:	bf00      	nop
 80072fe:	370c      	adds	r7, #12
 8007300:	46bd      	mov	sp, r7
 8007302:	bc80      	pop	{r7}
 8007304:	4770      	bx	lr

08007306 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007306:	b580      	push	{r7, lr}
 8007308:	b082      	sub	sp, #8
 800730a:	af00      	add	r7, sp, #0
 800730c:	6078      	str	r0, [r7, #4]
 800730e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007310:	2180      	movs	r1, #128	; 0x80
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f000 fc3a 	bl	8007b8c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007318:	2100      	movs	r1, #0
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f000 fc36 	bl	8007b8c <USBD_LL_StallEP>
}
 8007320:	bf00      	nop
 8007322:	3708      	adds	r7, #8
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}

08007328 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b086      	sub	sp, #24
 800732c:	af00      	add	r7, sp, #0
 800732e:	60f8      	str	r0, [r7, #12]
 8007330:	60b9      	str	r1, [r7, #8]
 8007332:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007334:	2300      	movs	r3, #0
 8007336:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d032      	beq.n	80073a4 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800733e:	68f8      	ldr	r0, [r7, #12]
 8007340:	f000 f834 	bl	80073ac <USBD_GetLen>
 8007344:	4603      	mov	r3, r0
 8007346:	3301      	adds	r3, #1
 8007348:	b29b      	uxth	r3, r3
 800734a:	005b      	lsls	r3, r3, #1
 800734c:	b29a      	uxth	r2, r3
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007352:	7dfb      	ldrb	r3, [r7, #23]
 8007354:	1c5a      	adds	r2, r3, #1
 8007356:	75fa      	strb	r2, [r7, #23]
 8007358:	461a      	mov	r2, r3
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	4413      	add	r3, r2
 800735e:	687a      	ldr	r2, [r7, #4]
 8007360:	7812      	ldrb	r2, [r2, #0]
 8007362:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007364:	7dfb      	ldrb	r3, [r7, #23]
 8007366:	1c5a      	adds	r2, r3, #1
 8007368:	75fa      	strb	r2, [r7, #23]
 800736a:	461a      	mov	r2, r3
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	4413      	add	r3, r2
 8007370:	2203      	movs	r2, #3
 8007372:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007374:	e012      	b.n	800739c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	1c5a      	adds	r2, r3, #1
 800737a:	60fa      	str	r2, [r7, #12]
 800737c:	7dfa      	ldrb	r2, [r7, #23]
 800737e:	1c51      	adds	r1, r2, #1
 8007380:	75f9      	strb	r1, [r7, #23]
 8007382:	4611      	mov	r1, r2
 8007384:	68ba      	ldr	r2, [r7, #8]
 8007386:	440a      	add	r2, r1
 8007388:	781b      	ldrb	r3, [r3, #0]
 800738a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800738c:	7dfb      	ldrb	r3, [r7, #23]
 800738e:	1c5a      	adds	r2, r3, #1
 8007390:	75fa      	strb	r2, [r7, #23]
 8007392:	461a      	mov	r2, r3
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	4413      	add	r3, r2
 8007398:	2200      	movs	r2, #0
 800739a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	781b      	ldrb	r3, [r3, #0]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d1e8      	bne.n	8007376 <USBD_GetString+0x4e>
    }
  }
}
 80073a4:	bf00      	nop
 80073a6:	3718      	adds	r7, #24
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}

080073ac <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b085      	sub	sp, #20
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80073b4:	2300      	movs	r3, #0
 80073b6:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80073b8:	e005      	b.n	80073c6 <USBD_GetLen+0x1a>
  {
    len++;
 80073ba:	7bfb      	ldrb	r3, [r7, #15]
 80073bc:	3301      	adds	r3, #1
 80073be:	73fb      	strb	r3, [r7, #15]
    buf++;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	3301      	adds	r3, #1
 80073c4:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	781b      	ldrb	r3, [r3, #0]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d1f5      	bne.n	80073ba <USBD_GetLen+0xe>
  }

  return len;
 80073ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80073d0:	4618      	mov	r0, r3
 80073d2:	3714      	adds	r7, #20
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bc80      	pop	{r7}
 80073d8:	4770      	bx	lr

080073da <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80073da:	b580      	push	{r7, lr}
 80073dc:	b084      	sub	sp, #16
 80073de:	af00      	add	r7, sp, #0
 80073e0:	60f8      	str	r0, [r7, #12]
 80073e2:	60b9      	str	r1, [r7, #8]
 80073e4:	4613      	mov	r3, r2
 80073e6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	2202      	movs	r2, #2
 80073ec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80073f0:	88fa      	ldrh	r2, [r7, #6]
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80073f6:	88fa      	ldrh	r2, [r7, #6]
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80073fc:	88fb      	ldrh	r3, [r7, #6]
 80073fe:	68ba      	ldr	r2, [r7, #8]
 8007400:	2100      	movs	r1, #0
 8007402:	68f8      	ldr	r0, [r7, #12]
 8007404:	f000 fc4b 	bl	8007c9e <USBD_LL_Transmit>

  return USBD_OK;
 8007408:	2300      	movs	r3, #0
}
 800740a:	4618      	mov	r0, r3
 800740c:	3710      	adds	r7, #16
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}

08007412 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007412:	b580      	push	{r7, lr}
 8007414:	b084      	sub	sp, #16
 8007416:	af00      	add	r7, sp, #0
 8007418:	60f8      	str	r0, [r7, #12]
 800741a:	60b9      	str	r1, [r7, #8]
 800741c:	4613      	mov	r3, r2
 800741e:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007420:	88fb      	ldrh	r3, [r7, #6]
 8007422:	68ba      	ldr	r2, [r7, #8]
 8007424:	2100      	movs	r1, #0
 8007426:	68f8      	ldr	r0, [r7, #12]
 8007428:	f000 fc39 	bl	8007c9e <USBD_LL_Transmit>

  return USBD_OK;
 800742c:	2300      	movs	r3, #0
}
 800742e:	4618      	mov	r0, r3
 8007430:	3710      	adds	r7, #16
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}

08007436 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007436:	b580      	push	{r7, lr}
 8007438:	b084      	sub	sp, #16
 800743a:	af00      	add	r7, sp, #0
 800743c:	60f8      	str	r0, [r7, #12]
 800743e:	60b9      	str	r1, [r7, #8]
 8007440:	4613      	mov	r3, r2
 8007442:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	2203      	movs	r2, #3
 8007448:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800744c:	88fa      	ldrh	r2, [r7, #6]
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007454:	88fa      	ldrh	r2, [r7, #6]
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800745c:	88fb      	ldrh	r3, [r7, #6]
 800745e:	68ba      	ldr	r2, [r7, #8]
 8007460:	2100      	movs	r1, #0
 8007462:	68f8      	ldr	r0, [r7, #12]
 8007464:	f000 fc3e 	bl	8007ce4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007468:	2300      	movs	r3, #0
}
 800746a:	4618      	mov	r0, r3
 800746c:	3710      	adds	r7, #16
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}

08007472 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007472:	b580      	push	{r7, lr}
 8007474:	b084      	sub	sp, #16
 8007476:	af00      	add	r7, sp, #0
 8007478:	60f8      	str	r0, [r7, #12]
 800747a:	60b9      	str	r1, [r7, #8]
 800747c:	4613      	mov	r3, r2
 800747e:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007480:	88fb      	ldrh	r3, [r7, #6]
 8007482:	68ba      	ldr	r2, [r7, #8]
 8007484:	2100      	movs	r1, #0
 8007486:	68f8      	ldr	r0, [r7, #12]
 8007488:	f000 fc2c 	bl	8007ce4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800748c:	2300      	movs	r3, #0
}
 800748e:	4618      	mov	r0, r3
 8007490:	3710      	adds	r7, #16
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}

08007496 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007496:	b580      	push	{r7, lr}
 8007498:	b082      	sub	sp, #8
 800749a:	af00      	add	r7, sp, #0
 800749c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2204      	movs	r2, #4
 80074a2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80074a6:	2300      	movs	r3, #0
 80074a8:	2200      	movs	r2, #0
 80074aa:	2100      	movs	r1, #0
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f000 fbf6 	bl	8007c9e <USBD_LL_Transmit>

  return USBD_OK;
 80074b2:	2300      	movs	r3, #0
}
 80074b4:	4618      	mov	r0, r3
 80074b6:	3708      	adds	r7, #8
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}

080074bc <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b082      	sub	sp, #8
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2205      	movs	r2, #5
 80074c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80074cc:	2300      	movs	r3, #0
 80074ce:	2200      	movs	r2, #0
 80074d0:	2100      	movs	r1, #0
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f000 fc06 	bl	8007ce4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80074d8:	2300      	movs	r3, #0
}
 80074da:	4618      	mov	r0, r3
 80074dc:	3708      	adds	r7, #8
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}
	...

080074e4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80074e8:	2200      	movs	r2, #0
 80074ea:	4912      	ldr	r1, [pc, #72]	; (8007534 <MX_USB_DEVICE_Init+0x50>)
 80074ec:	4812      	ldr	r0, [pc, #72]	; (8007538 <MX_USB_DEVICE_Init+0x54>)
 80074ee:	f7fe ff5f 	bl	80063b0 <USBD_Init>
 80074f2:	4603      	mov	r3, r0
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d001      	beq.n	80074fc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80074f8:	f7f9 f898 	bl	800062c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80074fc:	490f      	ldr	r1, [pc, #60]	; (800753c <MX_USB_DEVICE_Init+0x58>)
 80074fe:	480e      	ldr	r0, [pc, #56]	; (8007538 <MX_USB_DEVICE_Init+0x54>)
 8007500:	f7fe ff81 	bl	8006406 <USBD_RegisterClass>
 8007504:	4603      	mov	r3, r0
 8007506:	2b00      	cmp	r3, #0
 8007508:	d001      	beq.n	800750e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800750a:	f7f9 f88f 	bl	800062c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800750e:	490c      	ldr	r1, [pc, #48]	; (8007540 <MX_USB_DEVICE_Init+0x5c>)
 8007510:	4809      	ldr	r0, [pc, #36]	; (8007538 <MX_USB_DEVICE_Init+0x54>)
 8007512:	f7fe fee1 	bl	80062d8 <USBD_CDC_RegisterInterface>
 8007516:	4603      	mov	r3, r0
 8007518:	2b00      	cmp	r3, #0
 800751a:	d001      	beq.n	8007520 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800751c:	f7f9 f886 	bl	800062c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007520:	4805      	ldr	r0, [pc, #20]	; (8007538 <MX_USB_DEVICE_Init+0x54>)
 8007522:	f7fe ff89 	bl	8006438 <USBD_Start>
 8007526:	4603      	mov	r3, r0
 8007528:	2b00      	cmp	r3, #0
 800752a:	d001      	beq.n	8007530 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800752c:	f7f9 f87e 	bl	800062c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007530:	bf00      	nop
 8007532:	bd80      	pop	{r7, pc}
 8007534:	200002fc 	.word	0x200002fc
 8007538:	200003cc 	.word	0x200003cc
 800753c:	200001e8 	.word	0x200001e8
 8007540:	200002ec 	.word	0x200002ec

08007544 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007548:	2200      	movs	r2, #0
 800754a:	4905      	ldr	r1, [pc, #20]	; (8007560 <CDC_Init_FS+0x1c>)
 800754c:	4805      	ldr	r0, [pc, #20]	; (8007564 <CDC_Init_FS+0x20>)
 800754e:	f7fe fed9 	bl	8006304 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007552:	4905      	ldr	r1, [pc, #20]	; (8007568 <CDC_Init_FS+0x24>)
 8007554:	4803      	ldr	r0, [pc, #12]	; (8007564 <CDC_Init_FS+0x20>)
 8007556:	f7fe feee 	bl	8006336 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800755a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800755c:	4618      	mov	r0, r3
 800755e:	bd80      	pop	{r7, pc}
 8007560:	20000a90 	.word	0x20000a90
 8007564:	200003cc 	.word	0x200003cc
 8007568:	20000690 	.word	0x20000690

0800756c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800756c:	b480      	push	{r7}
 800756e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007570:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007572:	4618      	mov	r0, r3
 8007574:	46bd      	mov	sp, r7
 8007576:	bc80      	pop	{r7}
 8007578:	4770      	bx	lr
	...

0800757c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800757c:	b480      	push	{r7}
 800757e:	b083      	sub	sp, #12
 8007580:	af00      	add	r7, sp, #0
 8007582:	4603      	mov	r3, r0
 8007584:	6039      	str	r1, [r7, #0]
 8007586:	71fb      	strb	r3, [r7, #7]
 8007588:	4613      	mov	r3, r2
 800758a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800758c:	79fb      	ldrb	r3, [r7, #7]
 800758e:	2b23      	cmp	r3, #35	; 0x23
 8007590:	d84a      	bhi.n	8007628 <CDC_Control_FS+0xac>
 8007592:	a201      	add	r2, pc, #4	; (adr r2, 8007598 <CDC_Control_FS+0x1c>)
 8007594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007598:	08007629 	.word	0x08007629
 800759c:	08007629 	.word	0x08007629
 80075a0:	08007629 	.word	0x08007629
 80075a4:	08007629 	.word	0x08007629
 80075a8:	08007629 	.word	0x08007629
 80075ac:	08007629 	.word	0x08007629
 80075b0:	08007629 	.word	0x08007629
 80075b4:	08007629 	.word	0x08007629
 80075b8:	08007629 	.word	0x08007629
 80075bc:	08007629 	.word	0x08007629
 80075c0:	08007629 	.word	0x08007629
 80075c4:	08007629 	.word	0x08007629
 80075c8:	08007629 	.word	0x08007629
 80075cc:	08007629 	.word	0x08007629
 80075d0:	08007629 	.word	0x08007629
 80075d4:	08007629 	.word	0x08007629
 80075d8:	08007629 	.word	0x08007629
 80075dc:	08007629 	.word	0x08007629
 80075e0:	08007629 	.word	0x08007629
 80075e4:	08007629 	.word	0x08007629
 80075e8:	08007629 	.word	0x08007629
 80075ec:	08007629 	.word	0x08007629
 80075f0:	08007629 	.word	0x08007629
 80075f4:	08007629 	.word	0x08007629
 80075f8:	08007629 	.word	0x08007629
 80075fc:	08007629 	.word	0x08007629
 8007600:	08007629 	.word	0x08007629
 8007604:	08007629 	.word	0x08007629
 8007608:	08007629 	.word	0x08007629
 800760c:	08007629 	.word	0x08007629
 8007610:	08007629 	.word	0x08007629
 8007614:	08007629 	.word	0x08007629
 8007618:	08007629 	.word	0x08007629
 800761c:	08007629 	.word	0x08007629
 8007620:	08007629 	.word	0x08007629
 8007624:	08007629 	.word	0x08007629
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007628:	bf00      	nop
  }

  return (USBD_OK);
 800762a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800762c:	4618      	mov	r0, r3
 800762e:	370c      	adds	r7, #12
 8007630:	46bd      	mov	sp, r7
 8007632:	bc80      	pop	{r7}
 8007634:	4770      	bx	lr
 8007636:	bf00      	nop

08007638 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b082      	sub	sp, #8
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
 8007640:	6039      	str	r1, [r7, #0]
		USB_RX[i] = Buf[i];
		Buf[i] = 0;
	  }
  }*/
  //CDC_Transmit_FS(USB_RX,7);
  RX_USB_Flag = 1;
 8007642:	4b07      	ldr	r3, [pc, #28]	; (8007660 <CDC_Receive_FS+0x28>)
 8007644:	2201      	movs	r2, #1
 8007646:	701a      	strb	r2, [r3, #0]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007648:	6879      	ldr	r1, [r7, #4]
 800764a:	4806      	ldr	r0, [pc, #24]	; (8007664 <CDC_Receive_FS+0x2c>)
 800764c:	f7fe fe73 	bl	8006336 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007650:	4804      	ldr	r0, [pc, #16]	; (8007664 <CDC_Receive_FS+0x2c>)
 8007652:	f7fe fe83 	bl	800635c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007656:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007658:	4618      	mov	r0, r3
 800765a:	3708      	adds	r7, #8
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}
 8007660:	200003c0 	.word	0x200003c0
 8007664:	200003cc 	.word	0x200003cc

08007668 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007668:	b480      	push	{r7}
 800766a:	b083      	sub	sp, #12
 800766c:	af00      	add	r7, sp, #0
 800766e:	4603      	mov	r3, r0
 8007670:	6039      	str	r1, [r7, #0]
 8007672:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	2212      	movs	r2, #18
 8007678:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800767a:	4b03      	ldr	r3, [pc, #12]	; (8007688 <USBD_FS_DeviceDescriptor+0x20>)
}
 800767c:	4618      	mov	r0, r3
 800767e:	370c      	adds	r7, #12
 8007680:	46bd      	mov	sp, r7
 8007682:	bc80      	pop	{r7}
 8007684:	4770      	bx	lr
 8007686:	bf00      	nop
 8007688:	20000318 	.word	0x20000318

0800768c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800768c:	b480      	push	{r7}
 800768e:	b083      	sub	sp, #12
 8007690:	af00      	add	r7, sp, #0
 8007692:	4603      	mov	r3, r0
 8007694:	6039      	str	r1, [r7, #0]
 8007696:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	2204      	movs	r2, #4
 800769c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800769e:	4b03      	ldr	r3, [pc, #12]	; (80076ac <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	370c      	adds	r7, #12
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bc80      	pop	{r7}
 80076a8:	4770      	bx	lr
 80076aa:	bf00      	nop
 80076ac:	2000032c 	.word	0x2000032c

080076b0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b082      	sub	sp, #8
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	4603      	mov	r3, r0
 80076b8:	6039      	str	r1, [r7, #0]
 80076ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80076bc:	79fb      	ldrb	r3, [r7, #7]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d105      	bne.n	80076ce <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80076c2:	683a      	ldr	r2, [r7, #0]
 80076c4:	4907      	ldr	r1, [pc, #28]	; (80076e4 <USBD_FS_ProductStrDescriptor+0x34>)
 80076c6:	4808      	ldr	r0, [pc, #32]	; (80076e8 <USBD_FS_ProductStrDescriptor+0x38>)
 80076c8:	f7ff fe2e 	bl	8007328 <USBD_GetString>
 80076cc:	e004      	b.n	80076d8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80076ce:	683a      	ldr	r2, [r7, #0]
 80076d0:	4904      	ldr	r1, [pc, #16]	; (80076e4 <USBD_FS_ProductStrDescriptor+0x34>)
 80076d2:	4805      	ldr	r0, [pc, #20]	; (80076e8 <USBD_FS_ProductStrDescriptor+0x38>)
 80076d4:	f7ff fe28 	bl	8007328 <USBD_GetString>
  }
  return USBD_StrDesc;
 80076d8:	4b02      	ldr	r3, [pc, #8]	; (80076e4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80076da:	4618      	mov	r0, r3
 80076dc:	3708      	adds	r7, #8
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}
 80076e2:	bf00      	nop
 80076e4:	20000e90 	.word	0x20000e90
 80076e8:	08007e58 	.word	0x08007e58

080076ec <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b082      	sub	sp, #8
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	4603      	mov	r3, r0
 80076f4:	6039      	str	r1, [r7, #0]
 80076f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80076f8:	683a      	ldr	r2, [r7, #0]
 80076fa:	4904      	ldr	r1, [pc, #16]	; (800770c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80076fc:	4804      	ldr	r0, [pc, #16]	; (8007710 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80076fe:	f7ff fe13 	bl	8007328 <USBD_GetString>
  return USBD_StrDesc;
 8007702:	4b02      	ldr	r3, [pc, #8]	; (800770c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007704:	4618      	mov	r0, r3
 8007706:	3708      	adds	r7, #8
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}
 800770c:	20000e90 	.word	0x20000e90
 8007710:	08007e70 	.word	0x08007e70

08007714 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b082      	sub	sp, #8
 8007718:	af00      	add	r7, sp, #0
 800771a:	4603      	mov	r3, r0
 800771c:	6039      	str	r1, [r7, #0]
 800771e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	221a      	movs	r2, #26
 8007724:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007726:	f000 f843 	bl	80077b0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800772a:	4b02      	ldr	r3, [pc, #8]	; (8007734 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800772c:	4618      	mov	r0, r3
 800772e:	3708      	adds	r7, #8
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}
 8007734:	20000330 	.word	0x20000330

08007738 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b082      	sub	sp, #8
 800773c:	af00      	add	r7, sp, #0
 800773e:	4603      	mov	r3, r0
 8007740:	6039      	str	r1, [r7, #0]
 8007742:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007744:	79fb      	ldrb	r3, [r7, #7]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d105      	bne.n	8007756 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800774a:	683a      	ldr	r2, [r7, #0]
 800774c:	4907      	ldr	r1, [pc, #28]	; (800776c <USBD_FS_ConfigStrDescriptor+0x34>)
 800774e:	4808      	ldr	r0, [pc, #32]	; (8007770 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007750:	f7ff fdea 	bl	8007328 <USBD_GetString>
 8007754:	e004      	b.n	8007760 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007756:	683a      	ldr	r2, [r7, #0]
 8007758:	4904      	ldr	r1, [pc, #16]	; (800776c <USBD_FS_ConfigStrDescriptor+0x34>)
 800775a:	4805      	ldr	r0, [pc, #20]	; (8007770 <USBD_FS_ConfigStrDescriptor+0x38>)
 800775c:	f7ff fde4 	bl	8007328 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007760:	4b02      	ldr	r3, [pc, #8]	; (800776c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007762:	4618      	mov	r0, r3
 8007764:	3708      	adds	r7, #8
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}
 800776a:	bf00      	nop
 800776c:	20000e90 	.word	0x20000e90
 8007770:	08007e84 	.word	0x08007e84

08007774 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b082      	sub	sp, #8
 8007778:	af00      	add	r7, sp, #0
 800777a:	4603      	mov	r3, r0
 800777c:	6039      	str	r1, [r7, #0]
 800777e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007780:	79fb      	ldrb	r3, [r7, #7]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d105      	bne.n	8007792 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007786:	683a      	ldr	r2, [r7, #0]
 8007788:	4907      	ldr	r1, [pc, #28]	; (80077a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800778a:	4808      	ldr	r0, [pc, #32]	; (80077ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 800778c:	f7ff fdcc 	bl	8007328 <USBD_GetString>
 8007790:	e004      	b.n	800779c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007792:	683a      	ldr	r2, [r7, #0]
 8007794:	4904      	ldr	r1, [pc, #16]	; (80077a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007796:	4805      	ldr	r0, [pc, #20]	; (80077ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007798:	f7ff fdc6 	bl	8007328 <USBD_GetString>
  }
  return USBD_StrDesc;
 800779c:	4b02      	ldr	r3, [pc, #8]	; (80077a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800779e:	4618      	mov	r0, r3
 80077a0:	3708      	adds	r7, #8
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}
 80077a6:	bf00      	nop
 80077a8:	20000e90 	.word	0x20000e90
 80077ac:	08007e90 	.word	0x08007e90

080077b0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b084      	sub	sp, #16
 80077b4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80077b6:	4b0f      	ldr	r3, [pc, #60]	; (80077f4 <Get_SerialNum+0x44>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80077bc:	4b0e      	ldr	r3, [pc, #56]	; (80077f8 <Get_SerialNum+0x48>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80077c2:	4b0e      	ldr	r3, [pc, #56]	; (80077fc <Get_SerialNum+0x4c>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80077c8:	68fa      	ldr	r2, [r7, #12]
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	4413      	add	r3, r2
 80077ce:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d009      	beq.n	80077ea <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80077d6:	2208      	movs	r2, #8
 80077d8:	4909      	ldr	r1, [pc, #36]	; (8007800 <Get_SerialNum+0x50>)
 80077da:	68f8      	ldr	r0, [r7, #12]
 80077dc:	f000 f814 	bl	8007808 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80077e0:	2204      	movs	r2, #4
 80077e2:	4908      	ldr	r1, [pc, #32]	; (8007804 <Get_SerialNum+0x54>)
 80077e4:	68b8      	ldr	r0, [r7, #8]
 80077e6:	f000 f80f 	bl	8007808 <IntToUnicode>
  }
}
 80077ea:	bf00      	nop
 80077ec:	3710      	adds	r7, #16
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}
 80077f2:	bf00      	nop
 80077f4:	1ffff7e8 	.word	0x1ffff7e8
 80077f8:	1ffff7ec 	.word	0x1ffff7ec
 80077fc:	1ffff7f0 	.word	0x1ffff7f0
 8007800:	20000332 	.word	0x20000332
 8007804:	20000342 	.word	0x20000342

08007808 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007808:	b480      	push	{r7}
 800780a:	b087      	sub	sp, #28
 800780c:	af00      	add	r7, sp, #0
 800780e:	60f8      	str	r0, [r7, #12]
 8007810:	60b9      	str	r1, [r7, #8]
 8007812:	4613      	mov	r3, r2
 8007814:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007816:	2300      	movs	r3, #0
 8007818:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800781a:	2300      	movs	r3, #0
 800781c:	75fb      	strb	r3, [r7, #23]
 800781e:	e027      	b.n	8007870 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	0f1b      	lsrs	r3, r3, #28
 8007824:	2b09      	cmp	r3, #9
 8007826:	d80b      	bhi.n	8007840 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	0f1b      	lsrs	r3, r3, #28
 800782c:	b2da      	uxtb	r2, r3
 800782e:	7dfb      	ldrb	r3, [r7, #23]
 8007830:	005b      	lsls	r3, r3, #1
 8007832:	4619      	mov	r1, r3
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	440b      	add	r3, r1
 8007838:	3230      	adds	r2, #48	; 0x30
 800783a:	b2d2      	uxtb	r2, r2
 800783c:	701a      	strb	r2, [r3, #0]
 800783e:	e00a      	b.n	8007856 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	0f1b      	lsrs	r3, r3, #28
 8007844:	b2da      	uxtb	r2, r3
 8007846:	7dfb      	ldrb	r3, [r7, #23]
 8007848:	005b      	lsls	r3, r3, #1
 800784a:	4619      	mov	r1, r3
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	440b      	add	r3, r1
 8007850:	3237      	adds	r2, #55	; 0x37
 8007852:	b2d2      	uxtb	r2, r2
 8007854:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	011b      	lsls	r3, r3, #4
 800785a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800785c:	7dfb      	ldrb	r3, [r7, #23]
 800785e:	005b      	lsls	r3, r3, #1
 8007860:	3301      	adds	r3, #1
 8007862:	68ba      	ldr	r2, [r7, #8]
 8007864:	4413      	add	r3, r2
 8007866:	2200      	movs	r2, #0
 8007868:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800786a:	7dfb      	ldrb	r3, [r7, #23]
 800786c:	3301      	adds	r3, #1
 800786e:	75fb      	strb	r3, [r7, #23]
 8007870:	7dfa      	ldrb	r2, [r7, #23]
 8007872:	79fb      	ldrb	r3, [r7, #7]
 8007874:	429a      	cmp	r2, r3
 8007876:	d3d3      	bcc.n	8007820 <IntToUnicode+0x18>
  }
}
 8007878:	bf00      	nop
 800787a:	bf00      	nop
 800787c:	371c      	adds	r7, #28
 800787e:	46bd      	mov	sp, r7
 8007880:	bc80      	pop	{r7}
 8007882:	4770      	bx	lr

08007884 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b084      	sub	sp, #16
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a11      	ldr	r2, [pc, #68]	; (80078d8 <HAL_PCD_MspInit+0x54>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d11b      	bne.n	80078ce <HAL_PCD_MspInit+0x4a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007896:	4b11      	ldr	r3, [pc, #68]	; (80078dc <HAL_PCD_MspInit+0x58>)
 8007898:	69db      	ldr	r3, [r3, #28]
 800789a:	4a10      	ldr	r2, [pc, #64]	; (80078dc <HAL_PCD_MspInit+0x58>)
 800789c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80078a0:	61d3      	str	r3, [r2, #28]
 80078a2:	4b0e      	ldr	r3, [pc, #56]	; (80078dc <HAL_PCD_MspInit+0x58>)
 80078a4:	69db      	ldr	r3, [r3, #28]
 80078a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80078aa:	60fb      	str	r3, [r7, #12]
 80078ac:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 80078ae:	2200      	movs	r2, #0
 80078b0:	2100      	movs	r1, #0
 80078b2:	2013      	movs	r0, #19
 80078b4:	f7f9 f8dd 	bl	8000a72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 80078b8:	2013      	movs	r0, #19
 80078ba:	f7f9 f8f6 	bl	8000aaa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80078be:	2200      	movs	r2, #0
 80078c0:	2100      	movs	r1, #0
 80078c2:	2014      	movs	r0, #20
 80078c4:	f7f9 f8d5 	bl	8000a72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80078c8:	2014      	movs	r0, #20
 80078ca:	f7f9 f8ee 	bl	8000aaa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80078ce:	bf00      	nop
 80078d0:	3710      	adds	r7, #16
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}
 80078d6:	bf00      	nop
 80078d8:	40005c00 	.word	0x40005c00
 80078dc:	40021000 	.word	0x40021000

080078e0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b082      	sub	sp, #8
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80078f4:	4619      	mov	r1, r3
 80078f6:	4610      	mov	r0, r2
 80078f8:	f7fe fde6 	bl	80064c8 <USBD_LL_SetupStage>
}
 80078fc:	bf00      	nop
 80078fe:	3708      	adds	r7, #8
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}

08007904 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b082      	sub	sp, #8
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
 800790c:	460b      	mov	r3, r1
 800790e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8007916:	78fa      	ldrb	r2, [r7, #3]
 8007918:	6879      	ldr	r1, [r7, #4]
 800791a:	4613      	mov	r3, r2
 800791c:	009b      	lsls	r3, r3, #2
 800791e:	4413      	add	r3, r2
 8007920:	00db      	lsls	r3, r3, #3
 8007922:	440b      	add	r3, r1
 8007924:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8007928:	681a      	ldr	r2, [r3, #0]
 800792a:	78fb      	ldrb	r3, [r7, #3]
 800792c:	4619      	mov	r1, r3
 800792e:	f7fe fe18 	bl	8006562 <USBD_LL_DataOutStage>
}
 8007932:	bf00      	nop
 8007934:	3708      	adds	r7, #8
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}

0800793a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800793a:	b580      	push	{r7, lr}
 800793c:	b082      	sub	sp, #8
 800793e:	af00      	add	r7, sp, #0
 8007940:	6078      	str	r0, [r7, #4]
 8007942:	460b      	mov	r3, r1
 8007944:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 800794c:	78fa      	ldrb	r2, [r7, #3]
 800794e:	6879      	ldr	r1, [r7, #4]
 8007950:	4613      	mov	r3, r2
 8007952:	009b      	lsls	r3, r3, #2
 8007954:	4413      	add	r3, r2
 8007956:	00db      	lsls	r3, r3, #3
 8007958:	440b      	add	r3, r1
 800795a:	333c      	adds	r3, #60	; 0x3c
 800795c:	681a      	ldr	r2, [r3, #0]
 800795e:	78fb      	ldrb	r3, [r7, #3]
 8007960:	4619      	mov	r1, r3
 8007962:	f7fe fe6f 	bl	8006644 <USBD_LL_DataInStage>
}
 8007966:	bf00      	nop
 8007968:	3708      	adds	r7, #8
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}

0800796e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800796e:	b580      	push	{r7, lr}
 8007970:	b082      	sub	sp, #8
 8007972:	af00      	add	r7, sp, #0
 8007974:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800797c:	4618      	mov	r0, r3
 800797e:	f7fe ff7f 	bl	8006880 <USBD_LL_SOF>
}
 8007982:	bf00      	nop
 8007984:	3708      	adds	r7, #8
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}

0800798a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800798a:	b580      	push	{r7, lr}
 800798c:	b084      	sub	sp, #16
 800798e:	af00      	add	r7, sp, #0
 8007990:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007992:	2301      	movs	r3, #1
 8007994:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	689b      	ldr	r3, [r3, #8]
 800799a:	2b02      	cmp	r3, #2
 800799c:	d001      	beq.n	80079a2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800799e:	f7f8 fe45 	bl	800062c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80079a8:	7bfa      	ldrb	r2, [r7, #15]
 80079aa:	4611      	mov	r1, r2
 80079ac:	4618      	mov	r0, r3
 80079ae:	f7fe ff2f 	bl	8006810 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80079b8:	4618      	mov	r0, r3
 80079ba:	f7fe fee8 	bl	800678e <USBD_LL_Reset>
}
 80079be:	bf00      	nop
 80079c0:	3710      	adds	r7, #16
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}
	...

080079c8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b082      	sub	sp, #8
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80079d6:	4618      	mov	r0, r3
 80079d8:	f7fe ff29 	bl	800682e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	699b      	ldr	r3, [r3, #24]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d005      	beq.n	80079f0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80079e4:	4b04      	ldr	r3, [pc, #16]	; (80079f8 <HAL_PCD_SuspendCallback+0x30>)
 80079e6:	691b      	ldr	r3, [r3, #16]
 80079e8:	4a03      	ldr	r2, [pc, #12]	; (80079f8 <HAL_PCD_SuspendCallback+0x30>)
 80079ea:	f043 0306 	orr.w	r3, r3, #6
 80079ee:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80079f0:	bf00      	nop
 80079f2:	3708      	adds	r7, #8
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd80      	pop	{r7, pc}
 80079f8:	e000ed00 	.word	0xe000ed00

080079fc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b082      	sub	sp, #8
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f7fe ff23 	bl	8006856 <USBD_LL_Resume>
}
 8007a10:	bf00      	nop
 8007a12:	3708      	adds	r7, #8
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bd80      	pop	{r7, pc}

08007a18 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b082      	sub	sp, #8
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007a20:	4a28      	ldr	r2, [pc, #160]	; (8007ac4 <USBD_LL_Init+0xac>)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	4a26      	ldr	r2, [pc, #152]	; (8007ac4 <USBD_LL_Init+0xac>)
 8007a2c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8007a30:	4b24      	ldr	r3, [pc, #144]	; (8007ac4 <USBD_LL_Init+0xac>)
 8007a32:	4a25      	ldr	r2, [pc, #148]	; (8007ac8 <USBD_LL_Init+0xb0>)
 8007a34:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007a36:	4b23      	ldr	r3, [pc, #140]	; (8007ac4 <USBD_LL_Init+0xac>)
 8007a38:	2208      	movs	r2, #8
 8007a3a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007a3c:	4b21      	ldr	r3, [pc, #132]	; (8007ac4 <USBD_LL_Init+0xac>)
 8007a3e:	2202      	movs	r2, #2
 8007a40:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007a42:	4b20      	ldr	r3, [pc, #128]	; (8007ac4 <USBD_LL_Init+0xac>)
 8007a44:	2200      	movs	r2, #0
 8007a46:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007a48:	4b1e      	ldr	r3, [pc, #120]	; (8007ac4 <USBD_LL_Init+0xac>)
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007a4e:	4b1d      	ldr	r3, [pc, #116]	; (8007ac4 <USBD_LL_Init+0xac>)
 8007a50:	2200      	movs	r2, #0
 8007a52:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007a54:	481b      	ldr	r0, [pc, #108]	; (8007ac4 <USBD_LL_Init+0xac>)
 8007a56:	f7f9 f9f8 	bl	8000e4a <HAL_PCD_Init>
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d001      	beq.n	8007a64 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8007a60:	f7f8 fde4 	bl	800062c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007a6a:	2318      	movs	r3, #24
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	2100      	movs	r1, #0
 8007a70:	f7fa ff17 	bl	80028a2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007a7a:	2358      	movs	r3, #88	; 0x58
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	2180      	movs	r1, #128	; 0x80
 8007a80:	f7fa ff0f 	bl	80028a2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007a8a:	23c0      	movs	r3, #192	; 0xc0
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	2181      	movs	r1, #129	; 0x81
 8007a90:	f7fa ff07 	bl	80028a2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007a9a:	f44f 7388 	mov.w	r3, #272	; 0x110
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	2101      	movs	r1, #1
 8007aa2:	f7fa fefe 	bl	80028a2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007aac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	2182      	movs	r1, #130	; 0x82
 8007ab4:	f7fa fef5 	bl	80028a2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8007ab8:	2300      	movs	r3, #0
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	3708      	adds	r7, #8
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}
 8007ac2:	bf00      	nop
 8007ac4:	20001090 	.word	0x20001090
 8007ac8:	40005c00 	.word	0x40005c00

08007acc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b084      	sub	sp, #16
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ad8:	2300      	movs	r3, #0
 8007ada:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	f7f9 fab0 	bl	8001048 <HAL_PCD_Start>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007aec:	7bfb      	ldrb	r3, [r7, #15]
 8007aee:	4618      	mov	r0, r3
 8007af0:	f000 f94e 	bl	8007d90 <USBD_Get_USB_Status>
 8007af4:	4603      	mov	r3, r0
 8007af6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007af8:	7bbb      	ldrb	r3, [r7, #14]
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	3710      	adds	r7, #16
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}

08007b02 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007b02:	b580      	push	{r7, lr}
 8007b04:	b084      	sub	sp, #16
 8007b06:	af00      	add	r7, sp, #0
 8007b08:	6078      	str	r0, [r7, #4]
 8007b0a:	4608      	mov	r0, r1
 8007b0c:	4611      	mov	r1, r2
 8007b0e:	461a      	mov	r2, r3
 8007b10:	4603      	mov	r3, r0
 8007b12:	70fb      	strb	r3, [r7, #3]
 8007b14:	460b      	mov	r3, r1
 8007b16:	70bb      	strb	r3, [r7, #2]
 8007b18:	4613      	mov	r3, r2
 8007b1a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b20:	2300      	movs	r3, #0
 8007b22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007b2a:	78bb      	ldrb	r3, [r7, #2]
 8007b2c:	883a      	ldrh	r2, [r7, #0]
 8007b2e:	78f9      	ldrb	r1, [r7, #3]
 8007b30:	f7f9 fc05 	bl	800133e <HAL_PCD_EP_Open>
 8007b34:	4603      	mov	r3, r0
 8007b36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b38:	7bfb      	ldrb	r3, [r7, #15]
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	f000 f928 	bl	8007d90 <USBD_Get_USB_Status>
 8007b40:	4603      	mov	r3, r0
 8007b42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b44:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	3710      	adds	r7, #16
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}

08007b4e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b4e:	b580      	push	{r7, lr}
 8007b50:	b084      	sub	sp, #16
 8007b52:	af00      	add	r7, sp, #0
 8007b54:	6078      	str	r0, [r7, #4]
 8007b56:	460b      	mov	r3, r1
 8007b58:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b5e:	2300      	movs	r3, #0
 8007b60:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007b68:	78fa      	ldrb	r2, [r7, #3]
 8007b6a:	4611      	mov	r1, r2
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	f7f9 fc43 	bl	80013f8 <HAL_PCD_EP_Close>
 8007b72:	4603      	mov	r3, r0
 8007b74:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b76:	7bfb      	ldrb	r3, [r7, #15]
 8007b78:	4618      	mov	r0, r3
 8007b7a:	f000 f909 	bl	8007d90 <USBD_Get_USB_Status>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b82:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b84:	4618      	mov	r0, r3
 8007b86:	3710      	adds	r7, #16
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}

08007b8c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b084      	sub	sp, #16
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
 8007b94:	460b      	mov	r3, r1
 8007b96:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b98:	2300      	movs	r3, #0
 8007b9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ba6:	78fa      	ldrb	r2, [r7, #3]
 8007ba8:	4611      	mov	r1, r2
 8007baa:	4618      	mov	r0, r3
 8007bac:	f7f9 fceb 	bl	8001586 <HAL_PCD_EP_SetStall>
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007bb4:	7bfb      	ldrb	r3, [r7, #15]
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	f000 f8ea 	bl	8007d90 <USBD_Get_USB_Status>
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007bc0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	3710      	adds	r7, #16
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	bd80      	pop	{r7, pc}

08007bca <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007bca:	b580      	push	{r7, lr}
 8007bcc:	b084      	sub	sp, #16
 8007bce:	af00      	add	r7, sp, #0
 8007bd0:	6078      	str	r0, [r7, #4]
 8007bd2:	460b      	mov	r3, r1
 8007bd4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007bda:	2300      	movs	r3, #0
 8007bdc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007be4:	78fa      	ldrb	r2, [r7, #3]
 8007be6:	4611      	mov	r1, r2
 8007be8:	4618      	mov	r0, r3
 8007bea:	f7f9 fd2c 	bl	8001646 <HAL_PCD_EP_ClrStall>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007bf2:	7bfb      	ldrb	r3, [r7, #15]
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	f000 f8cb 	bl	8007d90 <USBD_Get_USB_Status>
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007bfe:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	3710      	adds	r7, #16
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}

08007c08 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b085      	sub	sp, #20
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
 8007c10:	460b      	mov	r3, r1
 8007c12:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c1a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007c1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	da0c      	bge.n	8007c3e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007c24:	78fb      	ldrb	r3, [r7, #3]
 8007c26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c2a:	68f9      	ldr	r1, [r7, #12]
 8007c2c:	1c5a      	adds	r2, r3, #1
 8007c2e:	4613      	mov	r3, r2
 8007c30:	009b      	lsls	r3, r3, #2
 8007c32:	4413      	add	r3, r2
 8007c34:	00db      	lsls	r3, r3, #3
 8007c36:	440b      	add	r3, r1
 8007c38:	3302      	adds	r3, #2
 8007c3a:	781b      	ldrb	r3, [r3, #0]
 8007c3c:	e00b      	b.n	8007c56 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007c3e:	78fb      	ldrb	r3, [r7, #3]
 8007c40:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c44:	68f9      	ldr	r1, [r7, #12]
 8007c46:	4613      	mov	r3, r2
 8007c48:	009b      	lsls	r3, r3, #2
 8007c4a:	4413      	add	r3, r2
 8007c4c:	00db      	lsls	r3, r3, #3
 8007c4e:	440b      	add	r3, r1
 8007c50:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8007c54:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3714      	adds	r7, #20
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bc80      	pop	{r7}
 8007c5e:	4770      	bx	lr

08007c60 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b084      	sub	sp, #16
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
 8007c68:	460b      	mov	r3, r1
 8007c6a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c70:	2300      	movs	r3, #0
 8007c72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c7a:	78fa      	ldrb	r2, [r7, #3]
 8007c7c:	4611      	mov	r1, r2
 8007c7e:	4618      	mov	r0, r3
 8007c80:	f7f9 fb38 	bl	80012f4 <HAL_PCD_SetAddress>
 8007c84:	4603      	mov	r3, r0
 8007c86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c88:	7bfb      	ldrb	r3, [r7, #15]
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f000 f880 	bl	8007d90 <USBD_Get_USB_Status>
 8007c90:	4603      	mov	r3, r0
 8007c92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c94:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	3710      	adds	r7, #16
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}

08007c9e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007c9e:	b580      	push	{r7, lr}
 8007ca0:	b086      	sub	sp, #24
 8007ca2:	af00      	add	r7, sp, #0
 8007ca4:	60f8      	str	r0, [r7, #12]
 8007ca6:	607a      	str	r2, [r7, #4]
 8007ca8:	461a      	mov	r2, r3
 8007caa:	460b      	mov	r3, r1
 8007cac:	72fb      	strb	r3, [r7, #11]
 8007cae:	4613      	mov	r3, r2
 8007cb0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007cc0:	893b      	ldrh	r3, [r7, #8]
 8007cc2:	7af9      	ldrb	r1, [r7, #11]
 8007cc4:	687a      	ldr	r2, [r7, #4]
 8007cc6:	f7f9 fc27 	bl	8001518 <HAL_PCD_EP_Transmit>
 8007cca:	4603      	mov	r3, r0
 8007ccc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007cce:	7dfb      	ldrb	r3, [r7, #23]
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	f000 f85d 	bl	8007d90 <USBD_Get_USB_Status>
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007cda:	7dbb      	ldrb	r3, [r7, #22]
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3718      	adds	r7, #24
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}

08007ce4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b086      	sub	sp, #24
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	60f8      	str	r0, [r7, #12]
 8007cec:	607a      	str	r2, [r7, #4]
 8007cee:	461a      	mov	r2, r3
 8007cf0:	460b      	mov	r3, r1
 8007cf2:	72fb      	strb	r3, [r7, #11]
 8007cf4:	4613      	mov	r3, r2
 8007cf6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007d06:	893b      	ldrh	r3, [r7, #8]
 8007d08:	7af9      	ldrb	r1, [r7, #11]
 8007d0a:	687a      	ldr	r2, [r7, #4]
 8007d0c:	f7f9 fbbc 	bl	8001488 <HAL_PCD_EP_Receive>
 8007d10:	4603      	mov	r3, r0
 8007d12:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d14:	7dfb      	ldrb	r3, [r7, #23]
 8007d16:	4618      	mov	r0, r3
 8007d18:	f000 f83a 	bl	8007d90 <USBD_Get_USB_Status>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007d20:	7dbb      	ldrb	r3, [r7, #22]
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	3718      	adds	r7, #24
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}

08007d2a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d2a:	b580      	push	{r7, lr}
 8007d2c:	b082      	sub	sp, #8
 8007d2e:	af00      	add	r7, sp, #0
 8007d30:	6078      	str	r0, [r7, #4]
 8007d32:	460b      	mov	r3, r1
 8007d34:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d3c:	78fa      	ldrb	r2, [r7, #3]
 8007d3e:	4611      	mov	r1, r2
 8007d40:	4618      	mov	r0, r3
 8007d42:	f7f9 fbd2 	bl	80014ea <HAL_PCD_EP_GetRxCount>
 8007d46:	4603      	mov	r3, r0
}
 8007d48:	4618      	mov	r0, r3
 8007d4a:	3708      	adds	r7, #8
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}

08007d50 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007d50:	b480      	push	{r7}
 8007d52:	b083      	sub	sp, #12
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007d58:	4b02      	ldr	r3, [pc, #8]	; (8007d64 <USBD_static_malloc+0x14>)
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	370c      	adds	r7, #12
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bc80      	pop	{r7}
 8007d62:	4770      	bx	lr
 8007d64:	20001380 	.word	0x20001380

08007d68 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b083      	sub	sp, #12
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]

}
 8007d70:	bf00      	nop
 8007d72:	370c      	adds	r7, #12
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bc80      	pop	{r7}
 8007d78:	4770      	bx	lr

08007d7a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d7a:	b480      	push	{r7}
 8007d7c:	b083      	sub	sp, #12
 8007d7e:	af00      	add	r7, sp, #0
 8007d80:	6078      	str	r0, [r7, #4]
 8007d82:	460b      	mov	r3, r1
 8007d84:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8007d86:	bf00      	nop
 8007d88:	370c      	adds	r7, #12
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bc80      	pop	{r7}
 8007d8e:	4770      	bx	lr

08007d90 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007d90:	b480      	push	{r7}
 8007d92:	b085      	sub	sp, #20
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	4603      	mov	r3, r0
 8007d98:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007d9e:	79fb      	ldrb	r3, [r7, #7]
 8007da0:	2b03      	cmp	r3, #3
 8007da2:	d817      	bhi.n	8007dd4 <USBD_Get_USB_Status+0x44>
 8007da4:	a201      	add	r2, pc, #4	; (adr r2, 8007dac <USBD_Get_USB_Status+0x1c>)
 8007da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007daa:	bf00      	nop
 8007dac:	08007dbd 	.word	0x08007dbd
 8007db0:	08007dc3 	.word	0x08007dc3
 8007db4:	08007dc9 	.word	0x08007dc9
 8007db8:	08007dcf 	.word	0x08007dcf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	73fb      	strb	r3, [r7, #15]
    break;
 8007dc0:	e00b      	b.n	8007dda <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007dc2:	2302      	movs	r3, #2
 8007dc4:	73fb      	strb	r3, [r7, #15]
    break;
 8007dc6:	e008      	b.n	8007dda <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007dc8:	2301      	movs	r3, #1
 8007dca:	73fb      	strb	r3, [r7, #15]
    break;
 8007dcc:	e005      	b.n	8007dda <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007dce:	2302      	movs	r3, #2
 8007dd0:	73fb      	strb	r3, [r7, #15]
    break;
 8007dd2:	e002      	b.n	8007dda <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007dd4:	2302      	movs	r3, #2
 8007dd6:	73fb      	strb	r3, [r7, #15]
    break;
 8007dd8:	bf00      	nop
  }
  return usb_status;
 8007dda:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	3714      	adds	r7, #20
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bc80      	pop	{r7}
 8007de4:	4770      	bx	lr
 8007de6:	bf00      	nop

08007de8 <memset>:
 8007de8:	4603      	mov	r3, r0
 8007dea:	4402      	add	r2, r0
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d100      	bne.n	8007df2 <memset+0xa>
 8007df0:	4770      	bx	lr
 8007df2:	f803 1b01 	strb.w	r1, [r3], #1
 8007df6:	e7f9      	b.n	8007dec <memset+0x4>

08007df8 <__libc_init_array>:
 8007df8:	b570      	push	{r4, r5, r6, lr}
 8007dfa:	2600      	movs	r6, #0
 8007dfc:	4d0c      	ldr	r5, [pc, #48]	; (8007e30 <__libc_init_array+0x38>)
 8007dfe:	4c0d      	ldr	r4, [pc, #52]	; (8007e34 <__libc_init_array+0x3c>)
 8007e00:	1b64      	subs	r4, r4, r5
 8007e02:	10a4      	asrs	r4, r4, #2
 8007e04:	42a6      	cmp	r6, r4
 8007e06:	d109      	bne.n	8007e1c <__libc_init_array+0x24>
 8007e08:	f000 f81a 	bl	8007e40 <_init>
 8007e0c:	2600      	movs	r6, #0
 8007e0e:	4d0a      	ldr	r5, [pc, #40]	; (8007e38 <__libc_init_array+0x40>)
 8007e10:	4c0a      	ldr	r4, [pc, #40]	; (8007e3c <__libc_init_array+0x44>)
 8007e12:	1b64      	subs	r4, r4, r5
 8007e14:	10a4      	asrs	r4, r4, #2
 8007e16:	42a6      	cmp	r6, r4
 8007e18:	d105      	bne.n	8007e26 <__libc_init_array+0x2e>
 8007e1a:	bd70      	pop	{r4, r5, r6, pc}
 8007e1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e20:	4798      	blx	r3
 8007e22:	3601      	adds	r6, #1
 8007e24:	e7ee      	b.n	8007e04 <__libc_init_array+0xc>
 8007e26:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e2a:	4798      	blx	r3
 8007e2c:	3601      	adds	r6, #1
 8007e2e:	e7f2      	b.n	8007e16 <__libc_init_array+0x1e>
 8007e30:	08007ec4 	.word	0x08007ec4
 8007e34:	08007ec4 	.word	0x08007ec4
 8007e38:	08007ec4 	.word	0x08007ec4
 8007e3c:	08007ec8 	.word	0x08007ec8

08007e40 <_init>:
 8007e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e42:	bf00      	nop
 8007e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e46:	bc08      	pop	{r3}
 8007e48:	469e      	mov	lr, r3
 8007e4a:	4770      	bx	lr

08007e4c <_fini>:
 8007e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e4e:	bf00      	nop
 8007e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e52:	bc08      	pop	{r3}
 8007e54:	469e      	mov	lr, r3
 8007e56:	4770      	bx	lr
